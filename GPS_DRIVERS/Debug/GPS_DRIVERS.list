
GPS_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce8  08003ce8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200000b0  08003da0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003da0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9ac  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab5  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c2  00000000  00000000  0002cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016713  00000000  00000000  0002d72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb87  00000000  00000000  00043e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000888de  00000000  00000000  000509c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f04  00000000  00000000  000d92a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dc1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b0 	.word	0x200000b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08003c58 	.word	0x08003c58

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000b4 	.word	0x200000b4
 8000178:	08003c58 	.word	0x08003c58

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <UBX_M8N_CHECKSUM>:
 *	After calculating the checksum values CK_A and CK_B, return it as a 16 bit unsigned integer
 *  Where CK_A is the high byte, and CK_B is the low byte
 *
 *	Check documentation if you need more info, details in header file
 */
uint16_t UBX_M8N_CHECKSUM(uint8_t* buffer, uint8_t buflen) {
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]

	// These values will be used to compare with the buffer's
	uint8_t CK_A = 0, CK_B = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
 800048c:	2300      	movs	r3, #0
 800048e:	73bb      	strb	r3, [r7, #14]

	// loop to go through buffer payload
	// start at index 2 since first two bytes of buffer are not included in checksum calculation
	// do not include last 2 bytes of buffer since they are also not included in checksum calculation
	for (int i = 2; i < buflen - 2; i++) {
 8000490:	2302      	movs	r3, #2
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	e00d      	b.n	80004b2 <UBX_M8N_CHECKSUM+0x36>
		CK_A = CK_A + buffer[i];
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	781a      	ldrb	r2, [r3, #0]
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	4413      	add	r3, r2
 80004a2:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 80004a4:	7bba      	ldrb	r2, [r7, #14]
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4413      	add	r3, r2
 80004aa:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < buflen - 2; i++) {
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	3b02      	subs	r3, #2
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbec      	blt.n	8000496 <UBX_M8N_CHECKSUM+0x1a>
	// After calculating checksum, compare with checksum bytes from buffer
	// Return 1 if both are equal to buffer checksum, return 0 if not
	// return ((CK_A == buffer[buflen - 2]) && (CK_B == buffer[buflen - 1]));

	// return 2 byte checksum
	return ((CK_A<<8) | CK_B);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	b29b      	uxth	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <CONFIG_Transmit>:

/* This function sets a desired configuration in the GPS receiver
 * It takes in a pointer to the configuration message buffer, as well as its size
 * Calls Error_Handler() if something goes wrong
*/
void CONFIG_Transmit(uint8_t* buffer, uint8_t buflen) {
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b098      	sub	sp, #96	; 0x60
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal;    				// HAL return status
	uint8_t ACK_BUFFER[10];   				// temporary buffer for acknowledge message
	ACK_BUFFER[0] = GPS_DATA_REGISTER;	  	// set first element of buffer as register of data stream
 80004e4:	23ff      	movs	r3, #255	; 0xff
 80004e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	// set global ACK message with expected values
	UBX_ACK_ACK[6] = buffer[2];
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	789a      	ldrb	r2, [r3, #2]
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <CONFIG_Transmit+0x11c>)
 80004f0:	719a      	strb	r2, [r3, #6]
	UBX_ACK_ACK[7] = buffer[3];
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	78da      	ldrb	r2, [r3, #3]
 80004f6:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <CONFIG_Transmit+0x11c>)
 80004f8:	71da      	strb	r2, [r3, #7]

	// set the checksum bytes of the expected ACK message
	uint16_t expectedCheckSum = UBX_M8N_CHECKSUM(UBX_ACK_ACK, 10);
 80004fa:	210a      	movs	r1, #10
 80004fc:	483d      	ldr	r0, [pc, #244]	; (80005f4 <CONFIG_Transmit+0x11c>)
 80004fe:	f7ff ffbd 	bl	800047c <UBX_M8N_CHECKSUM>
 8000502:	4603      	mov	r3, r0
 8000504:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	UBX_ACK_ACK[8] = (expectedCheckSum >> 8) & 0xFF;		// CK_A is the high byte
 8000508:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <CONFIG_Transmit+0x11c>)
 8000514:	721a      	strb	r2, [r3, #8]
	UBX_ACK_ACK[9] = expectedCheckSum & 0xFF;				// CK_B is the low byte
 8000516:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <CONFIG_Transmit+0x11c>)
 800051e:	725a      	strb	r2, [r3, #9]
	
	// transmit desired CONFIG to GPS receiver
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, buffer, buflen, HAL_MAX_DELAY);
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f04f 32ff 	mov.w	r2, #4294967295
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	2184      	movs	r1, #132	; 0x84
 800052e:	4832      	ldr	r0, [pc, #200]	; (80005f8 <CONFIG_Transmit+0x120>)
 8000530:	f001 f85e 	bl	80015f0 <HAL_I2C_Master_Transmit>
 8000534:	4603      	mov	r3, r0
 8000536:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	if (hal != HAL_OK) {
 800053a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800053e:	2b00      	cmp	r3, #0
 8000540:	d011      	beq.n	8000566 <CONFIG_Transmit+0x8e>
		// something went wrong with transmit (exit)
		uint8_t test[] = "CONFIG transmit went wrong\r\n";
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <CONFIG_Transmit+0x124>)
 8000544:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000552:	c407      	stmia	r4!, {r0, r1, r2}
 8000554:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000556:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	221d      	movs	r2, #29
 8000560:	4827      	ldr	r0, [pc, #156]	; (8000600 <CONFIG_Transmit+0x128>)
 8000562:	f002 fcff 	bl	8002f64 <HAL_UART_Transmit>
	}

	// wait for a sec
	HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fc25 	bl	8000db8 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	657b      	str	r3, [r7, #84]	; 0x54
 8000572:	e035      	b.n	80005e0 <CONFIG_Transmit+0x108>
		hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, ACK_BUFFER, sizeof(ACK_BUFFER)/sizeof(ACK_BUFFER[0]), HAL_MAX_DELAY);
 8000574:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	230a      	movs	r3, #10
 8000580:	2185      	movs	r1, #133	; 0x85
 8000582:	481d      	ldr	r0, [pc, #116]	; (80005f8 <CONFIG_Transmit+0x120>)
 8000584:	f001 f932 	bl	80017ec <HAL_I2C_Master_Receive>
 8000588:	4603      	mov	r3, r0
 800058a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		if (hal != HAL_OK) {
 800058e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000592:	2b00      	cmp	r3, #0
 8000594:	d011      	beq.n	80005ba <CONFIG_Transmit+0xe2>
			// something went wrong with receive (exit)
			uint8_t test[] = "CONFIG receive went wrong\r\n";
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <CONFIG_Transmit+0x12c>)
 8000598:	f107 0408 	add.w	r4, r7, #8
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 80005aa:	f107 0108 	add.w	r1, r7, #8
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	221c      	movs	r2, #28
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <CONFIG_Transmit+0x128>)
 80005b6:	f002 fcd5 	bl	8002f64 <HAL_UART_Transmit>
		}

		HAL_UART_Transmit(&huart2, ACK_BUFFER, sizeof(ACK_BUFFER)/sizeof(ACK_BUFFER[0]), HAL_MAX_DELAY);
 80005ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	220a      	movs	r2, #10
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <CONFIG_Transmit+0x130>)
 80005c6:	f002 fccd 	bl	8002f64 <HAL_UART_Transmit>
//		uint8_t test[] = "\n";
//		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);

		if (ACK_BUFFER[2] != 0x05 && ACK_BUFFER[3] != 0x01) {
 80005ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005ce:	2b05      	cmp	r3, #5
 80005d0:	d003      	beq.n	80005da <CONFIG_Transmit+0x102>
 80005d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d106      	bne.n	80005e8 <CONFIG_Transmit+0x110>
	for (int i = 0; i < 5; i++) {
 80005da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005dc:	3301      	adds	r3, #1
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
 80005e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	ddc6      	ble.n	8000574 <CONFIG_Transmit+0x9c>
//
//	if (ACK_BUFFER[2] != 0x05 && ACK_BUFFER[3] != 0x01) {
//		uint8_t test[] = "config ACK went wrong\r\n";
//		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
//	}
}
 80005e6:	e000      	b.n	80005ea <CONFIG_Transmit+0x112>
			break;
 80005e8:	bf00      	nop
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	; 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bdb0      	pop	{r4, r5, r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000003c 	.word	0x2000003c
 80005f8:	200000cc 	.word	0x200000cc
 80005fc:	08003c70 	.word	0x08003c70
 8000600:	20000120 	.word	0x20000120
 8000604:	08003c90 	.word	0x08003c90
 8000608:	20000168 	.word	0x20000168

0800060c <GPS_Initialization>:

void GPS_Initialization(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
//	}
//	HAL_Delay(5000);

//	uint8_t test[] = "PRT CONFIG STARTS here\r\n";
//	HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
	CONFIG_Transmit(UBX_CFG_PRT, sizeof(UBX_CFG_PRT)/sizeof(UBX_CFG_PRT[0]));
 8000610:	211c      	movs	r1, #28
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <GPS_Initialization+0x38>)
 8000614:	f7ff ff60 	bl	80004d8 <CONFIG_Transmit>
	HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fbcc 	bl	8000db8 <HAL_Delay>

//	uint8_t test2[] = "msg CONFIG STARTS here\r\n";
//	HAL_UART_Transmit(&huart1, test2, sizeof(test2), HAL_MAX_DELAY);
	CONFIG_Transmit(UBX_CFG_MSG, sizeof(UBX_CFG_MSG)/sizeof(UBX_CFG_MSG[0]));
 8000620:	2110      	movs	r1, #16
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <GPS_Initialization+0x3c>)
 8000624:	f7ff ff58 	bl	80004d8 <CONFIG_Transmit>
	HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062c:	f000 fbc4 	bl	8000db8 <HAL_Delay>

//	uint8_t test3[] = "rate CONFIG STARTS here\r\n";
//	HAL_UART_Transmit(&huart1, test3, sizeof(test3), HAL_MAX_DELAY);
	CONFIG_Transmit(UBX_CFG_RATE, sizeof(UBX_CFG_RATE)/sizeof(UBX_CFG_RATE[0]));
 8000630:	210e      	movs	r1, #14
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <GPS_Initialization+0x40>)
 8000634:	f7ff ff50 	bl	80004d8 <CONFIG_Transmit>
	HAL_Delay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f000 fbbc 	bl	8000db8 <HAL_Delay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	2000001c 	.word	0x2000001c
 800064c:	2000002c 	.word	0x2000002c

08000650 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2201      	movs	r2, #1
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <__io_putchar+0x20>)
 8000662:	f002 fc7f 	bl	8002f64 <HAL_UART_Transmit>
  return ch;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000120 	.word	0x20000120

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a4      	sub	sp, #144	; 0x90
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fb2e 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f819 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f8e1 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000686:	f000 f85d 	bl	8000744 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800068a:	f000 f8b3 	bl	80007f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800068e:	f000 f887 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup GPS receiver with desired configurations
  printf("hello world\r\n");
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <main+0x3c>)
 8000694:	f002 ff52 	bl	800353c <puts>
  GPS_Initialization();
 8000698:	f7ff ffb8 	bl	800060c <GPS_Initialization>
  printf("hello world\r\n");
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <main+0x3c>)
 800069e:	f002 ff4d 	bl	800353c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  break;
 80006a2:	bf00      	nop
 80006a4:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3790      	adds	r7, #144	; 0x90
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08003cac 	.word	0x08003cac

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b092      	sub	sp, #72	; 0x48
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f81a 	bl	80036fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <SystemClock_Config+0x8c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <SystemClock_Config+0x8c>)
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e6:	2310      	movs	r3, #16
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fe2b 	bl	800235c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800070c:	f000 f900 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f947 	bl	80029bc <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000734:	f000 f8ec 	bl	8000910 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3748      	adds	r7, #72	; 0x48
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40007000 	.word	0x40007000

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f000 fdf1 	bl	8001368 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 f8c0 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000cc 	.word	0x200000cc
 8000798:	40005400 	.word	0x40005400
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART1_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d8:	f002 fb74 	bl	8002ec4 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f895 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000120 	.word	0x20000120
 80007f0:	40013800 	.word	0x40013800

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f002 fb4a 	bl	8002ec4 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f86b 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000168 	.word	0x20000168
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0x94>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <MX_GPIO_Init+0x94>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0x94>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0x94>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_GPIO_Init+0x94>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_GPIO_Init+0x94>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_GPIO_Init+0x94>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_GPIO_Init+0x94>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_GPIO_Init+0x94>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x98>)
 80008be:	f000 fbab 	bl	8001018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f000 fb6f 	bl	8000faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f000 fb88 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800

080008e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f4:	d103      	bne.n	80008fe <HAL_GPIO_EXTI_Callback+0x1a>
	  GPS_FLAG = 1;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_GPIO_EXTI_Callback+0x28>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 80008fc:	e000      	b.n	8000900 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 80008fe:	bf00      	nop
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200001b0 	.word	0x200001b0

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_MspInit+0x58>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_MspInit+0x58>)
 8000928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092c:	6253      	str	r3, [r2, #36]	; 0x24
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_MspInit+0x58>)
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_MspInit+0x58>)
 800093c:	6a1b      	ldr	r3, [r3, #32]
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <HAL_MspInit+0x58>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6213      	str	r3, [r2, #32]
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_MspInit+0x58>)
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_MspInit+0x58>)
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_MspInit+0x58>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6253      	str	r3, [r2, #36]	; 0x24
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_MspInit+0x58>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_I2C_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d128      	bne.n	80009ec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_I2C_MspInit+0x84>)
 80009d0:	f000 fb22 	bl	8001018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	6253      	str	r3, [r2, #36]	; 0x24
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x80>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <HAL_UART_MspInit+0xd8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d129      	bne.n	8000a76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6213      	str	r3, [r2, #32]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a27      	ldr	r2, [pc, #156]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a64:	2307      	movs	r3, #7
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0xe0>)
 8000a70:	f000 fad2 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a74:	e02c      	b.n	8000ad0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_UART_MspInit+0xe4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d127      	bne.n	8000ad0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a84:	4a15      	ldr	r2, [pc, #84]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6253      	str	r3, [r2, #36]	; 0x24
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	61d3      	str	r3, [r2, #28]
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_UART_MspInit+0xdc>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_UART_MspInit+0xe0>)
 8000acc:	f000 faa4 	bl	8001018 <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f927 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b3e:	f000 fbfb 	bl	8001338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e00a      	b.n	8000b6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b58:	f3af 8000 	nop.w
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	60ba      	str	r2, [r7, #8]
 8000b64:	b2ca      	uxtb	r2, r1
 8000b66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf0      	blt.n	8000b58 <_read+0x12>
  }

  return len;
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e009      	b.n	8000ba6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	60ba      	str	r2, [r7, #8]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd58 	bl	8000650 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dbf1      	blt.n	8000b92 <_write+0x12>
  }
  return len;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_close>:

int _close(int file)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <_isatty>:

int _isatty(int file)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f002 fda6 	bl	8003798 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20014000 	.word	0x20014000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200001b4 	.word	0x200001b4
 8000c80:	20000308 	.word	0x20000308

08000c84 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff fff8 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cac:	4c09      	ldr	r4, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 fd73 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fcd9 	bl	8000674 <main>
  bx lr
 8000cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000ccc:	08003cf0 	.word	0x08003cf0
  ldr r2, =_sbss
 8000cd0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000cd4:	20000308 	.word	0x20000308

08000cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_IRQHandler>

08000cda <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f955 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fe0e 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d022      	beq.n	8000d66 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_InitTick+0x68>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f962 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10f      	bne.n	8000d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d809      	bhi.n	8000d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f92c 	bl	8000faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_InitTick+0x70>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e004      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000050 	.word	0x20000050
 8000d78:	20000048 	.word	0x20000048
 8000d7c:	2000004c 	.word	0x2000004c

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200001b8 	.word	0x200001b8
 8000da0:	20000050 	.word	0x20000050

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200001b8 	.word	0x200001b8

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fff0 	bl	8000da4 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d004      	beq.n	8000ddc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_Delay+0x40>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ddc:	bf00      	nop
 8000dde:	f7ff ffe1 	bl	8000da4 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d8f7      	bhi.n	8000dde <HAL_Delay+0x26>
  {
  }
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000050 	.word	0x20000050

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <__NVIC_EnableIRQ+0x34>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff90 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff2d 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff42 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff35 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800102e:	e160      	b.n	80012f2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8152 	beq.w	80012ec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	6939      	ldr	r1, [r7, #16]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80ac 	beq.w	80012ec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <HAL_GPIO_Init+0x2f8>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <HAL_GPIO_Init+0x2f8>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_GPIO_Init+0x2f8>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011ac:	4a59      	ldr	r2, [pc, #356]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a51      	ldr	r2, [pc, #324]	; (8001318 <HAL_GPIO_Init+0x300>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d025      	beq.n	8001224 <HAL_GPIO_Init+0x20c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a50      	ldr	r2, [pc, #320]	; (800131c <HAL_GPIO_Init+0x304>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d01f      	beq.n	8001220 <HAL_GPIO_Init+0x208>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <HAL_GPIO_Init+0x308>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d019      	beq.n	800121c <HAL_GPIO_Init+0x204>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <HAL_GPIO_Init+0x30c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x200>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4d      	ldr	r2, [pc, #308]	; (8001328 <HAL_GPIO_Init+0x310>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1fc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4c      	ldr	r2, [pc, #304]	; (800132c <HAL_GPIO_Init+0x314>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1f8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <HAL_GPIO_Init+0x318>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1f4>
 8001208:	2306      	movs	r3, #6
 800120a:	e00c      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 800120c:	2307      	movs	r3, #7
 800120e:	e00a      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 8001210:	2305      	movs	r3, #5
 8001212:	e008      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 8001214:	2304      	movs	r3, #4
 8001216:	e006      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 8001218:	2303      	movs	r3, #3
 800121a:	e004      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 800121c:	2302      	movs	r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_GPIO_Init+0x20e>
 8001224:	2300      	movs	r3, #0
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	f002 0203 	and.w	r2, r2, #3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4093      	lsls	r3, r2
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001236:	4937      	ldr	r1, [pc, #220]	; (8001314 <HAL_GPIO_Init+0x2fc>)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_GPIO_Init+0x31c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_GPIO_Init+0x31c>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_GPIO_Init+0x31c>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x31c>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_GPIO_Init+0x31c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <HAL_GPIO_Init+0x31c>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_GPIO_Init+0x31c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_GPIO_Init+0x31c>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f47f ae97 	bne.w	8001030 <HAL_GPIO_Init+0x18>
  }
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40010000 	.word	0x40010000
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fac4 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e12b      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff faf2 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013cc:	f001 fcf2 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a81      	ldr	r2, [pc, #516]	; (80015dc <HAL_I2C_Init+0x274>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d807      	bhi.n	80013ec <HAL_I2C_Init+0x84>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a80      	ldr	r2, [pc, #512]	; (80015e0 <HAL_I2C_Init+0x278>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e006      	b.n	80013fa <HAL_I2C_Init+0x92>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a7d      	ldr	r2, [pc, #500]	; (80015e4 <HAL_I2C_Init+0x27c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf94      	ite	ls
 80013f4:	2301      	movls	r3, #1
 80013f6:	2300      	movhi	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0e7      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a78      	ldr	r2, [pc, #480]	; (80015e8 <HAL_I2C_Init+0x280>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_I2C_Init+0x274>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d802      	bhi.n	800143c <HAL_I2C_Init+0xd4>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	e009      	b.n	8001450 <HAL_I2C_Init+0xe8>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_I2C_Init+0x284>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	3301      	adds	r3, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	495c      	ldr	r1, [pc, #368]	; (80015dc <HAL_I2C_Init+0x274>)
 800146c:	428b      	cmp	r3, r1
 800146e:	d819      	bhi.n	80014a4 <HAL_I2C_Init+0x13c>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e59      	subs	r1, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fbb1 f3f3 	udiv	r3, r1, r3
 800147e:	1c59      	adds	r1, r3, #1
 8001480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001484:	400b      	ands	r3, r1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <HAL_I2C_Init+0x138>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e59      	subs	r1, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fbb1 f3f3 	udiv	r3, r1, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	e051      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e04f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_I2C_Init+0x168>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e012      	b.n	80014f6 <HAL_I2C_Init+0x18e>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Init+0x196>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e022      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <HAL_I2C_Init+0x1bc>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e58      	subs	r0, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	440b      	add	r3, r1
 8001514:	fbb0 f3f3 	udiv	r3, r0, r3
 8001518:	3301      	adds	r3, #1
 800151a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001522:	e00f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6809      	ldr	r1, [r1, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6911      	ldr	r1, [r2, #16]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68d2      	ldr	r2, [r2, #12]
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	000186a0 	.word	0x000186a0
 80015e0:	001e847f 	.word	0x001e847f
 80015e4:	003d08ff 	.word	0x003d08ff
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	461a      	mov	r2, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	817b      	strh	r3, [r7, #10]
 8001600:	4613      	mov	r3, r2
 8001602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fbce 	bl	8000da4 <HAL_GetTick>
 8001608:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	f040 80e0 	bne.w	80017d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2319      	movs	r3, #25
 800161e:	2201      	movs	r2, #1
 8001620:	4970      	ldr	r1, [pc, #448]	; (80017e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fc64 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
 8001630:	e0d3      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Master_Transmit+0x50>
 800163c:	2302      	movs	r3, #2
 800163e:	e0cc      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d007      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2221      	movs	r2, #33	; 0x21
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2210      	movs	r2, #16
 8001682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	893a      	ldrh	r2, [r7, #8]
 8001696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 face 	bl	8001c50 <I2C_MasterRequestWrite>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e08d      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d4:	e066      	b.n	80017a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	6a39      	ldr	r1, [r7, #32]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fd22 	bl	8002124 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d107      	bne.n	80016fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06b      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b04      	cmp	r3, #4
 800173e:	d11b      	bne.n	8001778 <HAL_I2C_Master_Transmit+0x188>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d017      	beq.n	8001778 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fd19 	bl	80021b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b04      	cmp	r3, #4
 800178e:	d107      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800179e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e01a      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d194      	bne.n	80016d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	00100002 	.word	0x00100002
 80017e8:	ffff0000 	.word	0xffff0000

080017ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	817b      	strh	r3, [r7, #10]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fad0 	bl	8000da4 <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	f040 8217 	bne.w	8001c42 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	497c      	ldr	r1, [pc, #496]	; (8001a10 <HAL_I2C_Master_Receive+0x224>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fb66 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	e20a      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2C_Master_Receive+0x50>
 8001838:	2302      	movs	r3, #2
 800183a:	e203      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d007      	beq.n	8001862 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2222      	movs	r2, #34	; 0x22
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a5c      	ldr	r2, [pc, #368]	; (8001a14 <HAL_I2C_Master_Receive+0x228>)
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fa52 	bl	8001d54 <I2C_MasterRequestRead>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c4      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d113      	bne.n	80018ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e198      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d11b      	bne.n	800192a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e178      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b02      	cmp	r3, #2
 8001930:	d11b      	bne.n	800196a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	e158      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001990:	e144      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b03      	cmp	r3, #3
 8001998:	f200 80f1 	bhi.w	8001b7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d123      	bne.n	80019ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fc4b 	bl	8002244 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e145      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ea:	e117      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d14e      	bne.n	8001a92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fa:	2200      	movs	r2, #0
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <HAL_I2C_Master_Receive+0x22c>)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa76 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e11a      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
 8001a0e:	bf00      	nop
 8001a10:	00100002 	.word	0x00100002
 8001a14:	ffff0000 	.word	0xffff0000
 8001a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a90:	e0c4      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	2200      	movs	r2, #0
 8001a9a:	496c      	ldr	r1, [pc, #432]	; (8001c4c <HAL_I2C_Master_Receive+0x460>)
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fa27 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cb      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	2200      	movs	r2, #0
 8001af6:	4955      	ldr	r1, [pc, #340]	; (8001c4c <HAL_I2C_Master_Receive+0x460>)
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f9f9 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e09d      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b7c:	e04e      	b.n	8001c1c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fb5e 	bl	8002244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e058      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d124      	bne.n	8001c1c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f aeb6 	bne.w	8001992 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	00010004 	.word	0x00010004

08001c50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d006      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d003      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c78:	d108      	bne.n	8001c8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d107      	bne.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f91d 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cca:	d103      	bne.n	8001cd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e035      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce0:	d108      	bne.n	8001cf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	e01b      	b.n	8001d2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf4:	897b      	ldrh	r3, [r7, #10]
 8001cf6:	11db      	asrs	r3, r3, #7
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0306 	and.w	r3, r3, #6
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f063 030f 	orn	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <I2C_MasterRequestWrite+0xfc>)
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f966 	bl	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e010      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <I2C_MasterRequestWrite+0x100>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f956 	bl	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	00010008 	.word	0x00010008
 8001d50:	00010002 	.word	0x00010002

08001d54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	460b      	mov	r3, r1
 8001d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d006      	beq.n	8001d8e <I2C_MasterRequestRead+0x3a>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <I2C_MasterRequestRead+0x3a>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d8c:	d108      	bne.n	8001da0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e00b      	b.n	8001db8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d107      	bne.n	8001db8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f893 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dde:	d103      	bne.n	8001de8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e079      	b.n	8001ee0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df4:	d108      	bne.n	8001e08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	e05f      	b.n	8001ec8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e08:	897b      	ldrh	r3, [r7, #10]
 8001e0a:	11db      	asrs	r3, r3, #7
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 0306 	and.w	r3, r3, #6
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f063 030f 	orn	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4930      	ldr	r1, [pc, #192]	; (8001ee8 <I2C_MasterRequestRead+0x194>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f8dc 	bl	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e054      	b.n	8001ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4929      	ldr	r1, [pc, #164]	; (8001eec <I2C_MasterRequestRead+0x198>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f8cc 	bl	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e044      	b.n	8001ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f831 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d103      	bne.n	8001eac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e017      	b.n	8001ee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	11db      	asrs	r3, r3, #7
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0306 	and.w	r3, r3, #6
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f063 030e 	orn	r3, r3, #14
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <I2C_MasterRequestRead+0x198>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f888 	bl	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	00010008 	.word	0x00010008
 8001eec:	00010002 	.word	0x00010002

08001ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	e048      	b.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d044      	beq.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7fe ff4b 	bl	8000da4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d139      	bne.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10d      	bne.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	e00c      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d116      	bne.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e023      	b.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	e00c      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d093      	beq.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff2:	e071      	b.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002002:	d123      	bne.n	800204c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800201c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e067      	b.n	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002052:	d041      	beq.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002054:	f7fe fea6 	bl	8000da4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d136      	bne.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4013      	ands	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	e00b      	b.n	80020a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e021      	b.n	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10c      	bne.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	43da      	mvns	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e00b      	b.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4013      	ands	r3, r2
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	f47f af6d 	bne.w	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002130:	e034      	b.n	800219c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8e3 	bl	80022fe <I2C_IsAcknowledgeFailed>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e034      	b.n	80021ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d028      	beq.n	800219c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7fe fe2b 	bl	8000da4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11d      	bne.n	800219c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d016      	beq.n	800219c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b80      	cmp	r3, #128	; 0x80
 80021a8:	d1c3      	bne.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c0:	e034      	b.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f89b 	bl	80022fe <I2C_IsAcknowledgeFailed>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e034      	b.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d028      	beq.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7fe fde3 	bl	8000da4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11d      	bne.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d016      	beq.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b04      	cmp	r3, #4
 8002238:	d1c3      	bne.n	80021c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002250:	e049      	b.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b10      	cmp	r3, #16
 800225e:	d119      	bne.n	8002294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0210 	mvn.w	r2, #16
 8002268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e030      	b.n	80022f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe fd86 	bl	8000da4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11d      	bne.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d016      	beq.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0220 	orr.w	r2, r3, #32
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d1ae      	bne.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d11b      	bne.n	800234e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800231e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0204 	orr.w	r2, r3, #4
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
	...

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e31d      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07b      	beq.n	8002486 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d006      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d10f      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b87      	ldr	r3, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06a      	beq.n	8002484 <HAL_RCC_OscConfig+0x128>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d166      	bne.n	8002484 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e2f7      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x74>
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e02d      	b.n	800242c <HAL_RCC_OscConfig+0xd0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x96>
 80023d8:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a78      	ldr	r2, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0xd0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0xb8>
 80023fa:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a70      	ldr	r2, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6d      	ldr	r2, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xd0>
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fcb6 	bl	8000da4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fcb2 	bl	8000da4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e2ad      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xe0>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fca2 	bl	8000da4 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fc9e 	bl	8000da4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e299      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002476:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x108>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d05a      	beq.n	8002548 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d119      	bne.n	80024d2 <HAL_RCC_OscConfig+0x176>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d116      	bne.n	80024d2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x160>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e276      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	493d      	ldr	r1, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d0:	e03a      	b.n	8002548 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d020      	beq.n	800251c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCC_OscConfig+0x268>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fc60 	bl	8000da4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fc5c 	bl	8000da4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e257      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	492a      	ldr	r1, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0x268>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fc3f 	bl	8000da4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fc3b 	bl	8000da4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e236      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80b8 	beq.w	80026c6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d170      	bne.n	800263e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x218>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e21a      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002580:	429a      	cmp	r2, r3
 8002582:	d921      	bls.n	80025c8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fc3b 	bl	8002e04 <RCC_SetFlashLatencyFromMSIRange>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e208      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4906      	ldr	r1, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	4901      	ldr	r1, [pc, #4]	; (80025c0 <HAL_RCC_OscConfig+0x264>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 80025be:	e020      	b.n	8002602 <HAL_RCC_OscConfig+0x2a6>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b99      	ldr	r3, [pc, #612]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4996      	ldr	r1, [pc, #600]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4991      	ldr	r1, [pc, #580]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fc06 	bl	8002e04 <RCC_SetFlashLatencyFromMSIRange>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1d3      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	0b5b      	lsrs	r3, r3, #13
 8002608:	3301      	adds	r3, #1
 800260a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002612:	4a87      	ldr	r2, [pc, #540]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	0912      	lsrs	r2, r2, #4
 8002618:	f002 020f 	and.w	r2, r2, #15
 800261c:	4985      	ldr	r1, [pc, #532]	; (8002834 <HAL_RCC_OscConfig+0x4d8>)
 800261e:	5c8a      	ldrb	r2, [r1, r2]
 8002620:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002622:	4a85      	ldr	r2, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x4dc>)
 8002624:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <HAL_RCC_OscConfig+0x4e0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fb6e 	bl	8000d0c <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d045      	beq.n	80026c6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	e1b5      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d029      	beq.n	800269a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002646:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x4e4>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fbaa 	bl	8000da4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002654:	f7fe fba6 	bl	8000da4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1a1      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002666:	4b72      	ldr	r3, [pc, #456]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002672:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	496c      	ldr	r1, [pc, #432]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	4967      	ldr	r1, [pc, #412]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269a:	4b69      	ldr	r3, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x4e4>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fb80 	bl	8000da4 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a8:	f7fe fb7c 	bl	8000da4 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e177      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d030      	beq.n	8002734 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x4e8>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe fb60 	bl	8000da4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fb5c 	bl	8000da4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e157      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x38c>
 8002706:	e015      	b.n	8002734 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002708:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe fb49 	bl	8000da4 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fb45 	bl	8000da4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e140      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002728:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80b5 	beq.w	80028ac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6253      	str	r3, [r2, #36]	; 0x24
 800275e:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x4ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_RCC_OscConfig+0x4ec>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_RCC_OscConfig+0x4ec>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fb0d 	bl	8000da4 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe fb09 	bl	8000da4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e104      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_OscConfig+0x4ec>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x466>
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6353      	str	r3, [r2, #52]	; 0x34
 80027c0:	e02d      	b.n	800281e <HAL_RCC_OscConfig+0x4c2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x488>
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d4:	6353      	str	r3, [r2, #52]	; 0x34
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	4a15      	ldr	r2, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e0:	6353      	str	r3, [r2, #52]	; 0x34
 80027e2:	e01c      	b.n	800281e <HAL_RCC_OscConfig+0x4c2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_OscConfig+0x4aa>
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6353      	str	r3, [r2, #52]	; 0x34
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6353      	str	r3, [r2, #52]	; 0x34
 8002804:	e00b      	b.n	800281e <HAL_RCC_OscConfig+0x4c2>
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 800280c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002810:	6353      	str	r3, [r2, #52]	; 0x34
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_RCC_OscConfig+0x4d4>)
 8002818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800281c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d024      	beq.n	8002870 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe fabd 	bl	8000da4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282c:	e019      	b.n	8002862 <HAL_RCC_OscConfig+0x506>
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	08003cc8 	.word	0x08003cc8
 8002838:	20000048 	.word	0x20000048
 800283c:	2000004c 	.word	0x2000004c
 8002840:	42470020 	.word	0x42470020
 8002844:	42470680 	.word	0x42470680
 8002848:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fe faaa 	bl	8000da4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0a3      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002862:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ee      	beq.n	800284c <HAL_RCC_OscConfig+0x4f0>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe fa98 	bl	8000da4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fa94 	bl	8000da4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e08d      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ee      	bne.n	8002878 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d079      	beq.n	80029a8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d056      	beq.n	8002968 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d13b      	bne.n	800293a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_OscConfig+0x65c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fa6c 	bl	8000da4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fa68 	bl	8000da4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e063      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	4319      	orrs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	430b      	orrs	r3, r1
 8002906:	492b      	ldr	r1, [pc, #172]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_OscConfig+0x65c>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fa47 	bl	8000da4 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fa43 	bl	8000da4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e03e      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x5be>
 8002938:	e036      	b.n	80029a8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x65c>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fa30 	bl	8000da4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fa2c 	bl	8000da4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e027      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x5ec>
 8002966:	e01f      	b.n	80029a8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e01a      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RCC_OscConfig+0x658>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	429a      	cmp	r2, r3
 8002986:	d10d      	bne.n	80029a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470060 	.word	0x42470060

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e11a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b8f      	ldr	r3, [pc, #572]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d919      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x34>
 80029e4:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a89      	ldr	r2, [pc, #548]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b87      	ldr	r3, [pc, #540]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 0201 	bic.w	r2, r3, #1
 80029f8:	4985      	ldr	r1, [pc, #532]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a00:	4b83      	ldr	r3, [pc, #524]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0f9      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	497a      	ldr	r1, [pc, #488]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 808e 	beq.w	8002b5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0d7      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0cb      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0bf      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0b7      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	495c      	ldr	r1, [pc, #368]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe f97c 	bl	8000da4 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d112      	bne.n	8002adc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe f974 	bl	8000da4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e09b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ace:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xfc>
 8002ada:	e03e      	b.n	8002b5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe f95d 	bl	8000da4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e084      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afc:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x12a>
 8002b08:	e027      	b.n	8002b5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d11d      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fe f946 	bl	8000da4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06d      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x158>
 8002b36:	e010      	b.n	8002b5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fe f934 	bl	8000da4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e05b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ee      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d219      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1be>
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0201 	bic.w	r2, r3, #1
 8002b82:	4923      	ldr	r1, [pc, #140]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_ClockConfig+0x254>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e034      	b.n	8002c06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4917      	ldr	r1, [pc, #92]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490f      	ldr	r1, [pc, #60]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f823 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_ClockConfig+0x258>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f886 	bl	8000d0c <HAL_InitTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c04:	7afb      	ldrb	r3, [r7, #11]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08003cc8 	.word	0x08003cc8
 8002c1c:	20000048 	.word	0x20000048
 8002c20:	2000004c 	.word	0x2000004c

08002c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b08e      	sub	sp, #56	; 0x38
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c2c:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	f200 8092 	bhi.w	8002d66 <HAL_RCC_GetSysClockFreq+0x142>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x28>
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x2e>
 8002c4a:	e08c      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x170>)
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c50:	e097      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b51      	ldr	r3, [pc, #324]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x174>)
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c56:	e094      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x178>)
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	0d9b      	lsrs	r3, r3, #22
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d021      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	2200      	movs	r2, #0
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	61fa      	str	r2, [r7, #28]
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x174>)
 8002c88:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c8c:	464a      	mov	r2, r9
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	2300      	movs	r3, #0
 8002c94:	4644      	mov	r4, r8
 8002c96:	fb04 f303 	mul.w	r3, r4, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a3e      	ldr	r2, [pc, #248]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x174>)
 8002c9e:	4644      	mov	r4, r8
 8002ca0:	fba4 0102 	umull	r0, r1, r4, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2200      	movs	r2, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	617a      	str	r2, [r7, #20]
 8002cb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cb4:	f7fd fa62 	bl	800017c <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc0:	e04e      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	4693      	mov	fp, r2
 8002cca:	4652      	mov	r2, sl
 8002ccc:	465b      	mov	r3, fp
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ce6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cfe:	ebb2 0408 	subs.w	r4, r2, r8
 8002d02:	eb63 0509 	sbc.w	r5, r3, r9
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	00eb      	lsls	r3, r5, #3
 8002d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d14:	00e2      	lsls	r2, r4, #3
 8002d16:	4614      	mov	r4, r2
 8002d18:	461d      	mov	r5, r3
 8002d1a:	eb14 030a 	adds.w	r3, r4, sl
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	eb45 030b 	adc.w	r3, r5, fp
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4620      	mov	r0, r4
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d40:	4601      	mov	r1, r0
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d54:	f7fd fa12 	bl	800017c <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d64:	e00d      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	3301      	adds	r3, #1
 8002d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3738      	adds	r7, #56	; 0x38
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	016e3600 	.word	0x016e3600
 8002d9c:	08003cbc 	.word	0x08003cbc

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000048 	.word	0x20000048

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08003cd8 	.word	0x08003cd8

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08003cd8 	.word	0x08003cd8

08002e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12c      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e016      	b.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6253      	str	r3, [r2, #36]	; 0x24
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e54:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e68:	d105      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e70:	d101      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002e72:	2301      	movs	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0201 	bic.w	r2, r3, #1
 8002e90:	490b      	ldr	r1, [pc, #44]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e042      	b.n	8002f5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fd88 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f91d 	bl	8003148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d16d      	bne.n	8003060 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_Transmit+0x2c>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e066      	b.n	8003062 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2221      	movs	r2, #33	; 0x21
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa2:	f7fd feff 	bl	8000da4 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_UART_Transmit+0x6c>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e003      	b.n	8002fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd8:	e02a      	b.n	8003030 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f840 	bl	800306a <UART_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e036      	b.n	8003062 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3302      	adds	r3, #2
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e007      	b.n	8003022 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3301      	adds	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1cf      	bne.n	8002fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	2140      	movs	r1, #64	; 0x40
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f810 	bl	800306a <UART_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e006      	b.n	8003062 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b090      	sub	sp, #64	; 0x40
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307a:	e050      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d04c      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x30>
 800308a:	f7fd fe8b 	bl	8000da4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003096:	429a      	cmp	r2, r3
 8003098:	d241      	bcs.n	800311e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ba:	637a      	str	r2, [r7, #52]	; 0x34
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e5      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	613b      	str	r3, [r7, #16]
   return(result);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ee:	623a      	str	r2, [r7, #32]
 80030f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	69f9      	ldr	r1, [r7, #28]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e5      	bne.n	80030ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00f      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d09f      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3740      	adds	r7, #64	; 0x40
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003188:	f023 030c 	bic.w	r3, r3, #12
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	430b      	orrs	r3, r1
 8003194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a55      	ldr	r2, [pc, #340]	; (8003308 <UART_SetConfig+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d103      	bne.n	80031be <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031b6:	f7ff fe11 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	e002      	b.n	80031c4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031be:	f7ff fdf9 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80031c2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	d14c      	bne.n	8003268 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a49      	ldr	r2, [pc, #292]	; (800330c <UART_SetConfig+0x1c4>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	0119      	lsls	r1, r3, #4
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <UART_SetConfig+0x1c4>)
 8003206:	fba3 0302 	umull	r0, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	fb00 f303 	mul.w	r3, r0, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a3c      	ldr	r2, [pc, #240]	; (800330c <UART_SetConfig+0x1c4>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003226:	4419      	add	r1, r3
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fbb2 f2f3 	udiv	r2, r2, r3
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <UART_SetConfig+0x1c4>)
 8003240:	fba3 0302 	umull	r0, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2064      	movs	r0, #100	; 0x64
 8003248:	fb00 f303 	mul.w	r3, r0, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a2e      	ldr	r2, [pc, #184]	; (800330c <UART_SetConfig+0x1c4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	440a      	add	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003266:	e04a      	b.n	80032fe <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	4a23      	ldr	r2, [pc, #140]	; (800330c <UART_SetConfig+0x1c4>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	0119      	lsls	r1, r3, #4
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	441a      	add	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fbb2 f2f3 	udiv	r2, r2, r3
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <UART_SetConfig+0x1c4>)
 80032a0:	fba3 0302 	umull	r0, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2064      	movs	r0, #100	; 0x64
 80032a8:	fb00 f303 	mul.w	r3, r0, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a16      	ldr	r2, [pc, #88]	; (800330c <UART_SetConfig+0x1c4>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032be:	4419      	add	r1, r3
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <UART_SetConfig+0x1c4>)
 80032d8:	fba3 0302 	umull	r0, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2064      	movs	r0, #100	; 0x64
 80032e0:	fb00 f303 	mul.w	r3, r0, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	; 0x32
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <UART_SetConfig+0x1c4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	440a      	add	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40013800 	.word	0x40013800
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <std>:
 8003310:	2300      	movs	r3, #0
 8003312:	b510      	push	{r4, lr}
 8003314:	4604      	mov	r4, r0
 8003316:	e9c0 3300 	strd	r3, r3, [r0]
 800331a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800331e:	6083      	str	r3, [r0, #8]
 8003320:	8181      	strh	r1, [r0, #12]
 8003322:	6643      	str	r3, [r0, #100]	; 0x64
 8003324:	81c2      	strh	r2, [r0, #14]
 8003326:	6183      	str	r3, [r0, #24]
 8003328:	4619      	mov	r1, r3
 800332a:	2208      	movs	r2, #8
 800332c:	305c      	adds	r0, #92	; 0x5c
 800332e:	f000 f9e5 	bl	80036fc <memset>
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <std+0x58>)
 8003334:	6224      	str	r4, [r4, #32]
 8003336:	6263      	str	r3, [r4, #36]	; 0x24
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <std+0x5c>)
 800333a:	62a3      	str	r3, [r4, #40]	; 0x28
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <std+0x60>)
 800333e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <std+0x64>)
 8003342:	6323      	str	r3, [r4, #48]	; 0x30
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <std+0x68>)
 8003346:	429c      	cmp	r4, r3
 8003348:	d006      	beq.n	8003358 <std+0x48>
 800334a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800334e:	4294      	cmp	r4, r2
 8003350:	d002      	beq.n	8003358 <std+0x48>
 8003352:	33d0      	adds	r3, #208	; 0xd0
 8003354:	429c      	cmp	r4, r3
 8003356:	d105      	bne.n	8003364 <std+0x54>
 8003358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003360:	f000 ba44 	b.w	80037ec <__retarget_lock_init_recursive>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	bf00      	nop
 8003368:	0800354d 	.word	0x0800354d
 800336c:	0800356f 	.word	0x0800356f
 8003370:	080035a7 	.word	0x080035a7
 8003374:	080035cb 	.word	0x080035cb
 8003378:	200001bc 	.word	0x200001bc

0800337c <stdio_exit_handler>:
 800337c:	4a02      	ldr	r2, [pc, #8]	; (8003388 <stdio_exit_handler+0xc>)
 800337e:	4903      	ldr	r1, [pc, #12]	; (800338c <stdio_exit_handler+0x10>)
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <stdio_exit_handler+0x14>)
 8003382:	f000 b869 	b.w	8003458 <_fwalk_sglue>
 8003386:	bf00      	nop
 8003388:	20000054 	.word	0x20000054
 800338c:	08003ae1 	.word	0x08003ae1
 8003390:	20000060 	.word	0x20000060

08003394 <cleanup_stdio>:
 8003394:	6841      	ldr	r1, [r0, #4]
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <cleanup_stdio+0x34>)
 8003398:	b510      	push	{r4, lr}
 800339a:	4299      	cmp	r1, r3
 800339c:	4604      	mov	r4, r0
 800339e:	d001      	beq.n	80033a4 <cleanup_stdio+0x10>
 80033a0:	f000 fb9e 	bl	8003ae0 <_fflush_r>
 80033a4:	68a1      	ldr	r1, [r4, #8]
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <cleanup_stdio+0x38>)
 80033a8:	4299      	cmp	r1, r3
 80033aa:	d002      	beq.n	80033b2 <cleanup_stdio+0x1e>
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 fb97 	bl	8003ae0 <_fflush_r>
 80033b2:	68e1      	ldr	r1, [r4, #12]
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <cleanup_stdio+0x3c>)
 80033b6:	4299      	cmp	r1, r3
 80033b8:	d004      	beq.n	80033c4 <cleanup_stdio+0x30>
 80033ba:	4620      	mov	r0, r4
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f000 bb8e 	b.w	8003ae0 <_fflush_r>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	200001bc 	.word	0x200001bc
 80033cc:	20000224 	.word	0x20000224
 80033d0:	2000028c 	.word	0x2000028c

080033d4 <global_stdio_init.part.0>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <global_stdio_init.part.0+0x30>)
 80033d8:	4c0b      	ldr	r4, [pc, #44]	; (8003408 <global_stdio_init.part.0+0x34>)
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <global_stdio_init.part.0+0x38>)
 80033dc:	4620      	mov	r0, r4
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	2104      	movs	r1, #4
 80033e2:	2200      	movs	r2, #0
 80033e4:	f7ff ff94 	bl	8003310 <std>
 80033e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033ec:	2201      	movs	r2, #1
 80033ee:	2109      	movs	r1, #9
 80033f0:	f7ff ff8e 	bl	8003310 <std>
 80033f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033f8:	2202      	movs	r2, #2
 80033fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fe:	2112      	movs	r1, #18
 8003400:	f7ff bf86 	b.w	8003310 <std>
 8003404:	200002f4 	.word	0x200002f4
 8003408:	200001bc 	.word	0x200001bc
 800340c:	0800337d 	.word	0x0800337d

08003410 <__sfp_lock_acquire>:
 8003410:	4801      	ldr	r0, [pc, #4]	; (8003418 <__sfp_lock_acquire+0x8>)
 8003412:	f000 b9ec 	b.w	80037ee <__retarget_lock_acquire_recursive>
 8003416:	bf00      	nop
 8003418:	200002fd 	.word	0x200002fd

0800341c <__sfp_lock_release>:
 800341c:	4801      	ldr	r0, [pc, #4]	; (8003424 <__sfp_lock_release+0x8>)
 800341e:	f000 b9e7 	b.w	80037f0 <__retarget_lock_release_recursive>
 8003422:	bf00      	nop
 8003424:	200002fd 	.word	0x200002fd

08003428 <__sinit>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	f7ff fff0 	bl	8003410 <__sfp_lock_acquire>
 8003430:	6a23      	ldr	r3, [r4, #32]
 8003432:	b11b      	cbz	r3, 800343c <__sinit+0x14>
 8003434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003438:	f7ff bff0 	b.w	800341c <__sfp_lock_release>
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <__sinit+0x28>)
 800343e:	6223      	str	r3, [r4, #32]
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__sinit+0x2c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f5      	bne.n	8003434 <__sinit+0xc>
 8003448:	f7ff ffc4 	bl	80033d4 <global_stdio_init.part.0>
 800344c:	e7f2      	b.n	8003434 <__sinit+0xc>
 800344e:	bf00      	nop
 8003450:	08003395 	.word	0x08003395
 8003454:	200002f4 	.word	0x200002f4

08003458 <_fwalk_sglue>:
 8003458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800345c:	4607      	mov	r7, r0
 800345e:	4688      	mov	r8, r1
 8003460:	4614      	mov	r4, r2
 8003462:	2600      	movs	r6, #0
 8003464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003468:	f1b9 0901 	subs.w	r9, r9, #1
 800346c:	d505      	bpl.n	800347a <_fwalk_sglue+0x22>
 800346e:	6824      	ldr	r4, [r4, #0]
 8003470:	2c00      	cmp	r4, #0
 8003472:	d1f7      	bne.n	8003464 <_fwalk_sglue+0xc>
 8003474:	4630      	mov	r0, r6
 8003476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d907      	bls.n	8003490 <_fwalk_sglue+0x38>
 8003480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	d003      	beq.n	8003490 <_fwalk_sglue+0x38>
 8003488:	4629      	mov	r1, r5
 800348a:	4638      	mov	r0, r7
 800348c:	47c0      	blx	r8
 800348e:	4306      	orrs	r6, r0
 8003490:	3568      	adds	r5, #104	; 0x68
 8003492:	e7e9      	b.n	8003468 <_fwalk_sglue+0x10>

08003494 <_puts_r>:
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4605      	mov	r5, r0
 800349a:	460e      	mov	r6, r1
 800349c:	6884      	ldr	r4, [r0, #8]
 800349e:	b90b      	cbnz	r3, 80034a4 <_puts_r+0x10>
 80034a0:	f7ff ffc2 	bl	8003428 <__sinit>
 80034a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034a6:	07db      	lsls	r3, r3, #31
 80034a8:	d405      	bmi.n	80034b6 <_puts_r+0x22>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	0598      	lsls	r0, r3, #22
 80034ae:	d402      	bmi.n	80034b6 <_puts_r+0x22>
 80034b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034b2:	f000 f99c 	bl	80037ee <__retarget_lock_acquire_recursive>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	0719      	lsls	r1, r3, #28
 80034ba:	d513      	bpl.n	80034e4 <_puts_r+0x50>
 80034bc:	6923      	ldr	r3, [r4, #16]
 80034be:	b18b      	cbz	r3, 80034e4 <_puts_r+0x50>
 80034c0:	3e01      	subs	r6, #1
 80034c2:	68a3      	ldr	r3, [r4, #8]
 80034c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60a3      	str	r3, [r4, #8]
 80034cc:	b9e9      	cbnz	r1, 800350a <_puts_r+0x76>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da2e      	bge.n	8003530 <_puts_r+0x9c>
 80034d2:	4622      	mov	r2, r4
 80034d4:	210a      	movs	r1, #10
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f87b 	bl	80035d2 <__swbuf_r>
 80034dc:	3001      	adds	r0, #1
 80034de:	d007      	beq.n	80034f0 <_puts_r+0x5c>
 80034e0:	250a      	movs	r5, #10
 80034e2:	e007      	b.n	80034f4 <_puts_r+0x60>
 80034e4:	4621      	mov	r1, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f8b0 	bl	800364c <__swsetup_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0e7      	beq.n	80034c0 <_puts_r+0x2c>
 80034f0:	f04f 35ff 	mov.w	r5, #4294967295
 80034f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034f6:	07da      	lsls	r2, r3, #31
 80034f8:	d405      	bmi.n	8003506 <_puts_r+0x72>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	059b      	lsls	r3, r3, #22
 80034fe:	d402      	bmi.n	8003506 <_puts_r+0x72>
 8003500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003502:	f000 f975 	bl	80037f0 <__retarget_lock_release_recursive>
 8003506:	4628      	mov	r0, r5
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	2b00      	cmp	r3, #0
 800350c:	da04      	bge.n	8003518 <_puts_r+0x84>
 800350e:	69a2      	ldr	r2, [r4, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	dc06      	bgt.n	8003522 <_puts_r+0x8e>
 8003514:	290a      	cmp	r1, #10
 8003516:	d004      	beq.n	8003522 <_puts_r+0x8e>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	6022      	str	r2, [r4, #0]
 800351e:	7019      	strb	r1, [r3, #0]
 8003520:	e7cf      	b.n	80034c2 <_puts_r+0x2e>
 8003522:	4622      	mov	r2, r4
 8003524:	4628      	mov	r0, r5
 8003526:	f000 f854 	bl	80035d2 <__swbuf_r>
 800352a:	3001      	adds	r0, #1
 800352c:	d1c9      	bne.n	80034c2 <_puts_r+0x2e>
 800352e:	e7df      	b.n	80034f0 <_puts_r+0x5c>
 8003530:	250a      	movs	r5, #10
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	6022      	str	r2, [r4, #0]
 8003538:	701d      	strb	r5, [r3, #0]
 800353a:	e7db      	b.n	80034f4 <_puts_r+0x60>

0800353c <puts>:
 800353c:	4b02      	ldr	r3, [pc, #8]	; (8003548 <puts+0xc>)
 800353e:	4601      	mov	r1, r0
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	f7ff bfa7 	b.w	8003494 <_puts_r>
 8003546:	bf00      	nop
 8003548:	200000ac 	.word	0x200000ac

0800354c <__sread>:
 800354c:	b510      	push	{r4, lr}
 800354e:	460c      	mov	r4, r1
 8003550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003554:	f000 f8fc 	bl	8003750 <_read_r>
 8003558:	2800      	cmp	r0, #0
 800355a:	bfab      	itete	ge
 800355c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800355e:	89a3      	ldrhlt	r3, [r4, #12]
 8003560:	181b      	addge	r3, r3, r0
 8003562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003566:	bfac      	ite	ge
 8003568:	6563      	strge	r3, [r4, #84]	; 0x54
 800356a:	81a3      	strhlt	r3, [r4, #12]
 800356c:	bd10      	pop	{r4, pc}

0800356e <__swrite>:
 800356e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003572:	461f      	mov	r7, r3
 8003574:	898b      	ldrh	r3, [r1, #12]
 8003576:	4605      	mov	r5, r0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	460c      	mov	r4, r1
 800357c:	4616      	mov	r6, r2
 800357e:	d505      	bpl.n	800358c <__swrite+0x1e>
 8003580:	2302      	movs	r3, #2
 8003582:	2200      	movs	r2, #0
 8003584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003588:	f000 f8d0 	bl	800372c <_lseek_r>
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	4632      	mov	r2, r6
 8003590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	4628      	mov	r0, r5
 8003598:	463b      	mov	r3, r7
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035a2:	f000 b8e7 	b.w	8003774 <_write_r>

080035a6 <__sseek>:
 80035a6:	b510      	push	{r4, lr}
 80035a8:	460c      	mov	r4, r1
 80035aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ae:	f000 f8bd 	bl	800372c <_lseek_r>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	bf15      	itete	ne
 80035b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80035ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035c2:	81a3      	strheq	r3, [r4, #12]
 80035c4:	bf18      	it	ne
 80035c6:	81a3      	strhne	r3, [r4, #12]
 80035c8:	bd10      	pop	{r4, pc}

080035ca <__sclose>:
 80035ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ce:	f000 b89d 	b.w	800370c <_close_r>

080035d2 <__swbuf_r>:
 80035d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d4:	460e      	mov	r6, r1
 80035d6:	4614      	mov	r4, r2
 80035d8:	4605      	mov	r5, r0
 80035da:	b118      	cbz	r0, 80035e4 <__swbuf_r+0x12>
 80035dc:	6a03      	ldr	r3, [r0, #32]
 80035de:	b90b      	cbnz	r3, 80035e4 <__swbuf_r+0x12>
 80035e0:	f7ff ff22 	bl	8003428 <__sinit>
 80035e4:	69a3      	ldr	r3, [r4, #24]
 80035e6:	60a3      	str	r3, [r4, #8]
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	071a      	lsls	r2, r3, #28
 80035ec:	d525      	bpl.n	800363a <__swbuf_r+0x68>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	b31b      	cbz	r3, 800363a <__swbuf_r+0x68>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	6922      	ldr	r2, [r4, #16]
 80035f6:	b2f6      	uxtb	r6, r6
 80035f8:	1a98      	subs	r0, r3, r2
 80035fa:	6963      	ldr	r3, [r4, #20]
 80035fc:	4637      	mov	r7, r6
 80035fe:	4283      	cmp	r3, r0
 8003600:	dc04      	bgt.n	800360c <__swbuf_r+0x3a>
 8003602:	4621      	mov	r1, r4
 8003604:	4628      	mov	r0, r5
 8003606:	f000 fa6b 	bl	8003ae0 <_fflush_r>
 800360a:	b9e0      	cbnz	r0, 8003646 <__swbuf_r+0x74>
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	3b01      	subs	r3, #1
 8003610:	60a3      	str	r3, [r4, #8]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	6022      	str	r2, [r4, #0]
 8003618:	701e      	strb	r6, [r3, #0]
 800361a:	6962      	ldr	r2, [r4, #20]
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	429a      	cmp	r2, r3
 8003620:	d004      	beq.n	800362c <__swbuf_r+0x5a>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	07db      	lsls	r3, r3, #31
 8003626:	d506      	bpl.n	8003636 <__swbuf_r+0x64>
 8003628:	2e0a      	cmp	r6, #10
 800362a:	d104      	bne.n	8003636 <__swbuf_r+0x64>
 800362c:	4621      	mov	r1, r4
 800362e:	4628      	mov	r0, r5
 8003630:	f000 fa56 	bl	8003ae0 <_fflush_r>
 8003634:	b938      	cbnz	r0, 8003646 <__swbuf_r+0x74>
 8003636:	4638      	mov	r0, r7
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f000 f805 	bl	800364c <__swsetup_r>
 8003642:	2800      	cmp	r0, #0
 8003644:	d0d5      	beq.n	80035f2 <__swbuf_r+0x20>
 8003646:	f04f 37ff 	mov.w	r7, #4294967295
 800364a:	e7f4      	b.n	8003636 <__swbuf_r+0x64>

0800364c <__swsetup_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <__swsetup_r+0xac>)
 8003650:	4605      	mov	r5, r0
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	460c      	mov	r4, r1
 8003656:	b118      	cbz	r0, 8003660 <__swsetup_r+0x14>
 8003658:	6a03      	ldr	r3, [r0, #32]
 800365a:	b90b      	cbnz	r3, 8003660 <__swsetup_r+0x14>
 800365c:	f7ff fee4 	bl	8003428 <__sinit>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003666:	0718      	lsls	r0, r3, #28
 8003668:	d422      	bmi.n	80036b0 <__swsetup_r+0x64>
 800366a:	06d9      	lsls	r1, r3, #27
 800366c:	d407      	bmi.n	800367e <__swsetup_r+0x32>
 800366e:	2309      	movs	r3, #9
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003676:	f04f 30ff 	mov.w	r0, #4294967295
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	e034      	b.n	80036e8 <__swsetup_r+0x9c>
 800367e:	0758      	lsls	r0, r3, #29
 8003680:	d512      	bpl.n	80036a8 <__swsetup_r+0x5c>
 8003682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003684:	b141      	cbz	r1, 8003698 <__swsetup_r+0x4c>
 8003686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800368a:	4299      	cmp	r1, r3
 800368c:	d002      	beq.n	8003694 <__swsetup_r+0x48>
 800368e:	4628      	mov	r0, r5
 8003690:	f000 f8b0 	bl	80037f4 <_free_r>
 8003694:	2300      	movs	r3, #0
 8003696:	6363      	str	r3, [r4, #52]	; 0x34
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800369e:	81a3      	strh	r3, [r4, #12]
 80036a0:	2300      	movs	r3, #0
 80036a2:	6063      	str	r3, [r4, #4]
 80036a4:	6923      	ldr	r3, [r4, #16]
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	b94b      	cbnz	r3, 80036c8 <__swsetup_r+0x7c>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036be:	d003      	beq.n	80036c8 <__swsetup_r+0x7c>
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 fa59 	bl	8003b7a <__smakebuf_r>
 80036c8:	89a0      	ldrh	r0, [r4, #12]
 80036ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ce:	f010 0301 	ands.w	r3, r0, #1
 80036d2:	d00a      	beq.n	80036ea <__swsetup_r+0x9e>
 80036d4:	2300      	movs	r3, #0
 80036d6:	60a3      	str	r3, [r4, #8]
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	425b      	negs	r3, r3
 80036dc:	61a3      	str	r3, [r4, #24]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	b943      	cbnz	r3, 80036f4 <__swsetup_r+0xa8>
 80036e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036e6:	d1c4      	bne.n	8003672 <__swsetup_r+0x26>
 80036e8:	bd38      	pop	{r3, r4, r5, pc}
 80036ea:	0781      	lsls	r1, r0, #30
 80036ec:	bf58      	it	pl
 80036ee:	6963      	ldrpl	r3, [r4, #20]
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	e7f4      	b.n	80036de <__swsetup_r+0x92>
 80036f4:	2000      	movs	r0, #0
 80036f6:	e7f7      	b.n	80036e8 <__swsetup_r+0x9c>
 80036f8:	200000ac 	.word	0x200000ac

080036fc <memset>:
 80036fc:	4603      	mov	r3, r0
 80036fe:	4402      	add	r2, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <_close_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	2300      	movs	r3, #0
 8003710:	4d05      	ldr	r5, [pc, #20]	; (8003728 <_close_r+0x1c>)
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fa4e 	bl	8000bb8 <_close>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_close_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_close_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	200002f8 	.word	0x200002f8

0800372c <_lseek_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	2200      	movs	r2, #0
 8003736:	4d05      	ldr	r5, [pc, #20]	; (800374c <_lseek_r+0x20>)
 8003738:	602a      	str	r2, [r5, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f7fd fa60 	bl	8000c00 <_lseek>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_lseek_r+0x1e>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b103      	cbz	r3, 800374a <_lseek_r+0x1e>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	200002f8 	.word	0x200002f8

08003750 <_read_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	2200      	movs	r2, #0
 800375a:	4d05      	ldr	r5, [pc, #20]	; (8003770 <_read_r+0x20>)
 800375c:	602a      	str	r2, [r5, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	f7fd f9f1 	bl	8000b46 <_read>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_read_r+0x1e>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_read_r+0x1e>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	200002f8 	.word	0x200002f8

08003774 <_write_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4604      	mov	r4, r0
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	2200      	movs	r2, #0
 800377e:	4d05      	ldr	r5, [pc, #20]	; (8003794 <_write_r+0x20>)
 8003780:	602a      	str	r2, [r5, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7fd f9fc 	bl	8000b80 <_write>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_write_r+0x1e>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_write_r+0x1e>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	200002f8 	.word	0x200002f8

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	200000ac 	.word	0x200000ac

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2600      	movs	r6, #0
 80037a8:	4d0c      	ldr	r5, [pc, #48]	; (80037dc <__libc_init_array+0x38>)
 80037aa:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	f000 fa50 	bl	8003c58 <_init>
 80037b8:	2600      	movs	r6, #0
 80037ba:	4d0a      	ldr	r5, [pc, #40]	; (80037e4 <__libc_init_array+0x40>)
 80037bc:	4c0a      	ldr	r4, [pc, #40]	; (80037e8 <__libc_init_array+0x44>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	08003ce8 	.word	0x08003ce8
 80037e0:	08003ce8 	.word	0x08003ce8
 80037e4:	08003ce8 	.word	0x08003ce8
 80037e8:	08003cec 	.word	0x08003cec

080037ec <__retarget_lock_init_recursive>:
 80037ec:	4770      	bx	lr

080037ee <__retarget_lock_acquire_recursive>:
 80037ee:	4770      	bx	lr

080037f0 <__retarget_lock_release_recursive>:
 80037f0:	4770      	bx	lr
	...

080037f4 <_free_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	4605      	mov	r5, r0
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d040      	beq.n	800387e <_free_r+0x8a>
 80037fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003800:	1f0c      	subs	r4, r1, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfb8      	it	lt
 8003806:	18e4      	addlt	r4, r4, r3
 8003808:	f000 f8dc 	bl	80039c4 <__malloc_lock>
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <_free_r+0x8c>)
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	b933      	cbnz	r3, 8003820 <_free_r+0x2c>
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	6014      	str	r4, [r2, #0]
 8003816:	4628      	mov	r0, r5
 8003818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381c:	f000 b8d8 	b.w	80039d0 <__malloc_unlock>
 8003820:	42a3      	cmp	r3, r4
 8003822:	d908      	bls.n	8003836 <_free_r+0x42>
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	1821      	adds	r1, r4, r0
 8003828:	428b      	cmp	r3, r1
 800382a:	bf01      	itttt	eq
 800382c:	6819      	ldreq	r1, [r3, #0]
 800382e:	685b      	ldreq	r3, [r3, #4]
 8003830:	1809      	addeq	r1, r1, r0
 8003832:	6021      	streq	r1, [r4, #0]
 8003834:	e7ed      	b.n	8003812 <_free_r+0x1e>
 8003836:	461a      	mov	r2, r3
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b10b      	cbz	r3, 8003840 <_free_r+0x4c>
 800383c:	42a3      	cmp	r3, r4
 800383e:	d9fa      	bls.n	8003836 <_free_r+0x42>
 8003840:	6811      	ldr	r1, [r2, #0]
 8003842:	1850      	adds	r0, r2, r1
 8003844:	42a0      	cmp	r0, r4
 8003846:	d10b      	bne.n	8003860 <_free_r+0x6c>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	4401      	add	r1, r0
 800384c:	1850      	adds	r0, r2, r1
 800384e:	4283      	cmp	r3, r0
 8003850:	6011      	str	r1, [r2, #0]
 8003852:	d1e0      	bne.n	8003816 <_free_r+0x22>
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4408      	add	r0, r1
 800385a:	6010      	str	r0, [r2, #0]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	e7da      	b.n	8003816 <_free_r+0x22>
 8003860:	d902      	bls.n	8003868 <_free_r+0x74>
 8003862:	230c      	movs	r3, #12
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	e7d6      	b.n	8003816 <_free_r+0x22>
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	1821      	adds	r1, r4, r0
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1809      	addeq	r1, r1, r0
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	6054      	str	r4, [r2, #4]
 800387c:	e7cb      	b.n	8003816 <_free_r+0x22>
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20000300 	.word	0x20000300

08003884 <sbrk_aligned>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0e      	ldr	r6, [pc, #56]	; (80038c0 <sbrk_aligned+0x3c>)
 8003888:	460c      	mov	r4, r1
 800388a:	6831      	ldr	r1, [r6, #0]
 800388c:	4605      	mov	r5, r0
 800388e:	b911      	cbnz	r1, 8003896 <sbrk_aligned+0x12>
 8003890:	f000 f9d2 	bl	8003c38 <_sbrk_r>
 8003894:	6030      	str	r0, [r6, #0]
 8003896:	4621      	mov	r1, r4
 8003898:	4628      	mov	r0, r5
 800389a:	f000 f9cd 	bl	8003c38 <_sbrk_r>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d00a      	beq.n	80038b8 <sbrk_aligned+0x34>
 80038a2:	1cc4      	adds	r4, r0, #3
 80038a4:	f024 0403 	bic.w	r4, r4, #3
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d007      	beq.n	80038bc <sbrk_aligned+0x38>
 80038ac:	1a21      	subs	r1, r4, r0
 80038ae:	4628      	mov	r0, r5
 80038b0:	f000 f9c2 	bl	8003c38 <_sbrk_r>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d101      	bne.n	80038bc <sbrk_aligned+0x38>
 80038b8:	f04f 34ff 	mov.w	r4, #4294967295
 80038bc:	4620      	mov	r0, r4
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	20000304 	.word	0x20000304

080038c4 <_malloc_r>:
 80038c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c8:	1ccd      	adds	r5, r1, #3
 80038ca:	f025 0503 	bic.w	r5, r5, #3
 80038ce:	3508      	adds	r5, #8
 80038d0:	2d0c      	cmp	r5, #12
 80038d2:	bf38      	it	cc
 80038d4:	250c      	movcc	r5, #12
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	4607      	mov	r7, r0
 80038da:	db01      	blt.n	80038e0 <_malloc_r+0x1c>
 80038dc:	42a9      	cmp	r1, r5
 80038de:	d905      	bls.n	80038ec <_malloc_r+0x28>
 80038e0:	230c      	movs	r3, #12
 80038e2:	2600      	movs	r6, #0
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4630      	mov	r0, r6
 80038e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039c0 <_malloc_r+0xfc>
 80038f0:	f000 f868 	bl	80039c4 <__malloc_lock>
 80038f4:	f8d8 3000 	ldr.w	r3, [r8]
 80038f8:	461c      	mov	r4, r3
 80038fa:	bb5c      	cbnz	r4, 8003954 <_malloc_r+0x90>
 80038fc:	4629      	mov	r1, r5
 80038fe:	4638      	mov	r0, r7
 8003900:	f7ff ffc0 	bl	8003884 <sbrk_aligned>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	4604      	mov	r4, r0
 8003908:	d155      	bne.n	80039b6 <_malloc_r+0xf2>
 800390a:	f8d8 4000 	ldr.w	r4, [r8]
 800390e:	4626      	mov	r6, r4
 8003910:	2e00      	cmp	r6, #0
 8003912:	d145      	bne.n	80039a0 <_malloc_r+0xdc>
 8003914:	2c00      	cmp	r4, #0
 8003916:	d048      	beq.n	80039aa <_malloc_r+0xe6>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	4631      	mov	r1, r6
 800391c:	4638      	mov	r0, r7
 800391e:	eb04 0903 	add.w	r9, r4, r3
 8003922:	f000 f989 	bl	8003c38 <_sbrk_r>
 8003926:	4581      	cmp	r9, r0
 8003928:	d13f      	bne.n	80039aa <_malloc_r+0xe6>
 800392a:	6821      	ldr	r1, [r4, #0]
 800392c:	4638      	mov	r0, r7
 800392e:	1a6d      	subs	r5, r5, r1
 8003930:	4629      	mov	r1, r5
 8003932:	f7ff ffa7 	bl	8003884 <sbrk_aligned>
 8003936:	3001      	adds	r0, #1
 8003938:	d037      	beq.n	80039aa <_malloc_r+0xe6>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	442b      	add	r3, r5
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	f8d8 3000 	ldr.w	r3, [r8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d038      	beq.n	80039ba <_malloc_r+0xf6>
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	42a2      	cmp	r2, r4
 800394c:	d12b      	bne.n	80039a6 <_malloc_r+0xe2>
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e00f      	b.n	8003974 <_malloc_r+0xb0>
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	1b52      	subs	r2, r2, r5
 8003958:	d41f      	bmi.n	800399a <_malloc_r+0xd6>
 800395a:	2a0b      	cmp	r2, #11
 800395c:	d917      	bls.n	800398e <_malloc_r+0xca>
 800395e:	1961      	adds	r1, r4, r5
 8003960:	42a3      	cmp	r3, r4
 8003962:	6025      	str	r5, [r4, #0]
 8003964:	bf18      	it	ne
 8003966:	6059      	strne	r1, [r3, #4]
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	bf08      	it	eq
 800396c:	f8c8 1000 	streq.w	r1, [r8]
 8003970:	5162      	str	r2, [r4, r5]
 8003972:	604b      	str	r3, [r1, #4]
 8003974:	4638      	mov	r0, r7
 8003976:	f104 060b 	add.w	r6, r4, #11
 800397a:	f000 f829 	bl	80039d0 <__malloc_unlock>
 800397e:	f026 0607 	bic.w	r6, r6, #7
 8003982:	1d23      	adds	r3, r4, #4
 8003984:	1af2      	subs	r2, r6, r3
 8003986:	d0ae      	beq.n	80038e6 <_malloc_r+0x22>
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	50a3      	str	r3, [r4, r2]
 800398c:	e7ab      	b.n	80038e6 <_malloc_r+0x22>
 800398e:	42a3      	cmp	r3, r4
 8003990:	6862      	ldr	r2, [r4, #4]
 8003992:	d1dd      	bne.n	8003950 <_malloc_r+0x8c>
 8003994:	f8c8 2000 	str.w	r2, [r8]
 8003998:	e7ec      	b.n	8003974 <_malloc_r+0xb0>
 800399a:	4623      	mov	r3, r4
 800399c:	6864      	ldr	r4, [r4, #4]
 800399e:	e7ac      	b.n	80038fa <_malloc_r+0x36>
 80039a0:	4634      	mov	r4, r6
 80039a2:	6876      	ldr	r6, [r6, #4]
 80039a4:	e7b4      	b.n	8003910 <_malloc_r+0x4c>
 80039a6:	4613      	mov	r3, r2
 80039a8:	e7cc      	b.n	8003944 <_malloc_r+0x80>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4638      	mov	r0, r7
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	f000 f80e 	bl	80039d0 <__malloc_unlock>
 80039b4:	e797      	b.n	80038e6 <_malloc_r+0x22>
 80039b6:	6025      	str	r5, [r4, #0]
 80039b8:	e7dc      	b.n	8003974 <_malloc_r+0xb0>
 80039ba:	605b      	str	r3, [r3, #4]
 80039bc:	deff      	udf	#255	; 0xff
 80039be:	bf00      	nop
 80039c0:	20000300 	.word	0x20000300

080039c4 <__malloc_lock>:
 80039c4:	4801      	ldr	r0, [pc, #4]	; (80039cc <__malloc_lock+0x8>)
 80039c6:	f7ff bf12 	b.w	80037ee <__retarget_lock_acquire_recursive>
 80039ca:	bf00      	nop
 80039cc:	200002fc 	.word	0x200002fc

080039d0 <__malloc_unlock>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__malloc_unlock+0x8>)
 80039d2:	f7ff bf0d 	b.w	80037f0 <__retarget_lock_release_recursive>
 80039d6:	bf00      	nop
 80039d8:	200002fc 	.word	0x200002fc

080039dc <__sflush_r>:
 80039dc:	898a      	ldrh	r2, [r1, #12]
 80039de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e0:	4605      	mov	r5, r0
 80039e2:	0710      	lsls	r0, r2, #28
 80039e4:	460c      	mov	r4, r1
 80039e6:	d457      	bmi.n	8003a98 <__sflush_r+0xbc>
 80039e8:	684b      	ldr	r3, [r1, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dc04      	bgt.n	80039f8 <__sflush_r+0x1c>
 80039ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dc01      	bgt.n	80039f8 <__sflush_r+0x1c>
 80039f4:	2000      	movs	r0, #0
 80039f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d0fa      	beq.n	80039f4 <__sflush_r+0x18>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a04:	682f      	ldr	r7, [r5, #0]
 8003a06:	6a21      	ldr	r1, [r4, #32]
 8003a08:	602b      	str	r3, [r5, #0]
 8003a0a:	d032      	beq.n	8003a72 <__sflush_r+0x96>
 8003a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	075a      	lsls	r2, r3, #29
 8003a12:	d505      	bpl.n	8003a20 <__sflush_r+0x44>
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	1ac0      	subs	r0, r0, r3
 8003a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a1a:	b10b      	cbz	r3, 8003a20 <__sflush_r+0x44>
 8003a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a1e:	1ac0      	subs	r0, r0, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	4602      	mov	r2, r0
 8003a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a26:	4628      	mov	r0, r5
 8003a28:	6a21      	ldr	r1, [r4, #32]
 8003a2a:	47b0      	blx	r6
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	d106      	bne.n	8003a40 <__sflush_r+0x64>
 8003a32:	6829      	ldr	r1, [r5, #0]
 8003a34:	291d      	cmp	r1, #29
 8003a36:	d82b      	bhi.n	8003a90 <__sflush_r+0xb4>
 8003a38:	4a28      	ldr	r2, [pc, #160]	; (8003adc <__sflush_r+0x100>)
 8003a3a:	410a      	asrs	r2, r1
 8003a3c:	07d6      	lsls	r6, r2, #31
 8003a3e:	d427      	bmi.n	8003a90 <__sflush_r+0xb4>
 8003a40:	2200      	movs	r2, #0
 8003a42:	6062      	str	r2, [r4, #4]
 8003a44:	6922      	ldr	r2, [r4, #16]
 8003a46:	04d9      	lsls	r1, r3, #19
 8003a48:	6022      	str	r2, [r4, #0]
 8003a4a:	d504      	bpl.n	8003a56 <__sflush_r+0x7a>
 8003a4c:	1c42      	adds	r2, r0, #1
 8003a4e:	d101      	bne.n	8003a54 <__sflush_r+0x78>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b903      	cbnz	r3, 8003a56 <__sflush_r+0x7a>
 8003a54:	6560      	str	r0, [r4, #84]	; 0x54
 8003a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a58:	602f      	str	r7, [r5, #0]
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	d0ca      	beq.n	80039f4 <__sflush_r+0x18>
 8003a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a62:	4299      	cmp	r1, r3
 8003a64:	d002      	beq.n	8003a6c <__sflush_r+0x90>
 8003a66:	4628      	mov	r0, r5
 8003a68:	f7ff fec4 	bl	80037f4 <_free_r>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8003a70:	e7c1      	b.n	80039f6 <__sflush_r+0x1a>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	1c41      	adds	r1, r0, #1
 8003a7a:	d1c8      	bne.n	8003a0e <__sflush_r+0x32>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c5      	beq.n	8003a0e <__sflush_r+0x32>
 8003a82:	2b1d      	cmp	r3, #29
 8003a84:	d001      	beq.n	8003a8a <__sflush_r+0xae>
 8003a86:	2b16      	cmp	r3, #22
 8003a88:	d101      	bne.n	8003a8e <__sflush_r+0xb2>
 8003a8a:	602f      	str	r7, [r5, #0]
 8003a8c:	e7b2      	b.n	80039f4 <__sflush_r+0x18>
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	e7ae      	b.n	80039f6 <__sflush_r+0x1a>
 8003a98:	690f      	ldr	r7, [r1, #16]
 8003a9a:	2f00      	cmp	r7, #0
 8003a9c:	d0aa      	beq.n	80039f4 <__sflush_r+0x18>
 8003a9e:	0793      	lsls	r3, r2, #30
 8003aa0:	bf18      	it	ne
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	680e      	ldr	r6, [r1, #0]
 8003aa6:	bf08      	it	eq
 8003aa8:	694b      	ldreq	r3, [r1, #20]
 8003aaa:	1bf6      	subs	r6, r6, r7
 8003aac:	600f      	str	r7, [r1, #0]
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	dd9f      	ble.n	80039f4 <__sflush_r+0x18>
 8003ab4:	4633      	mov	r3, r6
 8003ab6:	463a      	mov	r2, r7
 8003ab8:	4628      	mov	r0, r5
 8003aba:	6a21      	ldr	r1, [r4, #32]
 8003abc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003ac0:	47e0      	blx	ip
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	dc06      	bgt.n	8003ad4 <__sflush_r+0xf8>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	e790      	b.n	80039f6 <__sflush_r+0x1a>
 8003ad4:	4407      	add	r7, r0
 8003ad6:	1a36      	subs	r6, r6, r0
 8003ad8:	e7ea      	b.n	8003ab0 <__sflush_r+0xd4>
 8003ada:	bf00      	nop
 8003adc:	dfbffffe 	.word	0xdfbffffe

08003ae0 <_fflush_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	690b      	ldr	r3, [r1, #16]
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	b913      	cbnz	r3, 8003af0 <_fflush_r+0x10>
 8003aea:	2500      	movs	r5, #0
 8003aec:	4628      	mov	r0, r5
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	b118      	cbz	r0, 8003afa <_fflush_r+0x1a>
 8003af2:	6a03      	ldr	r3, [r0, #32]
 8003af4:	b90b      	cbnz	r3, 8003afa <_fflush_r+0x1a>
 8003af6:	f7ff fc97 	bl	8003428 <__sinit>
 8003afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f3      	beq.n	8003aea <_fflush_r+0xa>
 8003b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b04:	07d0      	lsls	r0, r2, #31
 8003b06:	d404      	bmi.n	8003b12 <_fflush_r+0x32>
 8003b08:	0599      	lsls	r1, r3, #22
 8003b0a:	d402      	bmi.n	8003b12 <_fflush_r+0x32>
 8003b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0e:	f7ff fe6e 	bl	80037ee <__retarget_lock_acquire_recursive>
 8003b12:	4628      	mov	r0, r5
 8003b14:	4621      	mov	r1, r4
 8003b16:	f7ff ff61 	bl	80039dc <__sflush_r>
 8003b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	07da      	lsls	r2, r3, #31
 8003b20:	d4e4      	bmi.n	8003aec <_fflush_r+0xc>
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	059b      	lsls	r3, r3, #22
 8003b26:	d4e1      	bmi.n	8003aec <_fflush_r+0xc>
 8003b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b2a:	f7ff fe61 	bl	80037f0 <__retarget_lock_release_recursive>
 8003b2e:	e7dd      	b.n	8003aec <_fflush_r+0xc>

08003b30 <__swhatbuf_r>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	460c      	mov	r4, r1
 8003b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b38:	4615      	mov	r5, r2
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	461e      	mov	r6, r3
 8003b3e:	b096      	sub	sp, #88	; 0x58
 8003b40:	da0c      	bge.n	8003b5c <__swhatbuf_r+0x2c>
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	2100      	movs	r1, #0
 8003b46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b4a:	bf0c      	ite	eq
 8003b4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b50:	2340      	movne	r3, #64	; 0x40
 8003b52:	2000      	movs	r0, #0
 8003b54:	6031      	str	r1, [r6, #0]
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	b016      	add	sp, #88	; 0x58
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	466a      	mov	r2, sp
 8003b5e:	f000 f849 	bl	8003bf4 <_fstat_r>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	dbed      	blt.n	8003b42 <__swhatbuf_r+0x12>
 8003b66:	9901      	ldr	r1, [sp, #4]
 8003b68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b70:	4259      	negs	r1, r3
 8003b72:	4159      	adcs	r1, r3
 8003b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b78:	e7eb      	b.n	8003b52 <__swhatbuf_r+0x22>

08003b7a <__smakebuf_r>:
 8003b7a:	898b      	ldrh	r3, [r1, #12]
 8003b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b7e:	079d      	lsls	r5, r3, #30
 8003b80:	4606      	mov	r6, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	d507      	bpl.n	8003b96 <__smakebuf_r+0x1c>
 8003b86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	6163      	str	r3, [r4, #20]
 8003b92:	b002      	add	sp, #8
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	466a      	mov	r2, sp
 8003b98:	ab01      	add	r3, sp, #4
 8003b9a:	f7ff ffc9 	bl	8003b30 <__swhatbuf_r>
 8003b9e:	9900      	ldr	r1, [sp, #0]
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f7ff fe8e 	bl	80038c4 <_malloc_r>
 8003ba8:	b948      	cbnz	r0, 8003bbe <__smakebuf_r+0x44>
 8003baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bae:	059a      	lsls	r2, r3, #22
 8003bb0:	d4ef      	bmi.n	8003b92 <__smakebuf_r+0x18>
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	81a3      	strh	r3, [r4, #12]
 8003bbc:	e7e3      	b.n	8003b86 <__smakebuf_r+0xc>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	6020      	str	r0, [r4, #0]
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	9b00      	ldr	r3, [sp, #0]
 8003bca:	6120      	str	r0, [r4, #16]
 8003bcc:	6163      	str	r3, [r4, #20]
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	b15b      	cbz	r3, 8003bea <__smakebuf_r+0x70>
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd8:	f000 f81e 	bl	8003c18 <_isatty_r>
 8003bdc:	b128      	cbz	r0, 8003bea <__smakebuf_r+0x70>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f023 0303 	bic.w	r3, r3, #3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	431d      	orrs	r5, r3
 8003bee:	81a5      	strh	r5, [r4, #12]
 8003bf0:	e7cf      	b.n	8003b92 <__smakebuf_r+0x18>
	...

08003bf4 <_fstat_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4d06      	ldr	r5, [pc, #24]	; (8003c14 <_fstat_r+0x20>)
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	f7fc ffe4 	bl	8000bce <_fstat>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	d102      	bne.n	8003c10 <_fstat_r+0x1c>
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	b103      	cbz	r3, 8003c10 <_fstat_r+0x1c>
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
 8003c12:	bf00      	nop
 8003c14:	200002f8 	.word	0x200002f8

08003c18 <_isatty_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4d05      	ldr	r5, [pc, #20]	; (8003c34 <_isatty_r+0x1c>)
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	602b      	str	r3, [r5, #0]
 8003c24:	f7fc ffe2 	bl	8000bec <_isatty>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_isatty_r+0x1a>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_isatty_r+0x1a>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	200002f8 	.word	0x200002f8

08003c38 <_sbrk_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4d05      	ldr	r5, [pc, #20]	; (8003c54 <_sbrk_r+0x1c>)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fc ffe8 	bl	8000c18 <_sbrk>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_sbrk_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_sbrk_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	200002f8 	.word	0x200002f8

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
