
GPS_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000340c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000050  080036dc  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080036dc  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aad6  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001790  00000000  00000000  0002ab4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158d7  00000000  00000000  0002d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b880  00000000  00000000  00042d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cda  00000000  00000000  0004e5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d52d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025bc  00000000  00000000  000d5324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000050 	.word	0x20000050
 8000158:	00000000 	.word	0x00000000
 800015c:	08003530 	.word	0x08003530

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000054 	.word	0x20000054
 8000178:	08003530 	.word	0x08003530

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <UBX_M8N_CHECKSUM>:
 *	After calculating the checksum values CK_A and CK_B, return it as a 16 bit unsigned integer
 *  Where CK_A is the high byte, and CK_B is the low byte
 *
 *	Check documentation if you need more info, details in header file
 */
uint16_t UBX_M8N_CHECKSUM(uint8_t* buffer, uint8_t buflen) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]

	// These values will be used to compare with the buffer's
	uint8_t CK_A = 0, CK_B = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	2300      	movs	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	// loop to go through buffer payload
	// start at index 2 since first two bytes of buffer are not included in checksum calculation
	// do not include last 2 bytes of buffer since they are also not included in checksum calculation
	for (int i = 2; i < buflen - 2; i++) {
 8000498:	2302      	movs	r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	e00d      	b.n	80004ba <UBX_M8N_CHECKSUM+0x36>
		CK_A = CK_A + buffer[i];
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4413      	add	r3, r2
 80004aa:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 80004ac:	7bba      	ldrb	r2, [r7, #14]
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4413      	add	r3, r2
 80004b2:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < buflen - 2; i++) {
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	3b02      	subs	r3, #2
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbec      	blt.n	800049e <UBX_M8N_CHECKSUM+0x1a>
	// After calculating checksum, compare with checksum bytes from buffer
	// Return 1 if both are equal to buffer checksum, return 0 if not
	// return ((CK_A == buffer[buflen - 2]) && (CK_B == buffer[buflen - 1]));

	// return 2 byte checksum
	return ((CK_A<<8) | CK_B);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b21a      	sxth	r2, r3
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b21b      	sxth	r3, r3
 80004d2:	b29b      	uxth	r3, r3
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <UBX_M8N_NAV_POSLLH_Parsing>:

/* This function parses the payload from a NAV_POSLLH message
 * The payload is in little endian format, so left shift the bytes
 * Follow reference from driver and protocol description
 */
void UBX_M8N_NAV_POSLLH_Parsing(uint8_t *buffer, NavData* data) {
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
	data->iTOW = buffer[9]<<24 | buffer[8]<<16 | buffer[7]<<8 | buffer[6];
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3309      	adds	r3, #9
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	061a      	lsls	r2, r3, #24
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3308      	adds	r3, #8
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	041b      	lsls	r3, r3, #16
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3307      	adds	r3, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	4313      	orrs	r3, r2
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	3206      	adds	r2, #6
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	4313      	orrs	r3, r2
 800050c:	461a      	mov	r2, r3
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	601a      	str	r2, [r3, #0]
	data->lon = buffer[13]<<24 | buffer[12]<<16 | buffer[11]<<8 | buffer[10];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	330d      	adds	r3, #13
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	061a      	lsls	r2, r3, #24
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	330c      	adds	r3, #12
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	041b      	lsls	r3, r3, #16
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	330b      	adds	r3, #11
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	320a      	adds	r2, #10
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	605a      	str	r2, [r3, #4]
	data->lat = buffer[17]<<24 | buffer[16]<<16 | buffer[15]<<8 | buffer[14];
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3311      	adds	r3, #17
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	061a      	lsls	r2, r3, #24
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3310      	adds	r3, #16
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	330f      	adds	r3, #15
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	4313      	orrs	r3, r2
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	320e      	adds	r2, #14
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	609a      	str	r2, [r3, #8]
	data->height = buffer[21]<<24 | buffer[20]<<16 | buffer[19]<<8 | buffer[18];
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3315      	adds	r3, #21
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	061a      	lsls	r2, r3, #24
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3314      	adds	r3, #20
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3313      	adds	r3, #19
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4313      	orrs	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	3212      	adds	r2, #18
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	431a      	orrs	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	60da      	str	r2, [r3, #12]
	data->hMSL = buffer[25]<<24 | buffer[24]<<16 | buffer[23]<<8 | buffer[22];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3319      	adds	r3, #25
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	061a      	lsls	r2, r3, #24
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3318      	adds	r3, #24
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3317      	adds	r3, #23
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	3216      	adds	r2, #22
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	611a      	str	r2, [r3, #16]
	data->hAcc = buffer[29]<<24 | buffer[28]<<16 | buffer[27]<<8 | buffer[26];
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	331d      	adds	r3, #29
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	061a      	lsls	r2, r3, #24
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	331c      	adds	r3, #28
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	331b      	adds	r3, #27
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	321a      	adds	r2, #26
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	461a      	mov	r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	615a      	str	r2, [r3, #20]
	data->vAcc = buffer[33]<<24 | buffer[32]<<16 | buffer[31]<<8 | buffer[30];
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3321      	adds	r3, #33	; 0x21
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	061a      	lsls	r2, r3, #24
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3320      	adds	r3, #32
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	041b      	lsls	r3, r3, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	331f      	adds	r3, #31
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	321e      	adds	r2, #30
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4313      	orrs	r3, r2
 8000600:	461a      	mov	r2, r3
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	619a      	str	r2, [r3, #24]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <CONFIG_Transmit>:

/* This function sets a desired configuration in the GPS receiver
 * It takes in a pointer to the configuration message buffer, as well as its size
 * Calls Error_Handler() if something goes wrong
*/
void CONFIG_Transmit(uint8_t* buffer, uint8_t buflen) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b09e      	sub	sp, #120	; 0x78
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal;    				// HAL return status
	uint8_t ACK_BUFFER[10];   				// temporary buffer for acknowledge message
	ACK_BUFFER[0] = GPS_DATA_REGISTER;	  	// set first element of buffer as register of data stream
 800061c:	23ff      	movs	r3, #255	; 0xff
 800061e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	// set global ACK message with expected values
	UBX_ACK_ACK[6] = buffer[2];
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	789a      	ldrb	r2, [r3, #2]
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <CONFIG_Transmit+0x140>)
 8000628:	719a      	strb	r2, [r3, #6]
	UBX_ACK_ACK[7] = buffer[3];
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	78da      	ldrb	r2, [r3, #3]
 800062e:	4b48      	ldr	r3, [pc, #288]	; (8000750 <CONFIG_Transmit+0x140>)
 8000630:	71da      	strb	r2, [r3, #7]

	// set the checksum bytes of the expected ACK message
	uint16_t expectedCheckSum = UBX_M8N_CHECKSUM(UBX_ACK_ACK, 10);
 8000632:	210a      	movs	r1, #10
 8000634:	4846      	ldr	r0, [pc, #280]	; (8000750 <CONFIG_Transmit+0x140>)
 8000636:	f7ff ff25 	bl	8000484 <UBX_M8N_CHECKSUM>
 800063a:	4603      	mov	r3, r0
 800063c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	UBX_ACK_ACK[8] = (expectedCheckSum >> 8) & 0xFF;		// CK_A is the high byte
 8000640:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b29b      	uxth	r3, r3
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <CONFIG_Transmit+0x140>)
 800064c:	721a      	strb	r2, [r3, #8]
	UBX_ACK_ACK[9] = expectedCheckSum & 0xFF;				// CK_B is the low byte
 800064e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <CONFIG_Transmit+0x140>)
 8000656:	725a      	strb	r2, [r3, #9]
	
	// transmit desired CONFIG to GPS receiver
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, buffer, buflen, HAL_MAX_DELAY);
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	b29b      	uxth	r3, r3
 800065c:	f04f 32ff 	mov.w	r2, #4294967295
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	2184      	movs	r1, #132	; 0x84
 8000666:	483b      	ldr	r0, [pc, #236]	; (8000754 <CONFIG_Transmit+0x144>)
 8000668:	f001 f8a6 	bl	80017b8 <HAL_I2C_Master_Transmit>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	if (hal != HAL_OK) {
 8000672:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000676:	2b00      	cmp	r3, #0
 8000678:	d011      	beq.n	800069e <CONFIG_Transmit+0x8e>
		// something went wrong with transmit (exit)
		uint8_t test[] = "CONFIG transmit went wrong\r\n";
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <CONFIG_Transmit+0x148>)
 800067c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800068a:	c407      	stmia	r4!, {r0, r1, r2}
 800068c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 800068e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	221d      	movs	r2, #29
 8000698:	4830      	ldr	r0, [pc, #192]	; (800075c <CONFIG_Transmit+0x14c>)
 800069a:	f002 fd47 	bl	800312c <HAL_UART_Transmit>
	}

	// wait for a sec
	HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a2:	f000 fc6d 	bl	8000f80 <HAL_Delay>

	hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, ACK_BUFFER, sizeof(ACK_BUFFER)/sizeof(ACK_BUFFER[0]), HAL_MAX_DELAY);
 80006a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	230a      	movs	r3, #10
 80006b2:	2185      	movs	r1, #133	; 0x85
 80006b4:	4827      	ldr	r0, [pc, #156]	; (8000754 <CONFIG_Transmit+0x144>)
 80006b6:	f001 f97d 	bl	80019b4 <HAL_I2C_Master_Receive>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	if (hal != HAL_OK) {
 80006c0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d011      	beq.n	80006ec <CONFIG_Transmit+0xdc>
		// something went wrong with receive (exit)
		uint8_t test[] = "CONFIG receive went wrong\r\n";
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CONFIG_Transmit+0x150>)
 80006ca:	f107 0420 	add.w	r4, r7, #32
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 80006dc:	f107 0120 	add.w	r1, r7, #32
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	221c      	movs	r2, #28
 80006e6:	481d      	ldr	r0, [pc, #116]	; (800075c <CONFIG_Transmit+0x14c>)
 80006e8:	f002 fd20 	bl	800312c <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, ACK_BUFFER, sizeof(ACK_BUFFER)/sizeof(ACK_BUFFER[0]), HAL_MAX_DELAY);
 80006ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	220a      	movs	r2, #10
 80006f6:	481b      	ldr	r0, [pc, #108]	; (8000764 <CONFIG_Transmit+0x154>)
 80006f8:	f002 fd18 	bl	800312c <HAL_UART_Transmit>

	uint8_t test[] = "\n";
 80006fc:	230a      	movs	r3, #10
 80006fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000702:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	2202      	movs	r2, #2
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <CONFIG_Transmit+0x14c>)
 800070e:	f002 fd0d 	bl	800312c <HAL_UART_Transmit>

	if (ACK_BUFFER[2] != 0x05 && ACK_BUFFER[3] != 0x01) {
 8000712:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000716:	2b05      	cmp	r3, #5
 8000718:	d015      	beq.n	8000746 <CONFIG_Transmit+0x136>
 800071a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800071e:	2b01      	cmp	r3, #1
 8000720:	d011      	beq.n	8000746 <CONFIG_Transmit+0x136>
		uint8_t test[] = "config ACK went wrong\r\n";
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <CONFIG_Transmit+0x158>)
 8000724:	f107 0408 	add.w	r4, r7, #8
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000732:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000736:	f107 0108 	add.w	r1, r7, #8
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	2218      	movs	r2, #24
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <CONFIG_Transmit+0x14c>)
 8000742:	f002 fcf3 	bl	800312c <HAL_UART_Transmit>
	}
}
 8000746:	bf00      	nop
 8000748:	3770      	adds	r7, #112	; 0x70
 800074a:	46bd      	mov	sp, r7
 800074c:	bdb0      	pop	{r4, r5, r7, pc}
 800074e:	bf00      	nop
 8000750:	20000038 	.word	0x20000038
 8000754:	2000006c 	.word	0x2000006c
 8000758:	08003548 	.word	0x08003548
 800075c:	200000c0 	.word	0x200000c0
 8000760:	08003568 	.word	0x08003568
 8000764:	20000108 	.word	0x20000108
 8000768:	08003584 	.word	0x08003584

0800076c <GPS_Initialization>:

void GPS_Initialization(void) {
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0

	uint8_t test[] = "PRT CONFIG STARTS here\r\n";
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <GPS_Initialization+0xa8>)
 8000774:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000778:	461d      	mov	r5, r3
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000782:	c403      	stmia	r4!, {r0, r1}
 8000784:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000786:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	2219      	movs	r2, #25
 8000790:	4821      	ldr	r0, [pc, #132]	; (8000818 <GPS_Initialization+0xac>)
 8000792:	f002 fccb 	bl	800312c <HAL_UART_Transmit>
	CONFIG_Transmit(UBX_CFG_PRT, sizeof(UBX_CFG_PRT)/sizeof(UBX_CFG_PRT[0]));
 8000796:	211c      	movs	r1, #28
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <GPS_Initialization+0xb0>)
 800079a:	f7ff ff39 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(1000);
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	f000 fbed 	bl	8000f80 <HAL_Delay>

	uint8_t test2[] = "msg CONFIG STARTS here\r\n";
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <GPS_Initialization+0xb4>)
 80007a8:	f107 0420 	add.w	r4, r7, #32
 80007ac:	461d      	mov	r5, r3
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	c403      	stmia	r4!, {r0, r1}
 80007b8:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, test2, sizeof(test2), HAL_MAX_DELAY);
 80007ba:	f107 0120 	add.w	r1, r7, #32
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2219      	movs	r2, #25
 80007c4:	4814      	ldr	r0, [pc, #80]	; (8000818 <GPS_Initialization+0xac>)
 80007c6:	f002 fcb1 	bl	800312c <HAL_UART_Transmit>
	CONFIG_Transmit(UBX_CFG_MSG, sizeof(UBX_CFG_MSG)/sizeof(UBX_CFG_MSG[0]));
 80007ca:	210b      	movs	r1, #11
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <GPS_Initialization+0xb8>)
 80007ce:	f7ff ff1f 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f000 fbd3 	bl	8000f80 <HAL_Delay>

	uint8_t test3[] = "rate CONFIG STARTS here\r\n";
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <GPS_Initialization+0xbc>)
 80007dc:	1d3c      	adds	r4, r7, #4
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e8:	c403      	stmia	r4!, {r0, r1}
 80007ea:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, test3, sizeof(test3), HAL_MAX_DELAY);
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	221a      	movs	r2, #26
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <GPS_Initialization+0xac>)
 80007f6:	f002 fc99 	bl	800312c <HAL_UART_Transmit>
	CONFIG_Transmit(UBX_CFG_RATE, sizeof(UBX_CFG_RATE)/sizeof(UBX_CFG_RATE[0]));
 80007fa:	210e      	movs	r1, #14
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <GPS_Initialization+0xc0>)
 80007fe:	f7ff ff07 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 fbbb 	bl	8000f80 <HAL_Delay>
}
 800080a:	bf00      	nop
 800080c:	3758      	adds	r7, #88	; 0x58
 800080e:	46bd      	mov	sp, r7
 8000810:	bdb0      	pop	{r4, r5, r7, pc}
 8000812:	bf00      	nop
 8000814:	0800359c 	.word	0x0800359c
 8000818:	200000c0 	.word	0x200000c0
 800081c:	20000000 	.word	0x20000000
 8000820:	080035b8 	.word	0x080035b8
 8000824:	2000001c 	.word	0x2000001c
 8000828:	080035d4 	.word	0x080035d4
 800082c:	20000028 	.word	0x20000028

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b0ae      	sub	sp, #184	; 0xb8
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fb34 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f8bd 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f985 	bl	8000b4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000842:	f000 f901 	bl	8000a48 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000846:	f000 f957 	bl	8000af8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800084a:	f000 f92b 	bl	8000aa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup GPS receiver with desired configurations
  GPS_Initialization();
 800084e:	f7ff ff8d 	bl	800076c <GPS_Initialization>
  {
//	  if (GPS_FLAG == 1) {
//		  GPS_FLAG = 0;
		// set first element of buffer as the address of data stream register
		// If GPS_BUFFER == 0xFF, then it means that there is no data for the GPS to send
	GPS_BUFFER[0] = GPS_DATA_REGISTER;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

	// Transmit to GPS, let it know I want data
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);
 8000858:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2324      	movs	r3, #36	; 0x24
 8000864:	2184      	movs	r1, #132	; 0x84
 8000866:	484d      	ldr	r0, [pc, #308]	; (800099c <main+0x16c>)
 8000868:	f000 ffa6 	bl	80017b8 <HAL_I2C_Master_Transmit>
 800086c:	4603      	mov	r3, r0
 800086e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	if ( hal != HAL_OK ) {
 8000872:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000876:	2b00      	cmp	r3, #0
 8000878:	d014      	beq.n	80008a4 <main+0x74>
		uint8_t test[] = "data transmit went wrong\r\n";
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <main+0x170>)
 800087c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000880:	461d      	mov	r5, r3
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800088a:	c403      	stmia	r4!, {r0, r1}
 800088c:	8022      	strh	r2, [r4, #0]
 800088e:	3402      	adds	r4, #2
 8000890:	0c13      	lsrs	r3, r2, #16
 8000892:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000894:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	221b      	movs	r2, #27
 800089e:	4841      	ldr	r0, [pc, #260]	; (80009a4 <main+0x174>)
 80008a0:	f002 fc44 	bl	800312c <HAL_UART_Transmit>
	}

	// if HAL_OK then receive data
	// set bit zero on device address for read access
	hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);
 80008a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2324      	movs	r3, #36	; 0x24
 80008b0:	2185      	movs	r1, #133	; 0x85
 80008b2:	483a      	ldr	r0, [pc, #232]	; (800099c <main+0x16c>)
 80008b4:	f001 f87e 	bl	80019b4 <HAL_I2C_Master_Receive>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	if ( hal != HAL_OK ) {
 80008be:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d011      	beq.n	80008ea <main+0xba>
		uint8_t test[] = "data receive went wrong\r\n";
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <main+0x178>)
 80008c8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80008cc:	461d      	mov	r5, r3
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d6:	c403      	stmia	r4!, {r0, r1}
 80008d8:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 80008da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	221a      	movs	r2, #26
 80008e4:	482f      	ldr	r0, [pc, #188]	; (80009a4 <main+0x174>)
 80008e6:	f002 fc21 	bl	800312c <HAL_UART_Transmit>
	}

	// buffer[0] == 0xff when there is no data
	if (GPS_BUFFER[0] != 0xff) {
 80008ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80008ee:	2bff      	cmp	r3, #255	; 0xff
 80008f0:	d040      	beq.n	8000974 <main+0x144>

	  // call Checksum function to retrieve computed checksum of the buffer's payload
	  uint16_t computedChecksum = UBX_M8N_CHECKSUM(GPS_BUFFER, BUFFER_SIZE);
 80008f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008f6:	2124      	movs	r1, #36	; 0x24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fdc3 	bl	8000484 <UBX_M8N_CHECKSUM>
 80008fe:	4603      	mov	r3, r0
 8000900:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	  // expected checksum value is the last 2 bytes of the buffer
	  uint16_t expectedChecksum = (GPS_BUFFER[BUFFER_SIZE - 2]<<8) | GPS_BUFFER[BUFFER_SIZE - 1];
 8000904:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

	  // if computed checksum = expected checksum, then data is valid
	  if (computedChecksum == expectedChecksum) {
 800091a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800091e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000922:	429a      	cmp	r2, r3
 8000924:	d110      	bne.n	8000948 <main+0x118>
		UBX_M8N_NAV_POSLLH_Parsing(GPS_BUFFER, &data);					      // parses data
 8000926:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800092a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fdd4 	bl	80004de <UBX_M8N_NAV_POSLLH_Parsing>
		HAL_UART_Transmit(&huart2, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);    // transmit data to pc through UART (for testing)
 8000936:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	481a      	ldr	r0, [pc, #104]	; (80009ac <main+0x17c>)
 8000942:	f002 fbf3 	bl	800312c <HAL_UART_Transmit>
 8000946:	e023      	b.n	8000990 <main+0x160>
	  } else {
		// The data received from GPS is invalid
		// printf("The checksum is invalid!\r\n");
		uint8_t test[] = "The checksum is invalid!\r\n";
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <main+0x180>)
 800094a:	f107 0414 	add.w	r4, r7, #20
 800094e:	461d      	mov	r5, r3
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	c403      	stmia	r4!, {r0, r1}
 800095a:	8022      	strh	r2, [r4, #0]
 800095c:	3402      	adds	r4, #2
 800095e:	0c13      	lsrs	r3, r2, #16
 8000960:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000962:	f107 0114 	add.w	r1, r7, #20
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	221b      	movs	r2, #27
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <main+0x174>)
 800096e:	f002 fbdd 	bl	800312c <HAL_UART_Transmit>
 8000972:	e00d      	b.n	8000990 <main+0x160>
	  }
	} else {
	  // The GPS does not have data to send over
	  uint8_t test[] = "There is no data!\r\n";
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <main+0x184>)
 8000976:	463c      	mov	r4, r7
 8000978:	461d      	mov	r5, r3
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	6023      	str	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000982:	4639      	mov	r1, r7
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	2214      	movs	r2, #20
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <main+0x174>)
 800098c:	f002 fbce 	bl	800312c <HAL_UART_Transmit>
	}

	HAL_Delay(500);
 8000990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000994:	f000 faf4 	bl	8000f80 <HAL_Delay>
	GPS_BUFFER[0] = GPS_DATA_REGISTER;
 8000998:	e75b      	b.n	8000852 <main+0x22>
 800099a:	bf00      	nop
 800099c:	2000006c 	.word	0x2000006c
 80009a0:	080035f0 	.word	0x080035f0
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	0800360c 	.word	0x0800360c
 80009ac:	20000108 	.word	0x20000108
 80009b0:	08003628 	.word	0x08003628
 80009b4:	08003644 	.word	0x08003644

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b092      	sub	sp, #72	; 0x48
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fdaa 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <SystemClock_Config+0x8c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <SystemClock_Config+0x8c>)
 80009e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009ea:	2310      	movs	r3, #16
 80009ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fd8d 	bl	8002524 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a10:	f000 f900 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f8a9 	bl	8002b84 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a38:	f000 f8ec 	bl	8000c14 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3748      	adds	r7, #72	; 0x48
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_I2C1_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_I2C1_Init+0x58>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a86:	f000 fd53 	bl	8001530 <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 f8c0 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000006c 	.word	0x2000006c
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	000186a0 	.word	0x000186a0

08000aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART1_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000adc:	f002 fad6 	bl	800308c <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f895 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000c0 	.word	0x200000c0
 8000af4:	40013800 	.word	0x40013800

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART2_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f002 faac 	bl	800308c <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f86b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000108 	.word	0x20000108
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_GPIO_Init+0x94>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_GPIO_Init+0x98>)
 8000bc2:	f000 fb0d 	bl	80011e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2028      	movs	r0, #40	; 0x28
 8000bcc:	f000 fad1 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f000 faea 	bl	80011aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800

08000be8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf8:	d103      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x1a>
	  GPS_FLAG = 1;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_GPIO_EXTI_Callback+0x28>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 8000c02:	bf00      	nop
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000150 	.word	0x20000150

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_MspInit+0x58>)
 8000c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_MspInit+0x58>)
 8000c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c30:	6253      	str	r3, [r2, #36]	; 0x24
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_MspInit+0x58>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_MspInit+0x58>)
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_MspInit+0x58>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6213      	str	r3, [r2, #32]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x58>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x58>)
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_MspInit+0x58>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6253      	str	r3, [r2, #36]	; 0x24
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_MspInit+0x58>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_I2C_MspInit+0x7c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d128      	bne.n	8000cf0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_I2C_MspInit+0x84>)
 8000cd4:	f000 fa84 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce2:	6253      	str	r3, [r2, #36]	; 0x24
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_I2C_MspInit+0x80>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <HAL_UART_MspInit+0xd8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d129      	bne.n	8000d7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6213      	str	r3, [r2, #32]
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0xe0>)
 8000d74:	f000 fa34 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d78:	e02c      	b.n	8000dd4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0xe4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d127      	bne.n	8000dd4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	6253      	str	r3, [r2, #36]	; 0x24
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	61d3      	str	r3, [r2, #28]
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_UART_MspInit+0xdc>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db4:	230c      	movs	r3, #12
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0xe0>)
 8000dd0:	f000 fa06 	bl	80011e0 <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40004400 	.word	0x40004400

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f889 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e42:	f000 fb5d 	bl	8001500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff fff7 	bl	8000e4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e5e:	490c      	ldr	r1, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e74:	4c09      	ldr	r4, [pc, #36]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 fb29 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff fcd3 	bl	8000830 <main>
  bx lr
 8000e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000e94:	0800368c 	.word	0x0800368c
  ldr r2, =_sbss
 8000e98:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000e9c:	20000158 	.word	0x20000158

08000ea0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_IRQHandler>

08000ea2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f955 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f80e 	bl	8000ed4 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff feac 	bl	8000c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_InitTick+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d022      	beq.n	8000f2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_InitTick+0x6c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f962 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10f      	bne.n	8000f28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d809      	bhi.n	8000f22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f000 f92c 	bl	8001172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0x70>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e007      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e004      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000004c 	.word	0x2000004c
 8000f40:	20000044 	.word	0x20000044
 8000f44:	20000048 	.word	0x20000048

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000154 	.word	0x20000154
 8000f68:	2000004c 	.word	0x2000004c

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000154 	.word	0x20000154

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff0 	bl	8000f6c <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d004      	beq.n	8000fa4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_Delay+0x40>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa4:	bf00      	nop
 8000fa6:	f7ff ffe1 	bl	8000f6c <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d8f7      	bhi.n	8000fa6 <HAL_Delay+0x26>
  {
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000004c 	.word	0x2000004c

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4906      	ldr	r1, [pc, #24]	; (800105c <__NVIC_EnableIRQ+0x34>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff90 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff2d 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff42 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff35 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011f6:	e160      	b.n	80014ba <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8152 	beq.w	80014b4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80ac 	beq.w	80014b4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001374:	4a59      	ldr	r2, [pc, #356]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d025      	beq.n	80013ec <HAL_GPIO_Init+0x20c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x304>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01f      	beq.n	80013e8 <HAL_GPIO_Init+0x208>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x308>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d019      	beq.n	80013e4 <HAL_GPIO_Init+0x204>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x30c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_GPIO_Init+0x200>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x310>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00d      	beq.n	80013dc <HAL_GPIO_Init+0x1fc>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x314>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x1f8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x318>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_Init+0x1f4>
 80013d0:	2306      	movs	r3, #6
 80013d2:	e00c      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013d4:	2307      	movs	r3, #7
 80013d6:	e00a      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013d8:	2305      	movs	r3, #5
 80013da:	e008      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013dc:	2304      	movs	r3, #4
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013e0:	2303      	movs	r3, #3
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x20e>
 80013ec:	2300      	movs	r3, #0
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013fe:	4937      	ldr	r1, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_GPIO_Init+0x31c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001430:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x31c>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_GPIO_Init+0x31c>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145a:	4a28      	ldr	r2, [pc, #160]	; (80014fc <HAL_GPIO_Init+0x31c>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x31c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x31c>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_GPIO_Init+0x31c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_GPIO_Init+0x31c>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f ae97 	bne.w	80011f8 <HAL_GPIO_Init+0x18>
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40021400 	.word	0x40021400
 80014f8:	40021800 	.word	0x40021800
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb62 	bl	8000be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e12b      	b.n	800179a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fb90 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001594:	f001 fcf2 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8001598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4a81      	ldr	r2, [pc, #516]	; (80017a4 <HAL_I2C_Init+0x274>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d807      	bhi.n	80015b4 <HAL_I2C_Init+0x84>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a80      	ldr	r2, [pc, #512]	; (80017a8 <HAL_I2C_Init+0x278>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	bf94      	ite	ls
 80015ac:	2301      	movls	r3, #1
 80015ae:	2300      	movhi	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	e006      	b.n	80015c2 <HAL_I2C_Init+0x92>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4a7d      	ldr	r2, [pc, #500]	; (80017ac <HAL_I2C_Init+0x27c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	bf94      	ite	ls
 80015bc:	2301      	movls	r3, #1
 80015be:	2300      	movhi	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0e7      	b.n	800179a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a78      	ldr	r2, [pc, #480]	; (80017b0 <HAL_I2C_Init+0x280>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9b      	lsrs	r3, r3, #18
 80015d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <HAL_I2C_Init+0x274>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d802      	bhi.n	8001604 <HAL_I2C_Init+0xd4>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3301      	adds	r3, #1
 8001602:	e009      	b.n	8001618 <HAL_I2C_Init+0xe8>
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4a69      	ldr	r2, [pc, #420]	; (80017b4 <HAL_I2C_Init+0x284>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	3301      	adds	r3, #1
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800162a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	495c      	ldr	r1, [pc, #368]	; (80017a4 <HAL_I2C_Init+0x274>)
 8001634:	428b      	cmp	r3, r1
 8001636:	d819      	bhi.n	800166c <HAL_I2C_Init+0x13c>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1e59      	subs	r1, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fbb1 f3f3 	udiv	r3, r1, r3
 8001646:	1c59      	adds	r1, r3, #1
 8001648:	f640 73fc 	movw	r3, #4092	; 0xffc
 800164c:	400b      	ands	r3, r1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <HAL_I2C_Init+0x138>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e59      	subs	r1, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001660:	3301      	adds	r3, #1
 8001662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001666:	e051      	b.n	800170c <HAL_I2C_Init+0x1dc>
 8001668:	2304      	movs	r3, #4
 800166a:	e04f      	b.n	800170c <HAL_I2C_Init+0x1dc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_I2C_Init+0x168>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1e58      	subs	r0, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	e012      	b.n	80016be <HAL_I2C_Init+0x18e>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	0099      	lsls	r1, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_Init+0x196>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e022      	b.n	800170c <HAL_I2C_Init+0x1dc>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10e      	bne.n	80016ec <HAL_I2C_Init+0x1bc>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1e58      	subs	r0, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6859      	ldr	r1, [r3, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ea:	e00f      	b.n	800170c <HAL_I2C_Init+0x1dc>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	0099      	lsls	r1, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001702:	3301      	adds	r3, #1
 8001704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	6809      	ldr	r1, [r1, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800173a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6911      	ldr	r1, [r2, #16]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68d2      	ldr	r2, [r2, #12]
 8001746:	4311      	orrs	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	000186a0 	.word	0x000186a0
 80017a8:	001e847f 	.word	0x001e847f
 80017ac:	003d08ff 	.word	0x003d08ff
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	10624dd3 	.word	0x10624dd3

080017b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
 80017c8:	4613      	mov	r3, r2
 80017ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff fbce 	bl	8000f6c <HAL_GetTick>
 80017d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b20      	cmp	r3, #32
 80017dc:	f040 80e0 	bne.w	80019a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2319      	movs	r3, #25
 80017e6:	2201      	movs	r2, #1
 80017e8:	4970      	ldr	r1, [pc, #448]	; (80019ac <HAL_I2C_Master_Transmit+0x1f4>)
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fc64 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0d3      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_I2C_Master_Transmit+0x50>
 8001804:	2302      	movs	r3, #2
 8001806:	e0cc      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d007      	beq.n	800182e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2221      	movs	r2, #33	; 0x21
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2210      	movs	r2, #16
 800184a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	893a      	ldrh	r2, [r7, #8]
 800185e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001870:	8979      	ldrh	r1, [r7, #10]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	6a3a      	ldr	r2, [r7, #32]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 face 	bl	8001e18 <I2C_MasterRequestWrite>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e08d      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800189c:	e066      	b.n	800196c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	6a39      	ldr	r1, [r7, #32]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fd22 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d107      	bne.n	80018c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06b      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b04      	cmp	r3, #4
 8001906:	d11b      	bne.n	8001940 <HAL_I2C_Master_Transmit+0x188>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	6a39      	ldr	r1, [r7, #32]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fd19 	bl	800237c <I2C_WaitOnBTFFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00d      	beq.n	800196c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2b04      	cmp	r3, #4
 8001956:	d107      	bne.n	8001968 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001966:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e01a      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d194      	bne.n	800189e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	00100002 	.word	0x00100002
 80019b0:	ffff0000 	.word	0xffff0000

080019b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	817b      	strh	r3, [r7, #10]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fad0 	bl	8000f6c <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	f040 8217 	bne.w	8001e0a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2319      	movs	r3, #25
 80019e2:	2201      	movs	r2, #1
 80019e4:	497c      	ldr	r1, [pc, #496]	; (8001bd8 <HAL_I2C_Master_Receive+0x224>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fb66 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e20a      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_I2C_Master_Receive+0x50>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e203      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d007      	beq.n	8001a2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2222      	movs	r2, #34	; 0x22
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2210      	movs	r2, #16
 8001a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	893a      	ldrh	r2, [r7, #8]
 8001a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <HAL_I2C_Master_Receive+0x228>)
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa52 	bl	8001f1c <I2C_MasterRequestRead>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1c4      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d113      	bne.n	8001ab2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e198      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d11b      	bne.n	8001af2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e178      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d11b      	bne.n	8001b32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	e158      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b58:	e144      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	f200 80f1 	bhi.w	8001d46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d123      	bne.n	8001bb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fc4b 	bl	800240c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e145      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb2:	e117      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d14e      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4906      	ldr	r1, [pc, #24]	; (8001be0 <HAL_I2C_Master_Receive+0x22c>)
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa76 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e11a      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
 8001bd6:	bf00      	nop
 8001bd8:	00100002 	.word	0x00100002
 8001bdc:	ffff0000 	.word	0xffff0000
 8001be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c58:	e0c4      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	2200      	movs	r2, #0
 8001c62:	496c      	ldr	r1, [pc, #432]	; (8001e14 <HAL_I2C_Master_Receive+0x460>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fa27 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cb      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4955      	ldr	r1, [pc, #340]	; (8001e14 <HAL_I2C_Master_Receive+0x460>)
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f9f9 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e09d      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d44:	e04e      	b.n	8001de4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fb5e 	bl	800240c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e058      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d124      	bne.n	8001de4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d107      	bne.n	8001db2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f aeb6 	bne.w	8001b5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	00010004 	.word	0x00010004

08001e18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d006      	beq.n	8001e42 <I2C_MasterRequestWrite+0x2a>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d003      	beq.n	8001e42 <I2C_MasterRequestWrite+0x2a>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e40:	d108      	bne.n	8001e54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e00b      	b.n	8001e6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d107      	bne.n	8001e6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f91d 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d103      	bne.n	8001e9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e035      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea8:	d108      	bne.n	8001ebc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	e01b      	b.n	8001ef4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ebc:	897b      	ldrh	r3, [r7, #10]
 8001ebe:	11db      	asrs	r3, r3, #7
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 0306 	and.w	r3, r3, #6
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f063 030f 	orn	r3, r3, #15
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <I2C_MasterRequestWrite+0xfc>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f966 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e010      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eea:	897b      	ldrh	r3, [r7, #10]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <I2C_MasterRequestWrite+0x100>)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f956 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	00010008 	.word	0x00010008
 8001f18:	00010002 	.word	0x00010002

08001f1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestRead+0x3a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestRead+0x3a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f893 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e079      	b.n	80020a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e05f      	b.n	8002090 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4930      	ldr	r1, [pc, #192]	; (80020b0 <I2C_MasterRequestRead+0x194>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8dc 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e054      	b.n	80020a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4929      	ldr	r1, [pc, #164]	; (80020b4 <I2C_MasterRequestRead+0x198>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f8cc 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e044      	b.n	80020a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002042:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f831 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206a:	d103      	bne.n	8002074 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e017      	b.n	80020a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002078:	897b      	ldrh	r3, [r7, #10]
 800207a:	11db      	asrs	r3, r3, #7
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0306 	and.w	r3, r3, #6
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f063 030e 	orn	r3, r3, #14
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <I2C_MasterRequestRead+0x198>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f888 	bl	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00010008 	.word	0x00010008
 80020b4:	00010002 	.word	0x00010002

080020b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c8:	e048      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d044      	beq.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7fe ff4b 	bl	8000f6c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d139      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10d      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0x56>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	e00c      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0x70>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d116      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e023      	b.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10d      	bne.n	8002182 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	43da      	mvns	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	e00c      	b.n	800219c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d093      	beq.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ba:	e071      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d123      	bne.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e067      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d041      	beq.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7fe fea6 	bl	8000f6c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d136      	bne.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10c      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e00b      	b.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e021      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10c      	bne.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e00b      	b.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af6d 	bne.w	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f8:	e034      	b.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8e3 	bl	80024c6 <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e034      	b.n	8002374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d028      	beq.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe fe2b 	bl	8000f6c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11d      	bne.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	d016      	beq.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d1c3      	bne.n	80022fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002388:	e034      	b.n	80023f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f89b 	bl	80024c6 <I2C_IsAcknowledgeFailed>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e034      	b.n	8002404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d028      	beq.n	80023f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7fe fde3 	bl	8000f6c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11d      	bne.n	80023f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d016      	beq.n	80023f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e007      	b.n	8002404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d1c3      	bne.n	800238a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002418:	e049      	b.n	80024ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d119      	bne.n	800245c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0210 	mvn.w	r2, #16
 8002430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e030      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7fe fd86 	bl	8000f6c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11d      	bne.n	80024ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d016      	beq.n	80024ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d1ae      	bne.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d11b      	bne.n	8002516 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e31d      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b94      	ldr	r3, [pc, #592]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07b      	beq.n	800264e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d006      	beq.n	800256a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x5e>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d10b      	bne.n	8002582 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	4b87      	ldr	r3, [pc, #540]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d06a      	beq.n	800264c <HAL_RCC_OscConfig+0x128>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d166      	bne.n	800264c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e2f7      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x74>
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e02d      	b.n	80025f4 <HAL_RCC_OscConfig+0xd0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x96>
 80025a0:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a78      	ldr	r2, [pc, #480]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a75      	ldr	r2, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e01c      	b.n	80025f4 <HAL_RCC_OscConfig+0xd0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0xb8>
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a70      	ldr	r2, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0xd0>
 80025dc:	4b6a      	ldr	r3, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a69      	ldr	r2, [pc, #420]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a66      	ldr	r2, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80025ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fcb6 	bl	8000f6c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fcb2 	bl	8000f6c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e2ad      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0xe0>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fca2 	bl	8000f6c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fc9e 	bl	8000f6c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e299      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x108>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d05a      	beq.n	8002710 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d119      	bne.n	800269a <HAL_RCC_OscConfig+0x176>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x160>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e276      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	493d      	ldr	r1, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	e03a      	b.n	8002710 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a2:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x268>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc60 	bl	8000f6c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b0:	f7fe fc5c 	bl	8000f6c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e257      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	492a      	ldr	r1, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e015      	b.n	8002710 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0x268>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fc3f 	bl	8000f6c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7fe fc3b 	bl	8000f6c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e236      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80b8 	beq.w	800288e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d170      	bne.n	8002806 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x218>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e21a      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002748:	429a      	cmp	r2, r3
 800274a:	d921      	bls.n	8002790 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fc3b 	bl	8002fcc <RCC_SetFlashLatencyFromMSIRange>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e208      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4906      	ldr	r1, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	4901      	ldr	r1, [pc, #4]	; (8002788 <HAL_RCC_OscConfig+0x264>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e020      	b.n	80027ca <HAL_RCC_OscConfig+0x2a6>
 8002788:	40023800 	.word	0x40023800
 800278c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002790:	4b99      	ldr	r3, [pc, #612]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4996      	ldr	r1, [pc, #600]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a2:	4b95      	ldr	r3, [pc, #596]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	4991      	ldr	r1, [pc, #580]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fc06 	bl	8002fcc <RCC_SetFlashLatencyFromMSIRange>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1d3      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	0b5b      	lsrs	r3, r3, #13
 80027d0:	3301      	adds	r3, #1
 80027d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027da:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	0912      	lsrs	r2, r2, #4
 80027e0:	f002 020f 	and.w	r2, r2, #15
 80027e4:	4985      	ldr	r1, [pc, #532]	; (80029fc <HAL_RCC_OscConfig+0x4d8>)
 80027e6:	5c8a      	ldrb	r2, [r1, r2]
 80027e8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027ea:	4a85      	ldr	r2, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x4dc>)
 80027ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <HAL_RCC_OscConfig+0x4e0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb6e 	bl	8000ed4 <HAL_InitTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d045      	beq.n	800288e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	e1b5      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d029      	beq.n	8002862 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800280e:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <HAL_RCC_OscConfig+0x4e4>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fbaa 	bl	8000f6c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800281c:	f7fe fba6 	bl	8000f6c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1a1      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283a:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	496c      	ldr	r1, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4967      	ldr	r1, [pc, #412]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002862:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <HAL_RCC_OscConfig+0x4e4>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fb80 	bl	8000f6c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002870:	f7fe fb7c 	bl	8000f6c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e177      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d030      	beq.n	80028fc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fb60 	bl	8000f6c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fb5c 	bl	8000f6c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e157      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c2:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x38c>
 80028ce:	e015      	b.n	80028fc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d0:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <HAL_RCC_OscConfig+0x4e8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fb49 	bl	8000f6c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe fb45 	bl	8000f6c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e140      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80b5 	beq.w	8002a74 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6253      	str	r3, [r2, #36]	; 0x24
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x4ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x4ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x4ec>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe fb0d 	bl	8000f6c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe fb09 	bl	8000f6c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b64      	cmp	r3, #100	; 0x64
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e104      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x4ec>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x466>
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6353      	str	r3, [r2, #52]	; 0x34
 8002988:	e02d      	b.n	80029e6 <HAL_RCC_OscConfig+0x4c2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x488>
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	6353      	str	r3, [r2, #52]	; 0x34
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029a8:	6353      	str	r3, [r2, #52]	; 0x34
 80029aa:	e01c      	b.n	80029e6 <HAL_RCC_OscConfig+0x4c2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x4aa>
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029be:	6353      	str	r3, [r2, #52]	; 0x34
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6353      	str	r3, [r2, #52]	; 0x34
 80029cc:	e00b      	b.n	80029e6 <HAL_RCC_OscConfig+0x4c2>
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d8:	6353      	str	r3, [r2, #52]	; 0x34
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x4d4>)
 80029e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d024      	beq.n	8002a38 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fabd 	bl	8000f6c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f4:	e019      	b.n	8002a2a <HAL_RCC_OscConfig+0x506>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08003664 	.word	0x08003664
 8002a00:	20000044 	.word	0x20000044
 8002a04:	20000048 	.word	0x20000048
 8002a08:	42470020 	.word	0x42470020
 8002a0c:	42470680 	.word	0x42470680
 8002a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe faaa 	bl	8000f6c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0a3      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ee      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4f0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe fa98 	bl	8000f6c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fa94 	bl	8000f6c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e08d      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ee      	bne.n	8002a40 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	4a43      	ldr	r2, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d079      	beq.n	8002b70 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d056      	beq.n	8002b30 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d13b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_OscConfig+0x65c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fa6c 	bl	8000f6c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fa68 	bl	8000f6c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e063      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aaa:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4319      	orrs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	430b      	orrs	r3, r1
 8002ace:	492b      	ldr	r1, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_RCC_OscConfig+0x65c>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fa47 	bl	8000f6c <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fa43 	bl	8000f6c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e03e      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x5be>
 8002b00:	e036      	b.n	8002b70 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_RCC_OscConfig+0x65c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa30 	bl	8000f6c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fa2c 	bl	8000f6c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e027      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5ec>
 8002b2e:	e01f      	b.n	8002b70 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e01a      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_RCC_OscConfig+0x658>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	42470060 	.word	0x42470060

08002b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e11a      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d919      	bls.n	8002bda <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x34>
 8002bac:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0201 	bic.w	r2, r3, #1
 8002bc0:	4985      	ldr	r1, [pc, #532]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc8:	4b83      	ldr	r3, [pc, #524]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0f9      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	497a      	ldr	r1, [pc, #488]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 808e 	beq.w	8002d22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c0e:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d121      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0d7      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c26:	4b6d      	ldr	r3, [pc, #436]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d115      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0cb      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0bf      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0b7      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	495c      	ldr	r1, [pc, #368]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f97c 	bl	8000f6c <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d112      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7fe f974 	bl	8000f6c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e09b      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c96:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xfc>
 8002ca2:	e03e      	b.n	8002d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d112      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f7fe f95d 	bl	8000f6c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e084      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_ClockConfig+0x12a>
 8002cd0:	e027      	b.n	8002d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11d      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe f946 	bl	8000f6c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e06d      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d1ee      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x158>
 8002cfe:	e010      	b.n	8002d22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe f934 	bl	8000f6c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e05b      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ee      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d219      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x1be>
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	4923      	ldr	r1, [pc, #140]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_ClockConfig+0x254>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e034      	b.n	8002dce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4917      	ldr	r1, [pc, #92]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490f      	ldr	r1, [pc, #60]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f823 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_ClockConfig+0x258>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490b      	ldr	r1, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f886 	bl	8000ed4 <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08003664 	.word	0x08003664
 8002de4:	20000044 	.word	0x20000044
 8002de8:	20000048 	.word	0x20000048

08002dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b08e      	sub	sp, #56	; 0x38
 8002df2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002df4:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	f200 8092 	bhi.w	8002f2e <HAL_RCC_GetSysClockFreq+0x142>
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x28>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x2e>
 8002e12:	e08c      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x170>)
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e18:	e097      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e1e:	e094      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	4b4e      	ldr	r3, [pc, #312]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x178>)
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	0d9b      	lsrs	r3, r3, #22
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	3301      	adds	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d021      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002e50:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002e54:	464a      	mov	r2, r9
 8002e56:	fb03 f202 	mul.w	r2, r3, r2
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4644      	mov	r4, r8
 8002e5e:	fb04 f303 	mul.w	r3, r4, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	4a3e      	ldr	r2, [pc, #248]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x174>)
 8002e66:	4644      	mov	r4, r8
 8002e68:	fba4 0102 	umull	r0, r1, r4, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2200      	movs	r2, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	617a      	str	r2, [r7, #20]
 8002e78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e7c:	f7fd f97e 	bl	800017c <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
 8002e88:	e04e      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	469a      	mov	sl, r3
 8002e90:	4693      	mov	fp, r2
 8002e92:	4652      	mov	r2, sl
 8002e94:	465b      	mov	r3, fp
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	ebb2 080a 	subs.w	r8, r2, sl
 8002eae:	eb63 090b 	sbc.w	r9, r3, fp
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ebe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ec2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ec6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eca:	eb63 0509 	sbc.w	r5, r3, r9
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	00eb      	lsls	r3, r5, #3
 8002ed8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002edc:	00e2      	lsls	r2, r4, #3
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	eb14 030a 	adds.w	r3, r4, sl
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	eb45 030b 	adc.w	r3, r5, fp
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efa:	4629      	mov	r1, r5
 8002efc:	028b      	lsls	r3, r1, #10
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	4604      	mov	r4, r0
 8002f04:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f08:	4601      	mov	r1, r0
 8002f0a:	028a      	lsls	r2, r1, #10
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	2200      	movs	r2, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f1c:	f7fd f92e 	bl	800017c <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f2c:	e00d      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3738      	adds	r7, #56	; 0x38
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	016e3600 	.word	0x016e3600
 8002f64:	08003658 	.word	0x08003658

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000044 	.word	0x20000044

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f80:	f7ff fff2 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08003674 	.word	0x08003674

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	f7ff ffde 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08003674 	.word	0x08003674

08002fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12c      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e016      	b.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	6253      	str	r3, [r2, #36]	; 0x24
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800301c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003030:	d105      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003038:	d101      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800303a:	2301      	movs	r3, #1
 800303c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 0201 	bic.w	r2, r3, #1
 8003058:	490b      	ldr	r1, [pc, #44]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e042      	b.n	8003124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fe26 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f91d 	bl	8003310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	d16d      	bne.n	8003228 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Transmit+0x2c>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e066      	b.n	800322a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	; 0x21
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316a:	f7fd feff 	bl	8000f6c <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d108      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a0:	e02a      	b.n	80031f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f840 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e036      	b.n	800322a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3302      	adds	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e007      	b.n	80031ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1cf      	bne.n	80031a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f810 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b090      	sub	sp, #64	; 0x40
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003242:	e050      	b.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d04c      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x30>
 8003252:	f7fd fe8b 	bl	8000f6c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800325e:	429a      	cmp	r2, r3
 8003260:	d241      	bcs.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003282:	637a      	str	r2, [r7, #52]	; 0x34
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e5      	bne.n	8003262 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3314      	adds	r3, #20
 800329c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	613b      	str	r3, [r7, #16]
   return(result);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3314      	adds	r3, #20
 80032b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b6:	623a      	str	r2, [r7, #32]
 80032b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	69f9      	ldr	r1, [r7, #28]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d09f      	beq.n	8003244 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3740      	adds	r7, #64	; 0x40
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4313      	orrs	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003350:	f023 030c 	bic.w	r3, r3, #12
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	430b      	orrs	r3, r1
 800335c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a55      	ldr	r2, [pc, #340]	; (80034d0 <UART_SetConfig+0x1c0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d103      	bne.n	8003386 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800337e:	f7ff fe11 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	e002      	b.n	800338c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003386:	f7ff fdf9 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 800338a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d14c      	bne.n	8003430 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	0119      	lsls	r1, r3, #4
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033ce:	fba3 0302 	umull	r0, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2064      	movs	r0, #100	; 0x64
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	3332      	adds	r3, #50	; 0x32
 80033e0:	4a3c      	ldr	r2, [pc, #240]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ee:	4419      	add	r1, r3
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fbb2 f2f3 	udiv	r2, r2, r3
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003408:	fba3 0302 	umull	r0, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2064      	movs	r0, #100	; 0x64
 8003410:	fb00 f303 	mul.w	r3, r0, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <UART_SetConfig+0x1c4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	440a      	add	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342e:	e04a      	b.n	80034c6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009a      	lsls	r2, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	0119      	lsls	r1, r3, #4
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009a      	lsls	r2, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	fbb2 f2f3 	udiv	r2, r2, r3
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003468:	fba3 0302 	umull	r0, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2064      	movs	r0, #100	; 0x64
 8003470:	fb00 f303 	mul.w	r3, r0, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	3332      	adds	r3, #50	; 0x32
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <UART_SetConfig+0x1c4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003486:	4419      	add	r1, r3
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fbb2 f2f3 	udiv	r2, r2, r3
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <UART_SetConfig+0x1c4>)
 80034a0:	fba3 0302 	umull	r0, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2064      	movs	r0, #100	; 0x64
 80034a8:	fb00 f303 	mul.w	r3, r0, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <UART_SetConfig+0x1c4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	440a      	add	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40013800 	.word	0x40013800
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	2600      	movs	r6, #0
 80034dc:	4d0c      	ldr	r5, [pc, #48]	; (8003510 <__libc_init_array+0x38>)
 80034de:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	f000 f822 	bl	8003530 <_init>
 80034ec:	2600      	movs	r6, #0
 80034ee:	4d0a      	ldr	r5, [pc, #40]	; (8003518 <__libc_init_array+0x40>)
 80034f0:	4c0a      	ldr	r4, [pc, #40]	; (800351c <__libc_init_array+0x44>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003684 	.word	0x08003684
 8003514:	08003684 	.word	0x08003684
 8003518:	08003684 	.word	0x08003684
 800351c:	08003688 	.word	0x08003688

08003520 <memset>:
 8003520:	4603      	mov	r3, r0
 8003522:	4402      	add	r2, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
