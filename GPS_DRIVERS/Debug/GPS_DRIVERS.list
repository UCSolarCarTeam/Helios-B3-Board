
GPS_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005244  08005244  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800524c  0800524c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000098  080052ec  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080052ec  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b056  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a47  00000000  00000000  0002b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167f9  00000000  00000000  0002deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c81c  00000000  00000000  000446a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884c0  00000000  00000000  00050ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  000d93d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000098 	.word	0x20000098
 8000158:	00000000 	.word	0x00000000
 800015c:	08004fa4 	.word	0x08004fa4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000009c 	.word	0x2000009c
 8000178:	08004fa4 	.word	0x08004fa4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <UBX_M8N_CHECKSUM>:
 *	After calculating the checksum values CK_A and CK_B, return it as a 16 bit unsigned integer
 *  Where CK_A is the high byte, and CK_B is the low byte
 *
 *	Check documentation if you need more info, details in header file
 */
uint16_t UBX_M8N_CHECKSUM(uint8_t* buffer, uint8_t buflen) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]

	// These values will be used to compare with the buffer's
	uint8_t CK_A = 0, CK_B = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	2300      	movs	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	// loop to go through buffer payload
	// start at index 2 since first two bytes of buffer are not included in checksum calculation
	// do not include last 2 bytes of buffer since they are also not included in checksum calculation
	for (int i = 2; i < buflen - 2; i++) {
 8000498:	2302      	movs	r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	e00d      	b.n	80004ba <UBX_M8N_CHECKSUM+0x36>
		CK_A = CK_A + buffer[i];
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4413      	add	r3, r2
 80004aa:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 80004ac:	7bba      	ldrb	r2, [r7, #14]
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4413      	add	r3, r2
 80004b2:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < buflen - 2; i++) {
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	3b02      	subs	r3, #2
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbec      	blt.n	800049e <UBX_M8N_CHECKSUM+0x1a>
	// After calculating checksum, compare with checksum bytes from buffer
	// Return 1 if both are equal to buffer checksum, return 0 if not
	// return ((CK_A == buffer[buflen - 2]) && (CK_B == buffer[buflen - 1]));

	// return 2 byte checksum
	return ((CK_A<<8) | CK_B);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b21a      	sxth	r2, r3
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b21b      	sxth	r3, r3
 80004d2:	b29b      	uxth	r3, r3
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <UBX_M8N_NAV_POSLLH_Parsing>:

/* This function parses the payload from a NAV_POSLLH message
 * The payload is in little endian format, so left shift the bytes
 * Follow reference from driver and protocol description
 */
void UBX_M8N_NAV_POSLLH_Parsing(uint8_t *buffer, NavData* data) {
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
	data->iTOW = buffer[9]<<24 | buffer[8]<<16 | buffer[7]<<8 | buffer[6];
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3309      	adds	r3, #9
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	061a      	lsls	r2, r3, #24
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3308      	adds	r3, #8
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	041b      	lsls	r3, r3, #16
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3307      	adds	r3, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	4313      	orrs	r3, r2
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	3206      	adds	r2, #6
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	4313      	orrs	r3, r2
 800050c:	461a      	mov	r2, r3
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	601a      	str	r2, [r3, #0]
	data->lon = buffer[13]<<24 | buffer[12]<<16 | buffer[11]<<8 | buffer[10];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	330d      	adds	r3, #13
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	061a      	lsls	r2, r3, #24
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	330c      	adds	r3, #12
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	041b      	lsls	r3, r3, #16
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	330b      	adds	r3, #11
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	320a      	adds	r2, #10
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	605a      	str	r2, [r3, #4]
	data->lat = buffer[17]<<24 | buffer[16]<<16 | buffer[15]<<8 | buffer[14];
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3311      	adds	r3, #17
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	061a      	lsls	r2, r3, #24
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3310      	adds	r3, #16
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	330f      	adds	r3, #15
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	4313      	orrs	r3, r2
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	320e      	adds	r2, #14
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	609a      	str	r2, [r3, #8]
	data->height = buffer[21]<<24 | buffer[20]<<16 | buffer[19]<<8 | buffer[18];
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3315      	adds	r3, #21
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	061a      	lsls	r2, r3, #24
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3314      	adds	r3, #20
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3313      	adds	r3, #19
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4313      	orrs	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	3212      	adds	r2, #18
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	431a      	orrs	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	60da      	str	r2, [r3, #12]
	data->hMSL = buffer[25]<<24 | buffer[24]<<16 | buffer[23]<<8 | buffer[22];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3319      	adds	r3, #25
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	061a      	lsls	r2, r3, #24
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3318      	adds	r3, #24
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3317      	adds	r3, #23
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	3216      	adds	r2, #22
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	611a      	str	r2, [r3, #16]
	data->hAcc = buffer[29]<<24 | buffer[28]<<16 | buffer[27]<<8 | buffer[26];
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	331d      	adds	r3, #29
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	061a      	lsls	r2, r3, #24
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	331c      	adds	r3, #28
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	331b      	adds	r3, #27
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	321a      	adds	r2, #26
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	461a      	mov	r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	615a      	str	r2, [r3, #20]
	data->vAcc = buffer[33]<<24 | buffer[32]<<16 | buffer[31]<<8 | buffer[30];
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3321      	adds	r3, #33	; 0x21
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	061a      	lsls	r2, r3, #24
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3320      	adds	r3, #32
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	041b      	lsls	r3, r3, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	331f      	adds	r3, #31
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	321e      	adds	r2, #30
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4313      	orrs	r3, r2
 8000600:	461a      	mov	r2, r3
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	619a      	str	r2, [r3, #24]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <CONFIG_Transmit>:

/* This function sets a desired configuration in the GPS receiver
 * It takes in a pointer to the configuration message buffer, as well as its size
 * Calls Error_Handler() if something goes wrong
*/
void CONFIG_Transmit(uint8_t* buffer, uint16_t buflen) {
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	b092      	sub	sp, #72	; 0x48
 8000616:	af08      	add	r7, sp, #32
 8000618:	6178      	str	r0, [r7, #20]
 800061a:	460b      	mov	r3, r1
 800061c:	827b      	strh	r3, [r7, #18]
	HAL_StatusTypeDef hal;    				// HAL return status
	printf("Size of config: %d\r\n", buflen);
 800061e:	8a7b      	ldrh	r3, [r7, #18]
 8000620:	4619      	mov	r1, r3
 8000622:	4856      	ldr	r0, [pc, #344]	; (800077c <CONFIG_Transmit+0x16c>)
 8000624:	f003 fcb4 	bl	8003f90 <iprintf>

	for (int i = 0; i < 2; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
 800062c:	e09b      	b.n	8000766 <CONFIG_Transmit+0x156>
		// transmit desired CONFIG to GPS receiver
		hal = HAL_I2C_Mem_Write(&hi2c1, GPS_DEVICE_ADDRESS, GPS_DATA_LENGTH_HIGH, 1, &buffer[0], buflen, HAL_MAX_DELAY);
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	8a7b      	ldrh	r3, [r7, #18]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	22fd      	movs	r2, #253	; 0xfd
 8000640:	2184      	movs	r1, #132	; 0x84
 8000642:	484f      	ldr	r0, [pc, #316]	; (8000780 <CONFIG_Transmit+0x170>)
 8000644:	f001 fc74 	bl	8001f30 <HAL_I2C_Mem_Write>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (hal != HAL_OK) {
 800064e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <CONFIG_Transmit+0x4c>
			printf("CONFIG transmit went wrong\r\n");
 8000656:	484b      	ldr	r0, [pc, #300]	; (8000784 <CONFIG_Transmit+0x174>)
 8000658:	f003 fd20 	bl	800409c <puts>
		}
		// get the length of the CONFIG message response
		uint16_t message_length = UBX_GET_LENGTH();
 800065c:	f000 f89c 	bl	8000798 <UBX_GET_LENGTH>
 8000660:	4603      	mov	r3, r0
 8000662:	843b      	strh	r3, [r7, #32]
		printf("Message Length: %d\r\n", message_length);
 8000664:	8c3b      	ldrh	r3, [r7, #32]
 8000666:	4619      	mov	r1, r3
 8000668:	4847      	ldr	r0, [pc, #284]	; (8000788 <CONFIG_Transmit+0x178>)
 800066a:	f003 fc91 	bl	8003f90 <iprintf>

		if (message_length != 0) {
 800066e:	8c3b      	ldrh	r3, [r7, #32]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d075      	beq.n	8000760 <CONFIG_Transmit+0x150>
 8000674:	466b      	mov	r3, sp
 8000676:	469a      	mov	sl, r3
			// create a buffer of
			uint8_t config_response[message_length];
 8000678:	8c39      	ldrh	r1, [r7, #32]
 800067a:	460b      	mov	r3, r1
 800067c:	3b01      	subs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	b28b      	uxth	r3, r1
 8000682:	2200      	movs	r2, #0
 8000684:	461c      	mov	r4, r3
 8000686:	4615      	mov	r5, r2
 8000688:	f04f 0200 	mov.w	r2, #0
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	00eb      	lsls	r3, r5, #3
 8000692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000696:	00e2      	lsls	r2, r4, #3
 8000698:	b28b      	uxth	r3, r1
 800069a:	2200      	movs	r2, #0
 800069c:	4698      	mov	r8, r3
 800069e:	4691      	mov	r9, r2
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006b4:	460b      	mov	r3, r1
 80006b6:	3307      	adds	r3, #7
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	ebad 0d03 	sub.w	sp, sp, r3
 80006c0:	ab08      	add	r3, sp, #32
 80006c2:	3300      	adds	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
			config_response[0] = GPS_DATA_REGISTER;
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	701a      	strb	r2, [r3, #0]

			// Recieve the CONFIG response
			hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, config_response, message_length, HAL_MAX_DELAY);
 80006cc:	8c3b      	ldrh	r3, [r7, #32]
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	2185      	movs	r1, #133	; 0x85
 80006d8:	4829      	ldr	r0, [pc, #164]	; (8000780 <CONFIG_Transmit+0x170>)
 80006da:	f001 f9f7 	bl	8001acc <HAL_I2C_Master_Receive>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if (hal != HAL_OK) {
 80006e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d009      	beq.n	8000700 <CONFIG_Transmit+0xf0>
				printf("CONFIG response went wrong!\r\n");
 80006ec:	4827      	ldr	r0, [pc, #156]	; (800078c <CONFIG_Transmit+0x17c>)
 80006ee:	f003 fcd5 	bl	800409c <puts>
				printf("Error code: %08lX\r\n", hi2c1.ErrorCode);
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <CONFIG_Transmit+0x170>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4619      	mov	r1, r3
 80006f8:	4825      	ldr	r0, [pc, #148]	; (8000790 <CONFIG_Transmit+0x180>)
 80006fa:	f003 fc49 	bl	8003f90 <iprintf>
 80006fe:	e02e      	b.n	800075e <CONFIG_Transmit+0x14e>
			} else {
				printf("Length: %d | Headers: %X %X |Class: %X | ID: %X | rest: %X %X %X %X %X %X\r\n", message_length, config_response[0], config_response[1], config_response[2], config_response[3], config_response[4], config_response[5], config_response[6], config_response[7], config_response[8], config_response[9]);
 8000700:	8c39      	ldrh	r1, [r7, #32]
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	469c      	mov	ip, r3
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	469e      	mov	lr, r3
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	461e      	mov	r6, r3
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	4618      	mov	r0, r3
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	7a5b      	ldrb	r3, [r3, #9]
 800073c:	9307      	str	r3, [sp, #28]
 800073e:	9206      	str	r2, [sp, #24]
 8000740:	9005      	str	r0, [sp, #20]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	9204      	str	r2, [sp, #16]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	9203      	str	r2, [sp, #12]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	9202      	str	r2, [sp, #8]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	9600      	str	r6, [sp, #0]
 8000754:	4673      	mov	r3, lr
 8000756:	4662      	mov	r2, ip
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <CONFIG_Transmit+0x184>)
 800075a:	f003 fc19 	bl	8003f90 <iprintf>
 800075e:	46d5      	mov	sp, sl
	for (int i = 0; i < 2; i++) {
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	3301      	adds	r3, #1
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	2b01      	cmp	r3, #1
 800076a:	f77f af60 	ble.w	800062e <CONFIG_Transmit+0x1e>
				// see if response was a ACK message
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077a:	bf00      	nop
 800077c:	08004fbc 	.word	0x08004fbc
 8000780:	200000b4 	.word	0x200000b4
 8000784:	08004fd4 	.word	0x08004fd4
 8000788:	08004ff0 	.word	0x08004ff0
 800078c:	08005008 	.word	0x08005008
 8000790:	08005028 	.word	0x08005028
 8000794:	0800503c 	.word	0x0800503c

08000798 <UBX_GET_LENGTH>:

uint16_t UBX_GET_LENGTH() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af04      	add	r7, sp, #16
//	HAL_StatusTypeDef hal;
	// get the length of the messages
	uint8_t ubx_length[2];
	HAL_StatusTypeDef hal = HAL_I2C_Mem_Read(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, GPS_DATA_LENGTH_HIGH, 1, ubx_length, sizeof(ubx_length), 100);
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2302      	movs	r3, #2
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	22fd      	movs	r2, #253	; 0xfd
 80007ae:	2185      	movs	r1, #133	; 0x85
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <UBX_GET_LENGTH+0x54>)
 80007b2:	f001 fcb7 	bl	8002124 <HAL_I2C_Mem_Read>
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	if (hal != HAL_OK) {
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <UBX_GET_LENGTH+0x2e>
		printf("Read for length went wrong");
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <UBX_GET_LENGTH+0x58>)
 80007c2:	f003 fbe5 	bl	8003f90 <iprintf>
	}

	printf("High: %X | Low: %X\r\n",ubx_length[0], ubx_length[1]);
 80007c6:	793b      	ldrb	r3, [r7, #4]
 80007c8:	4619      	mov	r1, r3
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <UBX_GET_LENGTH+0x5c>)
 80007d0:	f003 fbde 	bl	8003f90 <iprintf>
	// return length as uint16_t
	return ((ubx_length[0] << 8) | (ubx_length[1]));
 80007d4:	793b      	ldrb	r3, [r7, #4]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	797b      	ldrb	r3, [r7, #5]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000b4 	.word	0x200000b4
 80007f0:	08005088 	.word	0x08005088
 80007f4:	080050a4 	.word	0x080050a4

080007f8 <GPS_Initialization>:

void GPS_Initialization(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef hal;
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, UBX_CFG_CFG, sizeof(UBX_CFG_CFG), HAL_MAX_DELAY);
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2315      	movs	r3, #21
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <GPS_Initialization+0x50>)
 8000808:	2184      	movs	r1, #132	; 0x84
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <GPS_Initialization+0x54>)
 800080c:	f001 f860 	bl	80018d0 <HAL_I2C_Master_Transmit>
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
	if (hal != HAL_OK) {
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <GPS_Initialization+0x28>
		// something went wrong with transmit (exit)
		printf("UBX-CFG-CFG went wrong!\r\n");
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <GPS_Initialization+0x58>)
 800081c:	f003 fc3e 	bl	800409c <puts>
//		uint8_t test[] = "CONFIG reset transmit went wrong\r\n";
//		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
	}
	HAL_Delay(2000);
 8000820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000824:	f000 fc38 	bl	8001098 <HAL_Delay>

	printf("Starting MSG\r\n");
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <GPS_Initialization+0x5c>)
 800082a:	f003 fc37 	bl	800409c <puts>
	CONFIG_Transmit(UBX_CFG_MSG, sizeof(UBX_CFG_MSG)/sizeof(UBX_CFG_MSG[0]));
 800082e:	2110      	movs	r1, #16
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <GPS_Initialization+0x60>)
 8000832:	f7ff feed 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(1000);
 8000836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083a:	f000 fc2d 	bl	8001098 <HAL_Delay>
////	uint8_t test3[] = "rate CONFIG STARTS here\r\n";
////	HAL_UART_Transmit(&huart1, test3, sizeof(test3), HAL_MAX_DELAY);
//	printf("Starting RATE\r\n");
//	CONFIG_Transmit(UBX_CFG_RATE, sizeof(UBX_CFG_RATE)/sizeof(UBX_CFG_RATE[0]));
//	HAL_Delay(1000);
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000010 	.word	0x20000010
 800084c:	200000b4 	.word	0x200000b4
 8000850:	080050bc 	.word	0x080050bc
 8000854:	080050d8 	.word	0x080050d8
 8000858:	20000000 	.word	0x20000000

0800085c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <__io_putchar+0x20>)
 800086e:	f003 f987 	bl	8003b80 <HAL_UART_Transmit>
  return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000108 	.word	0x20000108

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fb98 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f883 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 f94b 	bl	8000b28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000892:	f000 f8c7 	bl	8000a24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000896:	f000 f91d 	bl	8000ad4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800089a:	f000 f8f1 	bl	8000a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup GPS receiver with desired configurations
  printf("Starting configurations\r\n");
 800089e:	4835      	ldr	r0, [pc, #212]	; (8000974 <main+0xf4>)
 80008a0:	f003 fbfc 	bl	800409c <puts>
  GPS_Initialization();
 80008a4:	f7ff ffa8 	bl	80007f8 <GPS_Initialization>
  printf("Configurations complete\r\n");
 80008a8:	4833      	ldr	r0, [pc, #204]	; (8000978 <main+0xf8>)
 80008aa:	f003 fbf7 	bl	800409c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // set first element of buffer as the address of data stream register
	// If GPS_BUFFER == 0xFF, then it means that there is no data for the GPS to send
	GPS_BUFFER[0] = GPS_DATA_REGISTER;
 80008ae:	23ff      	movs	r3, #255	; 0xff
 80008b0:	773b      	strb	r3, [r7, #28]

	// Transmit to GPS, let it know I want data
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);
 80008b2:	f107 021c 	add.w	r2, r7, #28
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2324      	movs	r3, #36	; 0x24
 80008be:	2184      	movs	r1, #132	; 0x84
 80008c0:	482e      	ldr	r0, [pc, #184]	; (800097c <main+0xfc>)
 80008c2:	f001 f805 	bl	80018d0 <HAL_I2C_Master_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if ( hal != HAL_OK ) {
 80008cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <main+0x5a>
		printf("data transmit went wrong\r\n");
 80008d4:	482a      	ldr	r0, [pc, #168]	; (8000980 <main+0x100>)
 80008d6:	f003 fbe1 	bl	800409c <puts>
	}

	// if HAL_OK then receive data
	// set bit zero on device address for read access
	hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);
 80008da:	f107 021c 	add.w	r2, r7, #28
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2324      	movs	r3, #36	; 0x24
 80008e6:	2185      	movs	r1, #133	; 0x85
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <main+0xfc>)
 80008ea:	f001 f8ef 	bl	8001acc <HAL_I2C_Master_Receive>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if ( hal != HAL_OK ) {
 80008f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <main+0x82>
		printf("data receive went wrong\r\n");
 80008fc:	4821      	ldr	r0, [pc, #132]	; (8000984 <main+0x104>)
 80008fe:	f003 fbcd 	bl	800409c <puts>
	}

	// buffer[0] == 0xff when there is no data
	if (GPS_BUFFER[0] != 0xff) {
 8000902:	7f3b      	ldrb	r3, [r7, #28]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d02d      	beq.n	8000964 <main+0xe4>

	  // call Checksum function to retrieve computed checksum of the buffer's payload
	  uint16_t computedChecksum = UBX_M8N_CHECKSUM(GPS_BUFFER, BUFFER_SIZE);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2124      	movs	r1, #36	; 0x24
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fdb8 	bl	8000484 <UBX_M8N_CHECKSUM>
 8000914:	4603      	mov	r3, r0
 8000916:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	  // expected checksum value is the last 2 bytes of the buffer
	  uint16_t expectedChecksum = (GPS_BUFFER[BUFFER_SIZE - 2]<<8) | GPS_BUFFER[BUFFER_SIZE - 1];
 800091a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000926:	b21b      	sxth	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b21b      	sxth	r3, r3
 800092c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	  // if computed checksum = expected checksum, then data is valid
	  if (computedChecksum == expectedChecksum) {
 8000930:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000938:	429a      	cmp	r2, r3
 800093a:	d10f      	bne.n	800095c <main+0xdc>
		UBX_M8N_NAV_POSLLH_Parsing(GPS_BUFFER, &data);					      // parses data
 800093c:	463a      	mov	r2, r7
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fdca 	bl	80004de <UBX_M8N_NAV_POSLLH_Parsing>
		HAL_UART_Transmit(&huart2, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);    // transmit data to pc through UART (for testing)
 800094a:	f107 011c 	add.w	r1, r7, #28
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	2224      	movs	r2, #36	; 0x24
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <main+0x108>)
 8000956:	f003 f913 	bl	8003b80 <HAL_UART_Transmit>
 800095a:	e006      	b.n	800096a <main+0xea>
	  } else {
		// The data received from GPS is invalid
		printf("The checksum is invalid!\r\n");
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <main+0x10c>)
 800095e:	f003 fb9d 	bl	800409c <puts>
 8000962:	e002      	b.n	800096a <main+0xea>
		// uint8_t test[] = "The checksum is invalid!\r\n";
		// HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
	  }
	} else {
	  // The GPS does not have data to send over
	  printf("There is no data!\r\n");
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <main+0x110>)
 8000966:	f003 fb99 	bl	800409c <puts>
	}

	HAL_Delay(500);
 800096a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096e:	f000 fb93 	bl	8001098 <HAL_Delay>
	GPS_BUFFER[0] = GPS_DATA_REGISTER;
 8000972:	e79c      	b.n	80008ae <main+0x2e>
 8000974:	080050e8 	.word	0x080050e8
 8000978:	08005104 	.word	0x08005104
 800097c:	200000b4 	.word	0x200000b4
 8000980:	08005120 	.word	0x08005120
 8000984:	0800513c 	.word	0x0800513c
 8000988:	20000150 	.word	0x20000150
 800098c:	08005158 	.word	0x08005158
 8000990:	08005174 	.word	0x08005174

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b092      	sub	sp, #72	; 0x48
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 faec 	bl	8003f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <SystemClock_Config+0x8c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <SystemClock_Config+0x8c>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009c6:	2310      	movs	r3, #16
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fac9 	bl	8002f78 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f900 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fde5 	bl	80035d8 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a14:	f000 f8ec 	bl	8000bf0 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3748      	adds	r7, #72	; 0x48
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f000 fdf1 	bl	8001648 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 f8c0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000b4 	.word	0x200000b4
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART1_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f003 f812 	bl	8003ae0 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 f895 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART2_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f002 ffe8 	bl	8003ae0 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 f86b 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000150 	.word	0x20000150
 8000b24:	40004400 	.word	0x40004400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b9e:	f000 fbab 	bl	80012f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f000 fb6f 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bac:	2028      	movs	r0, #40	; 0x28
 8000bae:	f000 fb88 	bl	80012c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd4:	d103      	bne.n	8000bde <HAL_GPIO_EXTI_Callback+0x1a>
	  GPS_FLAG = 1;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_GPIO_EXTI_Callback+0x28>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 8000bde:	bf00      	nop
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000198 	.word	0x20000198

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_MspInit+0x58>)
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_MspInit+0x58>)
 8000c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_MspInit+0x58>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_MspInit+0x58>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_MspInit+0x58>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6213      	str	r3, [r2, #32]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x58>)
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x58>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_MspInit+0x58>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_MspInit+0x58>)
 8000c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_I2C_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d128      	bne.n	8000ccc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <HAL_I2C_MspInit+0x84>)
 8000cb0:	f000 fb22 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbe:	6253      	str	r3, [r2, #36]	; 0x24
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_I2C_MspInit+0x80>)
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <HAL_UART_MspInit+0xd8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d129      	bne.n	8000d56 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6213      	str	r3, [r2, #32]
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d44:	2307      	movs	r3, #7
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0xe0>)
 8000d50:	f000 fad2 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d54:	e02c      	b.n	8000db0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0xe4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d127      	bne.n	8000db0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	6253      	str	r3, [r2, #36]	; 0x24
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	61d3      	str	r3, [r2, #28]
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d90:	230c      	movs	r3, #12
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da0:	2307      	movs	r3, #7
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0xe0>)
 8000dac:	f000 faa4 	bl	80012f8 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f927 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e1e:	f000 fbfb 	bl	8001618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e00a      	b.n	8000e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e38:	f3af 8000 	nop.w
 8000e3c:	4601      	mov	r1, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	60ba      	str	r2, [r7, #8]
 8000e44:	b2ca      	uxtb	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dbf0      	blt.n	8000e38 <_read+0x12>
  }

  return len;
 8000e56:	687b      	ldr	r3, [r7, #4]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e009      	b.n	8000e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	60ba      	str	r2, [r7, #8]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fcee 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbf1      	blt.n	8000e72 <_write+0x12>
  }
  return len;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_close>:

int _close(int file)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <_isatty>:

int _isatty(int file)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f003 f800 	bl	8003f2c <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20014000 	.word	0x20014000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000019c 	.word	0x2000019c
 8000f60:	200001b8 	.word	0x200001b8

08000f64 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f70:	f7ff fff8 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f8c:	4c09      	ldr	r4, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 ffcd 	bl	8003f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fc6f 	bl	8000880 <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000fac:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 8000fb0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000fb4:	200001b4 	.word	0x200001b4

08000fb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_IRQHandler>

08000fba <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f955 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fe0e 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d022      	beq.n	8001046 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_InitTick+0x6c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_InitTick+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800100c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001010:	fbb2 f3f3 	udiv	r3, r2, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f962 	bl	80012de <HAL_SYSTICK_Config>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10f      	bne.n	8001040 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d809      	bhi.n	800103a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001026:	2200      	movs	r2, #0
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	f000 f92c 	bl	800128a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_InitTick+0x70>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e007      	b.n	800104a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e004      	b.n	800104a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e001      	b.n	800104a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000030 	.word	0x20000030
 8001058:	20000028 	.word	0x20000028
 800105c:	2000002c 	.word	0x2000002c

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4413      	add	r3, r2
 800106e:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x1c>)
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001a0 	.word	0x200001a0
 8001080:	20000030 	.word	0x20000030

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	200001a0 	.word	0x200001a0

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fff0 	bl	8001084 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d004      	beq.n	80010bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_Delay+0x40>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010bc:	bf00      	nop
 80010be:	f7ff ffe1 	bl	8001084 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d8f7      	bhi.n	80010be <HAL_Delay+0x26>
  {
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000030 	.word	0x20000030

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4906      	ldr	r1, [pc, #24]	; (8001174 <__NVIC_EnableIRQ+0x34>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff90 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff2d 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff42 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff35 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800130e:	e160      	b.n	80015d2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8152 	beq.w	80015cc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800133c:	2b02      	cmp	r3, #2
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001376:	2201      	movs	r2, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 0201 	and.w	r2, r3, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d017      	beq.n	80013de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d123      	bne.n	8001432 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0203 	and.w	r2, r3, #3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80ac 	beq.w	80015cc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800148c:	4a59      	ldr	r2, [pc, #356]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a51      	ldr	r2, [pc, #324]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d025      	beq.n	8001504 <HAL_GPIO_Init+0x20c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a50      	ldr	r2, [pc, #320]	; (80015fc <HAL_GPIO_Init+0x304>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01f      	beq.n	8001500 <HAL_GPIO_Init+0x208>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <HAL_GPIO_Init+0x308>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d019      	beq.n	80014fc <HAL_GPIO_Init+0x204>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_GPIO_Init+0x30c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d013      	beq.n	80014f8 <HAL_GPIO_Init+0x200>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x310>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00d      	beq.n	80014f4 <HAL_GPIO_Init+0x1fc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_GPIO_Init+0x314>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0x1f8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <HAL_GPIO_Init+0x318>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_GPIO_Init+0x1f4>
 80014e8:	2306      	movs	r3, #6
 80014ea:	e00c      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 80014ec:	2307      	movs	r3, #7
 80014ee:	e00a      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 80014f0:	2305      	movs	r3, #5
 80014f2:	e008      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x20e>
 8001504:	2300      	movs	r3, #0
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001516:	4937      	ldr	r1, [pc, #220]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001524:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_GPIO_Init+0x31c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001548:	4a32      	ldr	r2, [pc, #200]	; (8001614 <HAL_GPIO_Init+0x31c>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_GPIO_Init+0x31c>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x31c>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_GPIO_Init+0x31c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x31c>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x31c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_GPIO_Init+0x31c>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f ae97 	bne.w	8001310 <HAL_GPIO_Init+0x18>
  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fac4 	bl	8000bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e12b      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff faf2 	bl	8000c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ac:	f002 f990 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80016b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a81      	ldr	r2, [pc, #516]	; (80018bc <HAL_I2C_Init+0x274>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d807      	bhi.n	80016cc <HAL_I2C_Init+0x84>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a80      	ldr	r2, [pc, #512]	; (80018c0 <HAL_I2C_Init+0x278>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	e006      	b.n	80016da <HAL_I2C_Init+0x92>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	; (80018c4 <HAL_I2C_Init+0x27c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	bf94      	ite	ls
 80016d4:	2301      	movls	r3, #1
 80016d6:	2300      	movhi	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0e7      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a78      	ldr	r2, [pc, #480]	; (80018c8 <HAL_I2C_Init+0x280>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_I2C_Init+0x274>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d802      	bhi.n	800171c <HAL_I2C_Init+0xd4>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	e009      	b.n	8001730 <HAL_I2C_Init+0xe8>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_I2C_Init+0x284>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	3301      	adds	r3, #1
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	495c      	ldr	r1, [pc, #368]	; (80018bc <HAL_I2C_Init+0x274>)
 800174c:	428b      	cmp	r3, r1
 800174e:	d819      	bhi.n	8001784 <HAL_I2C_Init+0x13c>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e59      	subs	r1, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fbb1 f3f3 	udiv	r3, r1, r3
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001764:	400b      	ands	r3, r1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00a      	beq.n	8001780 <HAL_I2C_Init+0x138>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e59      	subs	r1, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fbb1 f3f3 	udiv	r3, r1, r3
 8001778:	3301      	adds	r3, #1
 800177a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177e:	e051      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001780:	2304      	movs	r3, #4
 8001782:	e04f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <HAL_I2C_Init+0x168>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e012      	b.n	80017d6 <HAL_I2C_Init+0x18e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Init+0x196>
 80017da:	2301      	movs	r3, #1
 80017dc:	e022      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10e      	bne.n	8001804 <HAL_I2C_Init+0x1bc>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e58      	subs	r0, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	e00f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6809      	ldr	r1, [r1, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6911      	ldr	r1, [r2, #16]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68d2      	ldr	r2, [r2, #12]
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	000186a0 	.word	0x000186a0
 80018c0:	001e847f 	.word	0x001e847f
 80018c4:	003d08ff 	.word	0x003d08ff
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
 80018e0:	4613      	mov	r3, r2
 80018e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fbce 	bl	8001084 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	f040 80e0 	bne.w	8001ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2319      	movs	r3, #25
 80018fe:	2201      	movs	r2, #1
 8001900:	4970      	ldr	r1, [pc, #448]	; (8001ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f001 f902 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
 8001910:	e0d3      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Master_Transmit+0x50>
 800191c:	2302      	movs	r3, #2
 800191e:	e0cc      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d007      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2221      	movs	r2, #33	; 0x21
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2210      	movs	r2, #16
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	893a      	ldrh	r2, [r7, #8]
 8001976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fdee 	bl	8002570 <I2C_MasterRequestWrite>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e08d      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019b4:	e066      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f001 f9c0 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d107      	bne.n	80019de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d11b      	bne.n	8001a58 <HAL_I2C_Master_Transmit+0x188>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d017      	beq.n	8001a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	6a39      	ldr	r1, [r7, #32]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f001 f9b7 	bl	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e01a      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d194      	bne.n	80019b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	00100002 	.word	0x00100002
 8001ac8:	ffff0000 	.word	0xffff0000

08001acc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	817b      	strh	r3, [r7, #10]
 8001adc:	4613      	mov	r3, r2
 8001ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff fad0 	bl	8001084 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	f040 8217 	bne.w	8001f22 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2319      	movs	r3, #25
 8001afa:	2201      	movs	r2, #1
 8001afc:	497c      	ldr	r1, [pc, #496]	; (8001cf0 <HAL_I2C_Master_Receive+0x224>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f001 f804 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e20a      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_I2C_Master_Receive+0x50>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e203      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d007      	beq.n	8001b42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2222      	movs	r2, #34	; 0x22
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	893a      	ldrh	r2, [r7, #8]
 8001b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <HAL_I2C_Master_Receive+0x228>)
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b84:	8979      	ldrh	r1, [r7, #10]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fd72 	bl	8002674 <I2C_MasterRequestRead>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e1c4      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d113      	bne.n	8001bca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	623b      	str	r3, [r7, #32]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e198      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d11b      	bne.n	8001c0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e178      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d11b      	bne.n	8001c4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	e158      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c70:	e144      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	f200 80f1 	bhi.w	8001e5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d123      	bne.n	8001ccc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f001 f8e9 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e145      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cca:	e117      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d14e      	bne.n	8001d72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <HAL_I2C_Master_Receive+0x22c>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 ff14 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e11a      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
 8001cee:	bf00      	nop
 8001cf0:	00100002 	.word	0x00100002
 8001cf4:	ffff0000 	.word	0xffff0000
 8001cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d70:	e0c4      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	2200      	movs	r2, #0
 8001d7a:	496c      	ldr	r1, [pc, #432]	; (8001f2c <HAL_I2C_Master_Receive+0x460>)
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fec5 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cb      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4955      	ldr	r1, [pc, #340]	; (8001f2c <HAL_I2C_Master_Receive+0x460>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fe97 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e09d      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e5c:	e04e      	b.n	8001efc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fffc 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e058      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d124      	bne.n	8001efc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d107      	bne.n	8001eca <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f aeb6 	bne.w	8001c72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	00010004 	.word	0x00010004

08001f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4a:	f7ff f89b 	bl	8001084 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	f040 80d9 	bne.w	8002110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2319      	movs	r3, #25
 8001f64:	2201      	movs	r2, #1
 8001f66:	496d      	ldr	r1, [pc, #436]	; (800211c <HAL_I2C_Mem_Write+0x1ec>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fdcf 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0cc      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_I2C_Mem_Write+0x56>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e0c5      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d007      	beq.n	8001fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2221      	movs	r2, #33	; 0x21
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a4d      	ldr	r2, [pc, #308]	; (8002120 <HAL_I2C_Mem_Write+0x1f0>)
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fee:	88f8      	ldrh	r0, [r7, #6]
 8001ff0:	893a      	ldrh	r2, [r7, #8]
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fc06 	bl	8002810 <I2C_RequestMemoryWrite>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d052      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e081      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fe94 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b04      	cmp	r3, #4
 8002024:	d107      	bne.n	8002036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11b      	bne.n	80020b0 <HAL_I2C_Mem_Write+0x180>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1aa      	bne.n	800200e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fe87 	bl	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d107      	bne.n	80020e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e016      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	00100002 	.word	0x00100002
 8002120:	ffff0000 	.word	0xffff0000

08002124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213e:	f7fe ffa1 	bl	8001084 <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b20      	cmp	r3, #32
 800214e:	f040 8208 	bne.w	8002562 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2319      	movs	r3, #25
 8002158:	2201      	movs	r2, #1
 800215a:	497b      	ldr	r1, [pc, #492]	; (8002348 <HAL_I2C_Mem_Read+0x224>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fcd5 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	e1fb      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Mem_Read+0x56>
 8002176:	2302      	movs	r3, #2
 8002178:	e1f4      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d007      	beq.n	80021a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2222      	movs	r2, #34	; 0x22
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a5b      	ldr	r2, [pc, #364]	; (800234c <HAL_I2C_Mem_Read+0x228>)
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e2:	88f8      	ldrh	r0, [r7, #6]
 80021e4:	893a      	ldrh	r2, [r7, #8]
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fba2 	bl	800293c <I2C_RequestMemoryRead>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1b0      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	623b      	str	r3, [r7, #32]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e184      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	2b01      	cmp	r3, #1
 8002238:	d11b      	bne.n	8002272 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e164      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b02      	cmp	r3, #2
 8002278:	d11b      	bne.n	80022b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	e144      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022c8:	e138      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	f200 80f1 	bhi.w	80024b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d123      	bne.n	8002324 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fdbd 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e139      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002322:	e10b      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	2b02      	cmp	r3, #2
 800232a:	d14e      	bne.n	80023ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	2200      	movs	r2, #0
 8002334:	4906      	ldr	r1, [pc, #24]	; (8002350 <HAL_I2C_Mem_Read+0x22c>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fbe8 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e10e      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
 8002346:	bf00      	nop
 8002348:	00100002 	.word	0x00100002
 800234c:	ffff0000 	.word	0xffff0000
 8002350:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c8:	e0b8      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2200      	movs	r2, #0
 80023d2:	4966      	ldr	r1, [pc, #408]	; (800256c <HAL_I2C_Mem_Read+0x448>)
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fb99 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0bf      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	2200      	movs	r2, #0
 800242e:	494f      	ldr	r1, [pc, #316]	; (800256c <HAL_I2C_Mem_Read+0x448>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb6b 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e091      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b4:	e042      	b.n	800253c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fcd0 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e04c      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d118      	bne.n	800253c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f aec2 	bne.w	80022ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3728      	adds	r7, #40	; 0x28
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00010004 	.word	0x00010004

08002570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d006      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d003      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002598:	d108      	bne.n	80025ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00b      	b.n	80025c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d107      	bne.n	80025c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fa9b 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ea:	d103      	bne.n	80025f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e035      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002600:	d108      	bne.n	8002614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e01b      	b.n	800264c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	11db      	asrs	r3, r3, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0306 	and.w	r3, r3, #6
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f063 030f 	orn	r3, r3, #15
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	490e      	ldr	r1, [pc, #56]	; (800266c <I2C_MasterRequestWrite+0xfc>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fae4 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e010      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <I2C_MasterRequestWrite+0x100>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fad4 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	00010008 	.word	0x00010008
 8002670:	00010002 	.word	0x00010002

08002674 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002698:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d006      	beq.n	80026ae <I2C_MasterRequestRead+0x3a>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d003      	beq.n	80026ae <I2C_MasterRequestRead+0x3a>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026ac:	d108      	bne.n	80026c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00b      	b.n	80026d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d107      	bne.n	80026d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa11 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fe:	d103      	bne.n	8002708 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e079      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002714:	d108      	bne.n	8002728 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e05f      	b.n	80027e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	11db      	asrs	r3, r3, #7
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0306 	and.w	r3, r3, #6
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 030f 	orn	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4930      	ldr	r1, [pc, #192]	; (8002808 <I2C_MasterRequestRead+0x194>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa5a 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e054      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <I2C_MasterRequestRead+0x198>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa4a 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e044      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f9af 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d103      	bne.n	80027cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e017      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027d0:	897b      	ldrh	r3, [r7, #10]
 80027d2:	11db      	asrs	r3, r3, #7
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f063 030e 	orn	r3, r3, #14
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <I2C_MasterRequestRead+0x198>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fa06 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	00010008 	.word	0x00010008
 800280c:	00010002 	.word	0x00010002

08002810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2200      	movs	r2, #0
 8002842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f960 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d103      	bne.n	800286a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e05f      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800287c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	492d      	ldr	r1, [pc, #180]	; (8002938 <I2C_RequestMemoryWrite+0x128>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f9bb 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04c      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa46 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e02b      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e021      	b.n	800292c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa20 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e005      	b.n	800292e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00010002 	.word	0x00010002

0800293c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4603      	mov	r3, r0
 800294c:	817b      	strh	r3, [r7, #10]
 800294e:	460b      	mov	r3, r1
 8002950:	813b      	strh	r3, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002964:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2200      	movs	r2, #0
 800297e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8c2 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299c:	d103      	bne.n	80029a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0aa      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029aa:	897b      	ldrh	r3, [r7, #10]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	4952      	ldr	r1, [pc, #328]	; (8002b08 <I2C_RequestMemoryRead+0x1cc>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f91d 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e097      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	6a39      	ldr	r1, [r7, #32]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f9a8 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d107      	bne.n	8002a0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e076      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]
 8002a22:	e021      	b.n	8002a68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6a39      	ldr	r1, [r7, #32]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f982 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e050      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5e:	893b      	ldrh	r3, [r7, #8]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	6a39      	ldr	r1, [r7, #32]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f967 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e035      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f82b 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aca:	d103      	bne.n	8002ad4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e013      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ad8:	897b      	ldrh	r3, [r7, #10]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	6a3a      	ldr	r2, [r7, #32]
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <I2C_RequestMemoryRead+0x1cc>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f886 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	00010002 	.word	0x00010002

08002b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1c:	e048      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d044      	beq.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe faad 	bl	8001084 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d139      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	e00c      	b.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d116      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e023      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	e00c      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d093      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0e:	e071      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1e:	d123      	bne.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e067      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d041      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fa08 	bl	8001084 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d136      	bne.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10c      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e021      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10c      	bne.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e00b      	b.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f af6d 	bne.w	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8e3 	bl	8002f1a <I2C_IsAcknowledgeFailed>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e034      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d028      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7fe f98d 	bl	8001084 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11d      	bne.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	d016      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d1c3      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f89b 	bl	8002f1a <I2C_IsAcknowledgeFailed>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d028      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe f945 	bl	8001084 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d1c3      	bne.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6c:	e049      	b.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d119      	bne.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0210 	mvn.w	r2, #16
 8002e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e030      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fe f8e8 	bl	8001084 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d016      	beq.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d1ae      	bne.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d11b      	bne.n	8002f6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e31d      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b94      	ldr	r3, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d07b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d006      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	4b87      	ldr	r3, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x128>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d166      	bne.n	80030a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e2f7      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x74>
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e02d      	b.n	8003048 <HAL_RCC_OscConfig+0xd0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x96>
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a78      	ldr	r2, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0xd0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0xb8>
 8003016:	4b71      	ldr	r3, [pc, #452]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a70      	ldr	r2, [pc, #448]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6d      	ldr	r2, [pc, #436]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0xd0>
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe f818 	bl	8001084 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe f814 	bl	8001084 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e2ad      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0xe0>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe f804 	bl	8001084 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe f800 	bl	8001084 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e299      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003092:	4b52      	ldr	r3, [pc, #328]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x108>
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d05a      	beq.n	8003164 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_OscConfig+0x176>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c0:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_OscConfig+0x160>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e276      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b40      	ldr	r3, [pc, #256]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	493d      	ldr	r1, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ec:	e03a      	b.n	8003164 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f6:	4b3a      	ldr	r3, [pc, #232]	; (80031e0 <HAL_RCC_OscConfig+0x268>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fd ffc2 	bl	8001084 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003104:	f7fd ffbe 	bl	8001084 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e257      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	492a      	ldr	r1, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
 8003136:	e015      	b.n	8003164 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_RCC_OscConfig+0x268>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fd ffa1 	bl	8001084 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fd ff9d 	bl	8001084 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e236      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80b8 	beq.w	80032e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d170      	bne.n	800325a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x218>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e21a      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800319c:	429a      	cmp	r2, r3
 800319e:	d921      	bls.n	80031e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fc3b 	bl	8003a20 <RCC_SetFlashLatencyFromMSIRange>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e208      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	4901      	ldr	r1, [pc, #4]	; (80031dc <HAL_RCC_OscConfig+0x264>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
 80031da:	e020      	b.n	800321e <HAL_RCC_OscConfig+0x2a6>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e4:	4b99      	ldr	r3, [pc, #612]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4996      	ldr	r1, [pc, #600]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f6:	4b95      	ldr	r3, [pc, #596]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	4991      	ldr	r1, [pc, #580]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc06 	bl	8003a20 <RCC_SetFlashLatencyFromMSIRange>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1d3      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	0b5b      	lsrs	r3, r3, #13
 8003224:	3301      	adds	r3, #1
 8003226:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800322e:	4a87      	ldr	r2, [pc, #540]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	0912      	lsrs	r2, r2, #4
 8003234:	f002 020f 	and.w	r2, r2, #15
 8003238:	4985      	ldr	r1, [pc, #532]	; (8003450 <HAL_RCC_OscConfig+0x4d8>)
 800323a:	5c8a      	ldrb	r2, [r1, r2]
 800323c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800323e:	4a85      	ldr	r2, [pc, #532]	; (8003454 <HAL_RCC_OscConfig+0x4dc>)
 8003240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003242:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_OscConfig+0x4e0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fed0 	bl	8000fec <HAL_InitTick>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d045      	beq.n	80032e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	e1b5      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d029      	beq.n	80032b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003262:	4b7e      	ldr	r3, [pc, #504]	; (800345c <HAL_RCC_OscConfig+0x4e4>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fd ff0c 	bl	8001084 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003270:	f7fd ff08 	bl	8001084 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1a1      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800328e:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	496c      	ldr	r1, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a0:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4967      	ldr	r1, [pc, #412]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b6:	4b69      	ldr	r3, [pc, #420]	; (800345c <HAL_RCC_OscConfig+0x4e4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fee2 	bl	8001084 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c4:	f7fd fede 	bl	8001084 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e177      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032d6:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d030      	beq.n	8003350 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b5a      	ldr	r3, [pc, #360]	; (8003460 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fd fec2 	bl	8001084 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003304:	f7fd febe 	bl	8001084 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e157      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x38c>
 8003322:	e015      	b.n	8003350 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b4e      	ldr	r3, [pc, #312]	; (8003460 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fd feab 	bl	8001084 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003332:	f7fd fea7 	bl	8001084 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e140      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80b5 	beq.w	80034c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	4a36      	ldr	r2, [pc, #216]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6253      	str	r3, [r2, #36]	; 0x24
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x4ec>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d118      	bne.n	80033c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x4ec>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a32      	ldr	r2, [pc, #200]	; (8003464 <HAL_RCC_OscConfig+0x4ec>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a2:	f7fd fe6f 	bl	8001084 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fd fe6b 	bl	8001084 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e104      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x4ec>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x466>
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6353      	str	r3, [r2, #52]	; 0x34
 80033dc:	e02d      	b.n	800343a <HAL_RCC_OscConfig+0x4c2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x488>
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f0:	6353      	str	r3, [r2, #52]	; 0x34
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fc:	6353      	str	r3, [r2, #52]	; 0x34
 80033fe:	e01c      	b.n	800343a <HAL_RCC_OscConfig+0x4c2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x4aa>
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 800340e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003412:	6353      	str	r3, [r2, #52]	; 0x34
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6353      	str	r3, [r2, #52]	; 0x34
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0x4c2>
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342c:	6353      	str	r3, [r2, #52]	; 0x34
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_RCC_OscConfig+0x4d4>)
 8003434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003438:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d024      	beq.n	800348c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fd fe1f 	bl	8001084 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003448:	e019      	b.n	800347e <HAL_RCC_OscConfig+0x506>
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	08005194 	.word	0x08005194
 8003454:	20000028 	.word	0x20000028
 8003458:	2000002c 	.word	0x2000002c
 800345c:	42470020 	.word	0x42470020
 8003460:	42470680 	.word	0x42470680
 8003464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fd fe0c 	bl	8001084 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0a3      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x4f0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fd fdfa 	bl	8001084 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fd fdf6 	bl	8001084 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e08d      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d079      	beq.n	80035c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d056      	beq.n	8003584 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d13b      	bne.n	8003556 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0x65c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fdce 	bl	8001084 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fdca 	bl	8001084 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e063      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	4319      	orrs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	430b      	orrs	r3, r1
 8003522:	492b      	ldr	r1, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0x65c>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd fda9 	bl	8001084 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fda5 	bl	8001084 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03e      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x5be>
 8003554:	e036      	b.n	80035c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HAL_RCC_OscConfig+0x65c>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fd92 	bl	8001084 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd fd8e 	bl	8001084 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e027      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x5ec>
 8003582:	e01f      	b.n	80035c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e01a      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCC_OscConfig+0x658>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	42470060 	.word	0x42470060

080035d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e11a      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b8f      	ldr	r3, [pc, #572]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d919      	bls.n	800362e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_ClockConfig+0x34>
 8003600:	4b8a      	ldr	r3, [pc, #552]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a89      	ldr	r2, [pc, #548]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b87      	ldr	r3, [pc, #540]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0201 	bic.w	r2, r3, #1
 8003614:	4985      	ldr	r1, [pc, #532]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361c:	4b83      	ldr	r3, [pc, #524]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0f9      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363a:	4b7d      	ldr	r3, [pc, #500]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	497a      	ldr	r1, [pc, #488]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 808e 	beq.w	8003776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003662:	4b73      	ldr	r3, [pc, #460]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d121      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0d7      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800367a:	4b6d      	ldr	r3, [pc, #436]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d115      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0cb      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0bf      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0b7      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	495c      	ldr	r1, [pc, #368]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fcde 	bl	8001084 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d112      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fd fcd6 	bl	8001084 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e09b      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xfc>
 80036f6:	e03e      	b.n	8003776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d112      	bne.n	8003726 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fd fcbf 	bl	8001084 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e084      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_ClockConfig+0x12a>
 8003724:	e027      	b.n	8003776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d11d      	bne.n	800376a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd fca8 	bl	8001084 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e06d      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_ClockConfig+0x158>
 8003752:	e010      	b.n	8003776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fd fc96 	bl	8001084 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e05b      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d219      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCC_ClockConfig+0x1be>
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a27      	ldr	r2, [pc, #156]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	4923      	ldr	r1, [pc, #140]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_RCC_ClockConfig+0x254>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e034      	b.n	8003822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4917      	ldr	r1, [pc, #92]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490f      	ldr	r1, [pc, #60]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037f6:	f000 f823 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_ClockConfig+0x258>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490b      	ldr	r1, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x25c>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x260>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x264>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fbe8 	bl	8000fec <HAL_InitTick>
 800381c:	4603      	mov	r3, r0
 800381e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003820:	7afb      	ldrb	r3, [r7, #11]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023c00 	.word	0x40023c00
 8003830:	40023800 	.word	0x40023800
 8003834:	08005194 	.word	0x08005194
 8003838:	20000028 	.word	0x20000028
 800383c:	2000002c 	.word	0x2000002c

08003840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b08e      	sub	sp, #56	; 0x38
 8003846:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003848:	4b58      	ldr	r3, [pc, #352]	; (80039ac <HAL_RCC_GetSysClockFreq+0x16c>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d00d      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x34>
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f200 8092 	bhi.w	8003982 <HAL_RCC_GetSysClockFreq+0x142>
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x28>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x2e>
 8003866:	e08c      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x170>)
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800386c:	e097      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003872:	e094      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4b4e      	ldr	r3, [pc, #312]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x178>)
 800387e:	5c9b      	ldrb	r3, [r3, r2]
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	0d9b      	lsrs	r3, r3, #22
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_GetSysClockFreq+0x16c>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d021      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	2200      	movs	r2, #0
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	61fa      	str	r2, [r7, #28]
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x174>)
 80038a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80038a8:	464a      	mov	r2, r9
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	2300      	movs	r3, #0
 80038b0:	4644      	mov	r4, r8
 80038b2:	fb04 f303 	mul.w	r3, r4, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	4a3e      	ldr	r2, [pc, #248]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x174>)
 80038ba:	4644      	mov	r4, r8
 80038bc:	fba4 0102 	umull	r0, r1, r4, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	4619      	mov	r1, r3
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	2200      	movs	r2, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	617a      	str	r2, [r7, #20]
 80038cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038d0:	f7fc fc54 	bl	800017c <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	e04e      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	469a      	mov	sl, r3
 80038e4:	4693      	mov	fp, r2
 80038e6:	4652      	mov	r2, sl
 80038e8:	465b      	mov	r3, fp
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003902:	eb63 090b 	sbc.w	r9, r3, fp
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003912:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003916:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800391a:	ebb2 0408 	subs.w	r4, r2, r8
 800391e:	eb63 0509 	sbc.w	r5, r3, r9
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	00eb      	lsls	r3, r5, #3
 800392c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003930:	00e2      	lsls	r2, r4, #3
 8003932:	4614      	mov	r4, r2
 8003934:	461d      	mov	r5, r3
 8003936:	eb14 030a 	adds.w	r3, r4, sl
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	eb45 030b 	adc.w	r3, r5, fp
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394e:	4629      	mov	r1, r5
 8003950:	028b      	lsls	r3, r1, #10
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	4604      	mov	r4, r0
 8003958:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800395c:	4601      	mov	r1, r0
 800395e:	028a      	lsls	r2, r1, #10
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2200      	movs	r2, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	60fa      	str	r2, [r7, #12]
 800396c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003970:	f7fc fc04 	bl	800017c <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003980:	e00d      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_GetSysClockFreq+0x16c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	3301      	adds	r3, #1
 8003992:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3738      	adds	r7, #56	; 0x38
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	016e3600 	.word	0x016e3600
 80039b8:	08005188 	.word	0x08005188

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <HAL_RCC_GetHCLKFreq+0x10>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	20000028 	.word	0x20000028

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff2 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	080051a4 	.word	0x080051a4

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffde 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0adb      	lsrs	r3, r3, #11
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	080051a4 	.word	0x080051a4

08003a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d12c      	bne.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e016      	b.n	8003a7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a50:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	6253      	str	r3, [r2, #36]	; 0x24
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a70:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a84:	d105      	bne.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a8c:	d101      	bne.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003a8e:	2301      	movs	r3, #1
 8003a90:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 0201 	bic.w	r2, r3, #1
 8003aac:	490b      	ldr	r1, [pc, #44]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	40023c00 	.word	0x40023c00

08003ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e042      	b.n	8003b78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd f8ea 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f91d 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d16d      	bne.n	8003c7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Transmit+0x2c>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e066      	b.n	8003c7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	; 0x21
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fa61 	bl	8001084 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d108      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bf4:	e02a      	b.n	8003c4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f840 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e036      	b.n	8003c7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3302      	adds	r3, #2
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e007      	b.n	8003c3e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1cf      	bne.n	8003bf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f810 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e006      	b.n	8003c7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b090      	sub	sp, #64	; 0x40
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	e050      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d04c      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca6:	f7fd f9ed 	bl	8001084 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d241      	bcs.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0a:	623a      	str	r2, [r7, #32]
 8003d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00f      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d09f      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3740      	adds	r7, #64	; 0x40
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003da4:	f023 030c 	bic.w	r3, r3, #12
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a55      	ldr	r2, [pc, #340]	; (8003f24 <UART_SetConfig+0x1c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d103      	bne.n	8003dda <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dd2:	f7ff fe11 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	e002      	b.n	8003de0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7ff fdf9 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8003dde:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	d14c      	bne.n	8003e84 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009a      	lsls	r2, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	4a49      	ldr	r2, [pc, #292]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	0119      	lsls	r1, r3, #4
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009a      	lsls	r2, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e22:	fba3 0302 	umull	r0, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2064      	movs	r0, #100	; 0x64
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e42:	4419      	add	r1, r3
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5a:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e5c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2064      	movs	r0, #100	; 0x64
 8003e64:	fb00 f303 	mul.w	r3, r0, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 0207 	and.w	r2, r3, #7
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	440a      	add	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e82:	e04a      	b.n	8003f1a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	4a23      	ldr	r2, [pc, #140]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	0119      	lsls	r1, r3, #4
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003ebc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	fb00 f303 	mul.w	r3, r0, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eda:	4419      	add	r1, r3
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009a      	lsls	r2, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003ef4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2064      	movs	r0, #100	; 0x64
 8003efc:	fb00 f303 	mul.w	r3, r0, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	3332      	adds	r3, #50	; 0x32
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <UART_SetConfig+0x1c4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	440a      	add	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40013800 	.word	0x40013800
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <__errno>:
 8003f2c:	4b01      	ldr	r3, [pc, #4]	; (8003f34 <__errno+0x8>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000034 	.word	0x20000034

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	4d0c      	ldr	r5, [pc, #48]	; (8003f70 <__libc_init_array+0x38>)
 8003f3e:	4c0d      	ldr	r4, [pc, #52]	; (8003f74 <__libc_init_array+0x3c>)
 8003f40:	1b64      	subs	r4, r4, r5
 8003f42:	10a4      	asrs	r4, r4, #2
 8003f44:	42a6      	cmp	r6, r4
 8003f46:	d109      	bne.n	8003f5c <__libc_init_array+0x24>
 8003f48:	f001 f82c 	bl	8004fa4 <_init>
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	4d0a      	ldr	r5, [pc, #40]	; (8003f78 <__libc_init_array+0x40>)
 8003f50:	4c0a      	ldr	r4, [pc, #40]	; (8003f7c <__libc_init_array+0x44>)
 8003f52:	1b64      	subs	r4, r4, r5
 8003f54:	10a4      	asrs	r4, r4, #2
 8003f56:	42a6      	cmp	r6, r4
 8003f58:	d105      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f60:	4798      	blx	r3
 8003f62:	3601      	adds	r6, #1
 8003f64:	e7ee      	b.n	8003f44 <__libc_init_array+0xc>
 8003f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6a:	4798      	blx	r3
 8003f6c:	3601      	adds	r6, #1
 8003f6e:	e7f2      	b.n	8003f56 <__libc_init_array+0x1e>
 8003f70:	0800524c 	.word	0x0800524c
 8003f74:	0800524c 	.word	0x0800524c
 8003f78:	0800524c 	.word	0x0800524c
 8003f7c:	08005250 	.word	0x08005250

08003f80 <memset>:
 8003f80:	4603      	mov	r3, r0
 8003f82:	4402      	add	r2, r0
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d100      	bne.n	8003f8a <memset+0xa>
 8003f88:	4770      	bx	lr
 8003f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8e:	e7f9      	b.n	8003f84 <memset+0x4>

08003f90 <iprintf>:
 8003f90:	b40f      	push	{r0, r1, r2, r3}
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <iprintf+0x2c>)
 8003f94:	b513      	push	{r0, r1, r4, lr}
 8003f96:	681c      	ldr	r4, [r3, #0]
 8003f98:	b124      	cbz	r4, 8003fa4 <iprintf+0x14>
 8003f9a:	69a3      	ldr	r3, [r4, #24]
 8003f9c:	b913      	cbnz	r3, 8003fa4 <iprintf+0x14>
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f000 fa5a 	bl	8004458 <__sinit>
 8003fa4:	ab05      	add	r3, sp, #20
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	9a04      	ldr	r2, [sp, #16]
 8003faa:	68a1      	ldr	r1, [r4, #8]
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	f000 fc5d 	bl	800486c <_vfiprintf_r>
 8003fb2:	b002      	add	sp, #8
 8003fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb8:	b004      	add	sp, #16
 8003fba:	4770      	bx	lr
 8003fbc:	20000034 	.word	0x20000034

08003fc0 <_puts_r>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	b118      	cbz	r0, 8003fd0 <_puts_r+0x10>
 8003fc8:	6983      	ldr	r3, [r0, #24]
 8003fca:	b90b      	cbnz	r3, 8003fd0 <_puts_r+0x10>
 8003fcc:	f000 fa44 	bl	8004458 <__sinit>
 8003fd0:	69ab      	ldr	r3, [r5, #24]
 8003fd2:	68ac      	ldr	r4, [r5, #8]
 8003fd4:	b913      	cbnz	r3, 8003fdc <_puts_r+0x1c>
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fa3e 	bl	8004458 <__sinit>
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <_puts_r+0xd0>)
 8003fde:	429c      	cmp	r4, r3
 8003fe0:	d120      	bne.n	8004024 <_puts_r+0x64>
 8003fe2:	686c      	ldr	r4, [r5, #4]
 8003fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fe6:	07db      	lsls	r3, r3, #31
 8003fe8:	d405      	bmi.n	8003ff6 <_puts_r+0x36>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0598      	lsls	r0, r3, #22
 8003fee:	d402      	bmi.n	8003ff6 <_puts_r+0x36>
 8003ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ff2:	f000 facf 	bl	8004594 <__retarget_lock_acquire_recursive>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	0719      	lsls	r1, r3, #28
 8003ffa:	d51d      	bpl.n	8004038 <_puts_r+0x78>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	b1db      	cbz	r3, 8004038 <_puts_r+0x78>
 8004000:	3e01      	subs	r6, #1
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004008:	3b01      	subs	r3, #1
 800400a:	60a3      	str	r3, [r4, #8]
 800400c:	bb39      	cbnz	r1, 800405e <_puts_r+0x9e>
 800400e:	2b00      	cmp	r3, #0
 8004010:	da38      	bge.n	8004084 <_puts_r+0xc4>
 8004012:	4622      	mov	r2, r4
 8004014:	210a      	movs	r1, #10
 8004016:	4628      	mov	r0, r5
 8004018:	f000 f848 	bl	80040ac <__swbuf_r>
 800401c:	3001      	adds	r0, #1
 800401e:	d011      	beq.n	8004044 <_puts_r+0x84>
 8004020:	250a      	movs	r5, #10
 8004022:	e011      	b.n	8004048 <_puts_r+0x88>
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <_puts_r+0xd4>)
 8004026:	429c      	cmp	r4, r3
 8004028:	d101      	bne.n	800402e <_puts_r+0x6e>
 800402a:	68ac      	ldr	r4, [r5, #8]
 800402c:	e7da      	b.n	8003fe4 <_puts_r+0x24>
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <_puts_r+0xd8>)
 8004030:	429c      	cmp	r4, r3
 8004032:	bf08      	it	eq
 8004034:	68ec      	ldreq	r4, [r5, #12]
 8004036:	e7d5      	b.n	8003fe4 <_puts_r+0x24>
 8004038:	4621      	mov	r1, r4
 800403a:	4628      	mov	r0, r5
 800403c:	f000 f888 	bl	8004150 <__swsetup_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0dd      	beq.n	8004000 <_puts_r+0x40>
 8004044:	f04f 35ff 	mov.w	r5, #4294967295
 8004048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800404a:	07da      	lsls	r2, r3, #31
 800404c:	d405      	bmi.n	800405a <_puts_r+0x9a>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	059b      	lsls	r3, r3, #22
 8004052:	d402      	bmi.n	800405a <_puts_r+0x9a>
 8004054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004056:	f000 fa9e 	bl	8004596 <__retarget_lock_release_recursive>
 800405a:	4628      	mov	r0, r5
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	2b00      	cmp	r3, #0
 8004060:	da04      	bge.n	800406c <_puts_r+0xac>
 8004062:	69a2      	ldr	r2, [r4, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	dc06      	bgt.n	8004076 <_puts_r+0xb6>
 8004068:	290a      	cmp	r1, #10
 800406a:	d004      	beq.n	8004076 <_puts_r+0xb6>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	7019      	strb	r1, [r3, #0]
 8004074:	e7c5      	b.n	8004002 <_puts_r+0x42>
 8004076:	4622      	mov	r2, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f817 	bl	80040ac <__swbuf_r>
 800407e:	3001      	adds	r0, #1
 8004080:	d1bf      	bne.n	8004002 <_puts_r+0x42>
 8004082:	e7df      	b.n	8004044 <_puts_r+0x84>
 8004084:	250a      	movs	r5, #10
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	6022      	str	r2, [r4, #0]
 800408c:	701d      	strb	r5, [r3, #0]
 800408e:	e7db      	b.n	8004048 <_puts_r+0x88>
 8004090:	080051d0 	.word	0x080051d0
 8004094:	080051f0 	.word	0x080051f0
 8004098:	080051b0 	.word	0x080051b0

0800409c <puts>:
 800409c:	4b02      	ldr	r3, [pc, #8]	; (80040a8 <puts+0xc>)
 800409e:	4601      	mov	r1, r0
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	f7ff bf8d 	b.w	8003fc0 <_puts_r>
 80040a6:	bf00      	nop
 80040a8:	20000034 	.word	0x20000034

080040ac <__swbuf_r>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	460e      	mov	r6, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	4605      	mov	r5, r0
 80040b4:	b118      	cbz	r0, 80040be <__swbuf_r+0x12>
 80040b6:	6983      	ldr	r3, [r0, #24]
 80040b8:	b90b      	cbnz	r3, 80040be <__swbuf_r+0x12>
 80040ba:	f000 f9cd 	bl	8004458 <__sinit>
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <__swbuf_r+0x98>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d12b      	bne.n	800411c <__swbuf_r+0x70>
 80040c4:	686c      	ldr	r4, [r5, #4]
 80040c6:	69a3      	ldr	r3, [r4, #24]
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	071a      	lsls	r2, r3, #28
 80040ce:	d52f      	bpl.n	8004130 <__swbuf_r+0x84>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	b36b      	cbz	r3, 8004130 <__swbuf_r+0x84>
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	b2f6      	uxtb	r6, r6
 80040da:	1ac0      	subs	r0, r0, r3
 80040dc:	6963      	ldr	r3, [r4, #20]
 80040de:	4637      	mov	r7, r6
 80040e0:	4283      	cmp	r3, r0
 80040e2:	dc04      	bgt.n	80040ee <__swbuf_r+0x42>
 80040e4:	4621      	mov	r1, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 f922 	bl	8004330 <_fflush_r>
 80040ec:	bb30      	cbnz	r0, 800413c <__swbuf_r+0x90>
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	3001      	adds	r0, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60a3      	str	r3, [r4, #8]
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	6022      	str	r2, [r4, #0]
 80040fc:	701e      	strb	r6, [r3, #0]
 80040fe:	6963      	ldr	r3, [r4, #20]
 8004100:	4283      	cmp	r3, r0
 8004102:	d004      	beq.n	800410e <__swbuf_r+0x62>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d506      	bpl.n	8004118 <__swbuf_r+0x6c>
 800410a:	2e0a      	cmp	r6, #10
 800410c:	d104      	bne.n	8004118 <__swbuf_r+0x6c>
 800410e:	4621      	mov	r1, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f000 f90d 	bl	8004330 <_fflush_r>
 8004116:	b988      	cbnz	r0, 800413c <__swbuf_r+0x90>
 8004118:	4638      	mov	r0, r7
 800411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <__swbuf_r+0x9c>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d101      	bne.n	8004126 <__swbuf_r+0x7a>
 8004122:	68ac      	ldr	r4, [r5, #8]
 8004124:	e7cf      	b.n	80040c6 <__swbuf_r+0x1a>
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <__swbuf_r+0xa0>)
 8004128:	429c      	cmp	r4, r3
 800412a:	bf08      	it	eq
 800412c:	68ec      	ldreq	r4, [r5, #12]
 800412e:	e7ca      	b.n	80040c6 <__swbuf_r+0x1a>
 8004130:	4621      	mov	r1, r4
 8004132:	4628      	mov	r0, r5
 8004134:	f000 f80c 	bl	8004150 <__swsetup_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	d0cb      	beq.n	80040d4 <__swbuf_r+0x28>
 800413c:	f04f 37ff 	mov.w	r7, #4294967295
 8004140:	e7ea      	b.n	8004118 <__swbuf_r+0x6c>
 8004142:	bf00      	nop
 8004144:	080051d0 	.word	0x080051d0
 8004148:	080051f0 	.word	0x080051f0
 800414c:	080051b0 	.word	0x080051b0

08004150 <__swsetup_r>:
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <__swsetup_r+0xcc>)
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	4606      	mov	r6, r0
 8004158:	460c      	mov	r4, r1
 800415a:	b125      	cbz	r5, 8004166 <__swsetup_r+0x16>
 800415c:	69ab      	ldr	r3, [r5, #24]
 800415e:	b913      	cbnz	r3, 8004166 <__swsetup_r+0x16>
 8004160:	4628      	mov	r0, r5
 8004162:	f000 f979 	bl	8004458 <__sinit>
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <__swsetup_r+0xd0>)
 8004168:	429c      	cmp	r4, r3
 800416a:	d10f      	bne.n	800418c <__swsetup_r+0x3c>
 800416c:	686c      	ldr	r4, [r5, #4]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004174:	0719      	lsls	r1, r3, #28
 8004176:	d42c      	bmi.n	80041d2 <__swsetup_r+0x82>
 8004178:	06dd      	lsls	r5, r3, #27
 800417a:	d411      	bmi.n	80041a0 <__swsetup_r+0x50>
 800417c:	2309      	movs	r3, #9
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	e03e      	b.n	800420a <__swsetup_r+0xba>
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <__swsetup_r+0xd4>)
 800418e:	429c      	cmp	r4, r3
 8004190:	d101      	bne.n	8004196 <__swsetup_r+0x46>
 8004192:	68ac      	ldr	r4, [r5, #8]
 8004194:	e7eb      	b.n	800416e <__swsetup_r+0x1e>
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <__swsetup_r+0xd8>)
 8004198:	429c      	cmp	r4, r3
 800419a:	bf08      	it	eq
 800419c:	68ec      	ldreq	r4, [r5, #12]
 800419e:	e7e6      	b.n	800416e <__swsetup_r+0x1e>
 80041a0:	0758      	lsls	r0, r3, #29
 80041a2:	d512      	bpl.n	80041ca <__swsetup_r+0x7a>
 80041a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a6:	b141      	cbz	r1, 80041ba <__swsetup_r+0x6a>
 80041a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ac:	4299      	cmp	r1, r3
 80041ae:	d002      	beq.n	80041b6 <__swsetup_r+0x66>
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 fa57 	bl	8004664 <_free_r>
 80041b6:	2300      	movs	r3, #0
 80041b8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041c0:	81a3      	strh	r3, [r4, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	6063      	str	r3, [r4, #4]
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f043 0308 	orr.w	r3, r3, #8
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	b94b      	cbnz	r3, 80041ea <__swsetup_r+0x9a>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e0:	d003      	beq.n	80041ea <__swsetup_r+0x9a>
 80041e2:	4621      	mov	r1, r4
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f9fd 	bl	80045e4 <__smakebuf_r>
 80041ea:	89a0      	ldrh	r0, [r4, #12]
 80041ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041f0:	f010 0301 	ands.w	r3, r0, #1
 80041f4:	d00a      	beq.n	800420c <__swsetup_r+0xbc>
 80041f6:	2300      	movs	r3, #0
 80041f8:	60a3      	str	r3, [r4, #8]
 80041fa:	6963      	ldr	r3, [r4, #20]
 80041fc:	425b      	negs	r3, r3
 80041fe:	61a3      	str	r3, [r4, #24]
 8004200:	6923      	ldr	r3, [r4, #16]
 8004202:	b943      	cbnz	r3, 8004216 <__swsetup_r+0xc6>
 8004204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004208:	d1ba      	bne.n	8004180 <__swsetup_r+0x30>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	0781      	lsls	r1, r0, #30
 800420e:	bf58      	it	pl
 8004210:	6963      	ldrpl	r3, [r4, #20]
 8004212:	60a3      	str	r3, [r4, #8]
 8004214:	e7f4      	b.n	8004200 <__swsetup_r+0xb0>
 8004216:	2000      	movs	r0, #0
 8004218:	e7f7      	b.n	800420a <__swsetup_r+0xba>
 800421a:	bf00      	nop
 800421c:	20000034 	.word	0x20000034
 8004220:	080051d0 	.word	0x080051d0
 8004224:	080051f0 	.word	0x080051f0
 8004228:	080051b0 	.word	0x080051b0

0800422c <__sflush_r>:
 800422c:	898a      	ldrh	r2, [r1, #12]
 800422e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004230:	4605      	mov	r5, r0
 8004232:	0710      	lsls	r0, r2, #28
 8004234:	460c      	mov	r4, r1
 8004236:	d457      	bmi.n	80042e8 <__sflush_r+0xbc>
 8004238:	684b      	ldr	r3, [r1, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	dc04      	bgt.n	8004248 <__sflush_r+0x1c>
 800423e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	dc01      	bgt.n	8004248 <__sflush_r+0x1c>
 8004244:	2000      	movs	r0, #0
 8004246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800424a:	2e00      	cmp	r6, #0
 800424c:	d0fa      	beq.n	8004244 <__sflush_r+0x18>
 800424e:	2300      	movs	r3, #0
 8004250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004254:	682f      	ldr	r7, [r5, #0]
 8004256:	602b      	str	r3, [r5, #0]
 8004258:	d032      	beq.n	80042c0 <__sflush_r+0x94>
 800425a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	075a      	lsls	r2, r3, #29
 8004260:	d505      	bpl.n	800426e <__sflush_r+0x42>
 8004262:	6863      	ldr	r3, [r4, #4]
 8004264:	1ac0      	subs	r0, r0, r3
 8004266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004268:	b10b      	cbz	r3, 800426e <__sflush_r+0x42>
 800426a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800426c:	1ac0      	subs	r0, r0, r3
 800426e:	2300      	movs	r3, #0
 8004270:	4602      	mov	r2, r0
 8004272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004274:	4628      	mov	r0, r5
 8004276:	6a21      	ldr	r1, [r4, #32]
 8004278:	47b0      	blx	r6
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	d106      	bne.n	800428e <__sflush_r+0x62>
 8004280:	6829      	ldr	r1, [r5, #0]
 8004282:	291d      	cmp	r1, #29
 8004284:	d82c      	bhi.n	80042e0 <__sflush_r+0xb4>
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <__sflush_r+0x100>)
 8004288:	40ca      	lsrs	r2, r1
 800428a:	07d6      	lsls	r6, r2, #31
 800428c:	d528      	bpl.n	80042e0 <__sflush_r+0xb4>
 800428e:	2200      	movs	r2, #0
 8004290:	6062      	str	r2, [r4, #4]
 8004292:	6922      	ldr	r2, [r4, #16]
 8004294:	04d9      	lsls	r1, r3, #19
 8004296:	6022      	str	r2, [r4, #0]
 8004298:	d504      	bpl.n	80042a4 <__sflush_r+0x78>
 800429a:	1c42      	adds	r2, r0, #1
 800429c:	d101      	bne.n	80042a2 <__sflush_r+0x76>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	b903      	cbnz	r3, 80042a4 <__sflush_r+0x78>
 80042a2:	6560      	str	r0, [r4, #84]	; 0x54
 80042a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a6:	602f      	str	r7, [r5, #0]
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d0cb      	beq.n	8004244 <__sflush_r+0x18>
 80042ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d002      	beq.n	80042ba <__sflush_r+0x8e>
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 f9d5 	bl	8004664 <_free_r>
 80042ba:	2000      	movs	r0, #0
 80042bc:	6360      	str	r0, [r4, #52]	; 0x34
 80042be:	e7c2      	b.n	8004246 <__sflush_r+0x1a>
 80042c0:	6a21      	ldr	r1, [r4, #32]
 80042c2:	2301      	movs	r3, #1
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b0      	blx	r6
 80042c8:	1c41      	adds	r1, r0, #1
 80042ca:	d1c7      	bne.n	800425c <__sflush_r+0x30>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0c4      	beq.n	800425c <__sflush_r+0x30>
 80042d2:	2b1d      	cmp	r3, #29
 80042d4:	d001      	beq.n	80042da <__sflush_r+0xae>
 80042d6:	2b16      	cmp	r3, #22
 80042d8:	d101      	bne.n	80042de <__sflush_r+0xb2>
 80042da:	602f      	str	r7, [r5, #0]
 80042dc:	e7b2      	b.n	8004244 <__sflush_r+0x18>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	e7ae      	b.n	8004246 <__sflush_r+0x1a>
 80042e8:	690f      	ldr	r7, [r1, #16]
 80042ea:	2f00      	cmp	r7, #0
 80042ec:	d0aa      	beq.n	8004244 <__sflush_r+0x18>
 80042ee:	0793      	lsls	r3, r2, #30
 80042f0:	bf18      	it	ne
 80042f2:	2300      	movne	r3, #0
 80042f4:	680e      	ldr	r6, [r1, #0]
 80042f6:	bf08      	it	eq
 80042f8:	694b      	ldreq	r3, [r1, #20]
 80042fa:	1bf6      	subs	r6, r6, r7
 80042fc:	600f      	str	r7, [r1, #0]
 80042fe:	608b      	str	r3, [r1, #8]
 8004300:	2e00      	cmp	r6, #0
 8004302:	dd9f      	ble.n	8004244 <__sflush_r+0x18>
 8004304:	4633      	mov	r3, r6
 8004306:	463a      	mov	r2, r7
 8004308:	4628      	mov	r0, r5
 800430a:	6a21      	ldr	r1, [r4, #32]
 800430c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004310:	47e0      	blx	ip
 8004312:	2800      	cmp	r0, #0
 8004314:	dc06      	bgt.n	8004324 <__sflush_r+0xf8>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	e790      	b.n	8004246 <__sflush_r+0x1a>
 8004324:	4407      	add	r7, r0
 8004326:	1a36      	subs	r6, r6, r0
 8004328:	e7ea      	b.n	8004300 <__sflush_r+0xd4>
 800432a:	bf00      	nop
 800432c:	20400001 	.word	0x20400001

08004330 <_fflush_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	690b      	ldr	r3, [r1, #16]
 8004334:	4605      	mov	r5, r0
 8004336:	460c      	mov	r4, r1
 8004338:	b913      	cbnz	r3, 8004340 <_fflush_r+0x10>
 800433a:	2500      	movs	r5, #0
 800433c:	4628      	mov	r0, r5
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	b118      	cbz	r0, 800434a <_fflush_r+0x1a>
 8004342:	6983      	ldr	r3, [r0, #24]
 8004344:	b90b      	cbnz	r3, 800434a <_fflush_r+0x1a>
 8004346:	f000 f887 	bl	8004458 <__sinit>
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <_fflush_r+0x6c>)
 800434c:	429c      	cmp	r4, r3
 800434e:	d11b      	bne.n	8004388 <_fflush_r+0x58>
 8004350:	686c      	ldr	r4, [r5, #4]
 8004352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ef      	beq.n	800433a <_fflush_r+0xa>
 800435a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800435c:	07d0      	lsls	r0, r2, #31
 800435e:	d404      	bmi.n	800436a <_fflush_r+0x3a>
 8004360:	0599      	lsls	r1, r3, #22
 8004362:	d402      	bmi.n	800436a <_fflush_r+0x3a>
 8004364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004366:	f000 f915 	bl	8004594 <__retarget_lock_acquire_recursive>
 800436a:	4628      	mov	r0, r5
 800436c:	4621      	mov	r1, r4
 800436e:	f7ff ff5d 	bl	800422c <__sflush_r>
 8004372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004374:	4605      	mov	r5, r0
 8004376:	07da      	lsls	r2, r3, #31
 8004378:	d4e0      	bmi.n	800433c <_fflush_r+0xc>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	059b      	lsls	r3, r3, #22
 800437e:	d4dd      	bmi.n	800433c <_fflush_r+0xc>
 8004380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004382:	f000 f908 	bl	8004596 <__retarget_lock_release_recursive>
 8004386:	e7d9      	b.n	800433c <_fflush_r+0xc>
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <_fflush_r+0x70>)
 800438a:	429c      	cmp	r4, r3
 800438c:	d101      	bne.n	8004392 <_fflush_r+0x62>
 800438e:	68ac      	ldr	r4, [r5, #8]
 8004390:	e7df      	b.n	8004352 <_fflush_r+0x22>
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <_fflush_r+0x74>)
 8004394:	429c      	cmp	r4, r3
 8004396:	bf08      	it	eq
 8004398:	68ec      	ldreq	r4, [r5, #12]
 800439a:	e7da      	b.n	8004352 <_fflush_r+0x22>
 800439c:	080051d0 	.word	0x080051d0
 80043a0:	080051f0 	.word	0x080051f0
 80043a4:	080051b0 	.word	0x080051b0

080043a8 <std>:
 80043a8:	2300      	movs	r3, #0
 80043aa:	b510      	push	{r4, lr}
 80043ac:	4604      	mov	r4, r0
 80043ae:	e9c0 3300 	strd	r3, r3, [r0]
 80043b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043b6:	6083      	str	r3, [r0, #8]
 80043b8:	8181      	strh	r1, [r0, #12]
 80043ba:	6643      	str	r3, [r0, #100]	; 0x64
 80043bc:	81c2      	strh	r2, [r0, #14]
 80043be:	6183      	str	r3, [r0, #24]
 80043c0:	4619      	mov	r1, r3
 80043c2:	2208      	movs	r2, #8
 80043c4:	305c      	adds	r0, #92	; 0x5c
 80043c6:	f7ff fddb 	bl	8003f80 <memset>
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <std+0x38>)
 80043cc:	6224      	str	r4, [r4, #32]
 80043ce:	6263      	str	r3, [r4, #36]	; 0x24
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <std+0x3c>)
 80043d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <std+0x40>)
 80043d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <std+0x44>)
 80043da:	6323      	str	r3, [r4, #48]	; 0x30
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	bf00      	nop
 80043e0:	08004e19 	.word	0x08004e19
 80043e4:	08004e3b 	.word	0x08004e3b
 80043e8:	08004e73 	.word	0x08004e73
 80043ec:	08004e97 	.word	0x08004e97

080043f0 <_cleanup_r>:
 80043f0:	4901      	ldr	r1, [pc, #4]	; (80043f8 <_cleanup_r+0x8>)
 80043f2:	f000 b8af 	b.w	8004554 <_fwalk_reent>
 80043f6:	bf00      	nop
 80043f8:	08004331 	.word	0x08004331

080043fc <__sfmoreglue>:
 80043fc:	2268      	movs	r2, #104	; 0x68
 80043fe:	b570      	push	{r4, r5, r6, lr}
 8004400:	1e4d      	subs	r5, r1, #1
 8004402:	4355      	muls	r5, r2
 8004404:	460e      	mov	r6, r1
 8004406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800440a:	f000 f993 	bl	8004734 <_malloc_r>
 800440e:	4604      	mov	r4, r0
 8004410:	b140      	cbz	r0, 8004424 <__sfmoreglue+0x28>
 8004412:	2100      	movs	r1, #0
 8004414:	e9c0 1600 	strd	r1, r6, [r0]
 8004418:	300c      	adds	r0, #12
 800441a:	60a0      	str	r0, [r4, #8]
 800441c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004420:	f7ff fdae 	bl	8003f80 <memset>
 8004424:	4620      	mov	r0, r4
 8004426:	bd70      	pop	{r4, r5, r6, pc}

08004428 <__sfp_lock_acquire>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sfp_lock_acquire+0x8>)
 800442a:	f000 b8b3 	b.w	8004594 <__retarget_lock_acquire_recursive>
 800442e:	bf00      	nop
 8004430:	200001a5 	.word	0x200001a5

08004434 <__sfp_lock_release>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__sfp_lock_release+0x8>)
 8004436:	f000 b8ae 	b.w	8004596 <__retarget_lock_release_recursive>
 800443a:	bf00      	nop
 800443c:	200001a5 	.word	0x200001a5

08004440 <__sinit_lock_acquire>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__sinit_lock_acquire+0x8>)
 8004442:	f000 b8a7 	b.w	8004594 <__retarget_lock_acquire_recursive>
 8004446:	bf00      	nop
 8004448:	200001a6 	.word	0x200001a6

0800444c <__sinit_lock_release>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__sinit_lock_release+0x8>)
 800444e:	f000 b8a2 	b.w	8004596 <__retarget_lock_release_recursive>
 8004452:	bf00      	nop
 8004454:	200001a6 	.word	0x200001a6

08004458 <__sinit>:
 8004458:	b510      	push	{r4, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	f7ff fff0 	bl	8004440 <__sinit_lock_acquire>
 8004460:	69a3      	ldr	r3, [r4, #24]
 8004462:	b11b      	cbz	r3, 800446c <__sinit+0x14>
 8004464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004468:	f7ff bff0 	b.w	800444c <__sinit_lock_release>
 800446c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004470:	6523      	str	r3, [r4, #80]	; 0x50
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <__sinit+0x68>)
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <__sinit+0x6c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	62a2      	str	r2, [r4, #40]	; 0x28
 800447a:	42a3      	cmp	r3, r4
 800447c:	bf08      	it	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	4620      	mov	r0, r4
 8004482:	bf08      	it	eq
 8004484:	61a3      	streq	r3, [r4, #24]
 8004486:	f000 f81f 	bl	80044c8 <__sfp>
 800448a:	6060      	str	r0, [r4, #4]
 800448c:	4620      	mov	r0, r4
 800448e:	f000 f81b 	bl	80044c8 <__sfp>
 8004492:	60a0      	str	r0, [r4, #8]
 8004494:	4620      	mov	r0, r4
 8004496:	f000 f817 	bl	80044c8 <__sfp>
 800449a:	2200      	movs	r2, #0
 800449c:	2104      	movs	r1, #4
 800449e:	60e0      	str	r0, [r4, #12]
 80044a0:	6860      	ldr	r0, [r4, #4]
 80044a2:	f7ff ff81 	bl	80043a8 <std>
 80044a6:	2201      	movs	r2, #1
 80044a8:	2109      	movs	r1, #9
 80044aa:	68a0      	ldr	r0, [r4, #8]
 80044ac:	f7ff ff7c 	bl	80043a8 <std>
 80044b0:	2202      	movs	r2, #2
 80044b2:	2112      	movs	r1, #18
 80044b4:	68e0      	ldr	r0, [r4, #12]
 80044b6:	f7ff ff77 	bl	80043a8 <std>
 80044ba:	2301      	movs	r3, #1
 80044bc:	61a3      	str	r3, [r4, #24]
 80044be:	e7d1      	b.n	8004464 <__sinit+0xc>
 80044c0:	080051ac 	.word	0x080051ac
 80044c4:	080043f1 	.word	0x080043f1

080044c8 <__sfp>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	4607      	mov	r7, r0
 80044cc:	f7ff ffac 	bl	8004428 <__sfp_lock_acquire>
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <__sfp+0x84>)
 80044d2:	681e      	ldr	r6, [r3, #0]
 80044d4:	69b3      	ldr	r3, [r6, #24]
 80044d6:	b913      	cbnz	r3, 80044de <__sfp+0x16>
 80044d8:	4630      	mov	r0, r6
 80044da:	f7ff ffbd 	bl	8004458 <__sinit>
 80044de:	3648      	adds	r6, #72	; 0x48
 80044e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	d503      	bpl.n	80044f0 <__sfp+0x28>
 80044e8:	6833      	ldr	r3, [r6, #0]
 80044ea:	b30b      	cbz	r3, 8004530 <__sfp+0x68>
 80044ec:	6836      	ldr	r6, [r6, #0]
 80044ee:	e7f7      	b.n	80044e0 <__sfp+0x18>
 80044f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044f4:	b9d5      	cbnz	r5, 800452c <__sfp+0x64>
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <__sfp+0x88>)
 80044f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044fc:	60e3      	str	r3, [r4, #12]
 80044fe:	6665      	str	r5, [r4, #100]	; 0x64
 8004500:	f000 f847 	bl	8004592 <__retarget_lock_init_recursive>
 8004504:	f7ff ff96 	bl	8004434 <__sfp_lock_release>
 8004508:	2208      	movs	r2, #8
 800450a:	4629      	mov	r1, r5
 800450c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004514:	6025      	str	r5, [r4, #0]
 8004516:	61a5      	str	r5, [r4, #24]
 8004518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800451c:	f7ff fd30 	bl	8003f80 <memset>
 8004520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004528:	4620      	mov	r0, r4
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452c:	3468      	adds	r4, #104	; 0x68
 800452e:	e7d9      	b.n	80044e4 <__sfp+0x1c>
 8004530:	2104      	movs	r1, #4
 8004532:	4638      	mov	r0, r7
 8004534:	f7ff ff62 	bl	80043fc <__sfmoreglue>
 8004538:	4604      	mov	r4, r0
 800453a:	6030      	str	r0, [r6, #0]
 800453c:	2800      	cmp	r0, #0
 800453e:	d1d5      	bne.n	80044ec <__sfp+0x24>
 8004540:	f7ff ff78 	bl	8004434 <__sfp_lock_release>
 8004544:	230c      	movs	r3, #12
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	e7ee      	b.n	8004528 <__sfp+0x60>
 800454a:	bf00      	nop
 800454c:	080051ac 	.word	0x080051ac
 8004550:	ffff0001 	.word	0xffff0001

08004554 <_fwalk_reent>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	4606      	mov	r6, r0
 800455a:	4688      	mov	r8, r1
 800455c:	2700      	movs	r7, #0
 800455e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004566:	f1b9 0901 	subs.w	r9, r9, #1
 800456a:	d505      	bpl.n	8004578 <_fwalk_reent+0x24>
 800456c:	6824      	ldr	r4, [r4, #0]
 800456e:	2c00      	cmp	r4, #0
 8004570:	d1f7      	bne.n	8004562 <_fwalk_reent+0xe>
 8004572:	4638      	mov	r0, r7
 8004574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004578:	89ab      	ldrh	r3, [r5, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d907      	bls.n	800458e <_fwalk_reent+0x3a>
 800457e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004582:	3301      	adds	r3, #1
 8004584:	d003      	beq.n	800458e <_fwalk_reent+0x3a>
 8004586:	4629      	mov	r1, r5
 8004588:	4630      	mov	r0, r6
 800458a:	47c0      	blx	r8
 800458c:	4307      	orrs	r7, r0
 800458e:	3568      	adds	r5, #104	; 0x68
 8004590:	e7e9      	b.n	8004566 <_fwalk_reent+0x12>

08004592 <__retarget_lock_init_recursive>:
 8004592:	4770      	bx	lr

08004594 <__retarget_lock_acquire_recursive>:
 8004594:	4770      	bx	lr

08004596 <__retarget_lock_release_recursive>:
 8004596:	4770      	bx	lr

08004598 <__swhatbuf_r>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	460e      	mov	r6, r1
 800459c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a0:	4614      	mov	r4, r2
 80045a2:	2900      	cmp	r1, #0
 80045a4:	461d      	mov	r5, r3
 80045a6:	b096      	sub	sp, #88	; 0x58
 80045a8:	da08      	bge.n	80045bc <__swhatbuf_r+0x24>
 80045aa:	2200      	movs	r2, #0
 80045ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	061a      	lsls	r2, r3, #24
 80045b4:	d410      	bmi.n	80045d8 <__swhatbuf_r+0x40>
 80045b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ba:	e00e      	b.n	80045da <__swhatbuf_r+0x42>
 80045bc:	466a      	mov	r2, sp
 80045be:	f000 fc91 	bl	8004ee4 <_fstat_r>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	dbf1      	blt.n	80045aa <__swhatbuf_r+0x12>
 80045c6:	9a01      	ldr	r2, [sp, #4]
 80045c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045d0:	425a      	negs	r2, r3
 80045d2:	415a      	adcs	r2, r3
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	e7ee      	b.n	80045b6 <__swhatbuf_r+0x1e>
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	2000      	movs	r0, #0
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	b016      	add	sp, #88	; 0x58
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080045e4 <__smakebuf_r>:
 80045e4:	898b      	ldrh	r3, [r1, #12]
 80045e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045e8:	079d      	lsls	r5, r3, #30
 80045ea:	4606      	mov	r6, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	d507      	bpl.n	8004600 <__smakebuf_r+0x1c>
 80045f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2301      	movs	r3, #1
 80045fa:	6163      	str	r3, [r4, #20]
 80045fc:	b002      	add	sp, #8
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	466a      	mov	r2, sp
 8004602:	ab01      	add	r3, sp, #4
 8004604:	f7ff ffc8 	bl	8004598 <__swhatbuf_r>
 8004608:	9900      	ldr	r1, [sp, #0]
 800460a:	4605      	mov	r5, r0
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f891 	bl	8004734 <_malloc_r>
 8004612:	b948      	cbnz	r0, 8004628 <__smakebuf_r+0x44>
 8004614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004618:	059a      	lsls	r2, r3, #22
 800461a:	d4ef      	bmi.n	80045fc <__smakebuf_r+0x18>
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	e7e3      	b.n	80045f0 <__smakebuf_r+0xc>
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <__smakebuf_r+0x7c>)
 800462a:	62b3      	str	r3, [r6, #40]	; 0x28
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	6020      	str	r0, [r4, #0]
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	6120      	str	r0, [r4, #16]
 800463a:	6163      	str	r3, [r4, #20]
 800463c:	9b01      	ldr	r3, [sp, #4]
 800463e:	b15b      	cbz	r3, 8004658 <__smakebuf_r+0x74>
 8004640:	4630      	mov	r0, r6
 8004642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004646:	f000 fc5f 	bl	8004f08 <_isatty_r>
 800464a:	b128      	cbz	r0, 8004658 <__smakebuf_r+0x74>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	89a0      	ldrh	r0, [r4, #12]
 800465a:	4305      	orrs	r5, r0
 800465c:	81a5      	strh	r5, [r4, #12]
 800465e:	e7cd      	b.n	80045fc <__smakebuf_r+0x18>
 8004660:	080043f1 	.word	0x080043f1

08004664 <_free_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4605      	mov	r5, r0
 8004668:	2900      	cmp	r1, #0
 800466a:	d040      	beq.n	80046ee <_free_r+0x8a>
 800466c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004670:	1f0c      	subs	r4, r1, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	18e4      	addlt	r4, r4, r3
 8004678:	f000 fc76 	bl	8004f68 <__malloc_lock>
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <_free_r+0x8c>)
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x2c>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	4628      	mov	r0, r5
 8004688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800468c:	f000 bc72 	b.w	8004f74 <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x42>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	1821      	adds	r1, r4, r0
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x1e>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x4c>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x42>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1850      	adds	r0, r2, r1
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x6c>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	4401      	add	r1, r0
 80046bc:	1850      	adds	r0, r2, r1
 80046be:	4283      	cmp	r3, r0
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x22>
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4401      	add	r1, r0
 80046ca:	6011      	str	r1, [r2, #0]
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x22>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x74>
 80046d2:	230c      	movs	r3, #12
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x22>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	1821      	adds	r1, r4, r0
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf01      	itttt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	1809      	addeq	r1, r1, r0
 80046e6:	6021      	streq	r1, [r4, #0]
 80046e8:	6063      	str	r3, [r4, #4]
 80046ea:	6054      	str	r4, [r2, #4]
 80046ec:	e7cb      	b.n	8004686 <_free_r+0x22>
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	200001a8 	.word	0x200001a8

080046f4 <sbrk_aligned>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4e0e      	ldr	r6, [pc, #56]	; (8004730 <sbrk_aligned+0x3c>)
 80046f8:	460c      	mov	r4, r1
 80046fa:	6831      	ldr	r1, [r6, #0]
 80046fc:	4605      	mov	r5, r0
 80046fe:	b911      	cbnz	r1, 8004706 <sbrk_aligned+0x12>
 8004700:	f000 fb7a 	bl	8004df8 <_sbrk_r>
 8004704:	6030      	str	r0, [r6, #0]
 8004706:	4621      	mov	r1, r4
 8004708:	4628      	mov	r0, r5
 800470a:	f000 fb75 	bl	8004df8 <_sbrk_r>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	d00a      	beq.n	8004728 <sbrk_aligned+0x34>
 8004712:	1cc4      	adds	r4, r0, #3
 8004714:	f024 0403 	bic.w	r4, r4, #3
 8004718:	42a0      	cmp	r0, r4
 800471a:	d007      	beq.n	800472c <sbrk_aligned+0x38>
 800471c:	1a21      	subs	r1, r4, r0
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fb6a 	bl	8004df8 <_sbrk_r>
 8004724:	3001      	adds	r0, #1
 8004726:	d101      	bne.n	800472c <sbrk_aligned+0x38>
 8004728:	f04f 34ff 	mov.w	r4, #4294967295
 800472c:	4620      	mov	r0, r4
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	200001ac 	.word	0x200001ac

08004734 <_malloc_r>:
 8004734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004738:	1ccd      	adds	r5, r1, #3
 800473a:	f025 0503 	bic.w	r5, r5, #3
 800473e:	3508      	adds	r5, #8
 8004740:	2d0c      	cmp	r5, #12
 8004742:	bf38      	it	cc
 8004744:	250c      	movcc	r5, #12
 8004746:	2d00      	cmp	r5, #0
 8004748:	4607      	mov	r7, r0
 800474a:	db01      	blt.n	8004750 <_malloc_r+0x1c>
 800474c:	42a9      	cmp	r1, r5
 800474e:	d905      	bls.n	800475c <_malloc_r+0x28>
 8004750:	230c      	movs	r3, #12
 8004752:	2600      	movs	r6, #0
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4630      	mov	r0, r6
 8004758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475c:	4e2e      	ldr	r6, [pc, #184]	; (8004818 <_malloc_r+0xe4>)
 800475e:	f000 fc03 	bl	8004f68 <__malloc_lock>
 8004762:	6833      	ldr	r3, [r6, #0]
 8004764:	461c      	mov	r4, r3
 8004766:	bb34      	cbnz	r4, 80047b6 <_malloc_r+0x82>
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
 800476c:	f7ff ffc2 	bl	80046f4 <sbrk_aligned>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	4604      	mov	r4, r0
 8004774:	d14d      	bne.n	8004812 <_malloc_r+0xde>
 8004776:	6834      	ldr	r4, [r6, #0]
 8004778:	4626      	mov	r6, r4
 800477a:	2e00      	cmp	r6, #0
 800477c:	d140      	bne.n	8004800 <_malloc_r+0xcc>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	4631      	mov	r1, r6
 8004782:	4638      	mov	r0, r7
 8004784:	eb04 0803 	add.w	r8, r4, r3
 8004788:	f000 fb36 	bl	8004df8 <_sbrk_r>
 800478c:	4580      	cmp	r8, r0
 800478e:	d13a      	bne.n	8004806 <_malloc_r+0xd2>
 8004790:	6821      	ldr	r1, [r4, #0]
 8004792:	3503      	adds	r5, #3
 8004794:	1a6d      	subs	r5, r5, r1
 8004796:	f025 0503 	bic.w	r5, r5, #3
 800479a:	3508      	adds	r5, #8
 800479c:	2d0c      	cmp	r5, #12
 800479e:	bf38      	it	cc
 80047a0:	250c      	movcc	r5, #12
 80047a2:	4638      	mov	r0, r7
 80047a4:	4629      	mov	r1, r5
 80047a6:	f7ff ffa5 	bl	80046f4 <sbrk_aligned>
 80047aa:	3001      	adds	r0, #1
 80047ac:	d02b      	beq.n	8004806 <_malloc_r+0xd2>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	442b      	add	r3, r5
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	e00e      	b.n	80047d4 <_malloc_r+0xa0>
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	1b52      	subs	r2, r2, r5
 80047ba:	d41e      	bmi.n	80047fa <_malloc_r+0xc6>
 80047bc:	2a0b      	cmp	r2, #11
 80047be:	d916      	bls.n	80047ee <_malloc_r+0xba>
 80047c0:	1961      	adds	r1, r4, r5
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	6025      	str	r5, [r4, #0]
 80047c6:	bf18      	it	ne
 80047c8:	6059      	strne	r1, [r3, #4]
 80047ca:	6863      	ldr	r3, [r4, #4]
 80047cc:	bf08      	it	eq
 80047ce:	6031      	streq	r1, [r6, #0]
 80047d0:	5162      	str	r2, [r4, r5]
 80047d2:	604b      	str	r3, [r1, #4]
 80047d4:	4638      	mov	r0, r7
 80047d6:	f104 060b 	add.w	r6, r4, #11
 80047da:	f000 fbcb 	bl	8004f74 <__malloc_unlock>
 80047de:	f026 0607 	bic.w	r6, r6, #7
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	1af2      	subs	r2, r6, r3
 80047e6:	d0b6      	beq.n	8004756 <_malloc_r+0x22>
 80047e8:	1b9b      	subs	r3, r3, r6
 80047ea:	50a3      	str	r3, [r4, r2]
 80047ec:	e7b3      	b.n	8004756 <_malloc_r+0x22>
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	bf0c      	ite	eq
 80047f4:	6032      	streq	r2, [r6, #0]
 80047f6:	605a      	strne	r2, [r3, #4]
 80047f8:	e7ec      	b.n	80047d4 <_malloc_r+0xa0>
 80047fa:	4623      	mov	r3, r4
 80047fc:	6864      	ldr	r4, [r4, #4]
 80047fe:	e7b2      	b.n	8004766 <_malloc_r+0x32>
 8004800:	4634      	mov	r4, r6
 8004802:	6876      	ldr	r6, [r6, #4]
 8004804:	e7b9      	b.n	800477a <_malloc_r+0x46>
 8004806:	230c      	movs	r3, #12
 8004808:	4638      	mov	r0, r7
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	f000 fbb2 	bl	8004f74 <__malloc_unlock>
 8004810:	e7a1      	b.n	8004756 <_malloc_r+0x22>
 8004812:	6025      	str	r5, [r4, #0]
 8004814:	e7de      	b.n	80047d4 <_malloc_r+0xa0>
 8004816:	bf00      	nop
 8004818:	200001a8 	.word	0x200001a8

0800481c <__sfputc_r>:
 800481c:	6893      	ldr	r3, [r2, #8]
 800481e:	b410      	push	{r4}
 8004820:	3b01      	subs	r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	da07      	bge.n	8004838 <__sfputc_r+0x1c>
 8004828:	6994      	ldr	r4, [r2, #24]
 800482a:	42a3      	cmp	r3, r4
 800482c:	db01      	blt.n	8004832 <__sfputc_r+0x16>
 800482e:	290a      	cmp	r1, #10
 8004830:	d102      	bne.n	8004838 <__sfputc_r+0x1c>
 8004832:	bc10      	pop	{r4}
 8004834:	f7ff bc3a 	b.w	80040ac <__swbuf_r>
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	1c58      	adds	r0, r3, #1
 800483c:	6010      	str	r0, [r2, #0]
 800483e:	7019      	strb	r1, [r3, #0]
 8004840:	4608      	mov	r0, r1
 8004842:	bc10      	pop	{r4}
 8004844:	4770      	bx	lr

08004846 <__sfputs_r>:
 8004846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	4614      	mov	r4, r2
 800484e:	18d5      	adds	r5, r2, r3
 8004850:	42ac      	cmp	r4, r5
 8004852:	d101      	bne.n	8004858 <__sfputs_r+0x12>
 8004854:	2000      	movs	r0, #0
 8004856:	e007      	b.n	8004868 <__sfputs_r+0x22>
 8004858:	463a      	mov	r2, r7
 800485a:	4630      	mov	r0, r6
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	f7ff ffdc 	bl	800481c <__sfputc_r>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d1f3      	bne.n	8004850 <__sfputs_r+0xa>
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800486c <_vfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	460d      	mov	r5, r1
 8004872:	4614      	mov	r4, r2
 8004874:	4698      	mov	r8, r3
 8004876:	4606      	mov	r6, r0
 8004878:	b09d      	sub	sp, #116	; 0x74
 800487a:	b118      	cbz	r0, 8004884 <_vfiprintf_r+0x18>
 800487c:	6983      	ldr	r3, [r0, #24]
 800487e:	b90b      	cbnz	r3, 8004884 <_vfiprintf_r+0x18>
 8004880:	f7ff fdea 	bl	8004458 <__sinit>
 8004884:	4b89      	ldr	r3, [pc, #548]	; (8004aac <_vfiprintf_r+0x240>)
 8004886:	429d      	cmp	r5, r3
 8004888:	d11b      	bne.n	80048c2 <_vfiprintf_r+0x56>
 800488a:	6875      	ldr	r5, [r6, #4]
 800488c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	d405      	bmi.n	800489e <_vfiprintf_r+0x32>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	059a      	lsls	r2, r3, #22
 8004896:	d402      	bmi.n	800489e <_vfiprintf_r+0x32>
 8004898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800489a:	f7ff fe7b 	bl	8004594 <__retarget_lock_acquire_recursive>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	d501      	bpl.n	80048a8 <_vfiprintf_r+0x3c>
 80048a4:	692b      	ldr	r3, [r5, #16]
 80048a6:	b9eb      	cbnz	r3, 80048e4 <_vfiprintf_r+0x78>
 80048a8:	4629      	mov	r1, r5
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7ff fc50 	bl	8004150 <__swsetup_r>
 80048b0:	b1c0      	cbz	r0, 80048e4 <_vfiprintf_r+0x78>
 80048b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b4:	07dc      	lsls	r4, r3, #31
 80048b6:	d50e      	bpl.n	80048d6 <_vfiprintf_r+0x6a>
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	b01d      	add	sp, #116	; 0x74
 80048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c2:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <_vfiprintf_r+0x244>)
 80048c4:	429d      	cmp	r5, r3
 80048c6:	d101      	bne.n	80048cc <_vfiprintf_r+0x60>
 80048c8:	68b5      	ldr	r5, [r6, #8]
 80048ca:	e7df      	b.n	800488c <_vfiprintf_r+0x20>
 80048cc:	4b79      	ldr	r3, [pc, #484]	; (8004ab4 <_vfiprintf_r+0x248>)
 80048ce:	429d      	cmp	r5, r3
 80048d0:	bf08      	it	eq
 80048d2:	68f5      	ldreq	r5, [r6, #12]
 80048d4:	e7da      	b.n	800488c <_vfiprintf_r+0x20>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d4ed      	bmi.n	80048b8 <_vfiprintf_r+0x4c>
 80048dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048de:	f7ff fe5a 	bl	8004596 <__retarget_lock_release_recursive>
 80048e2:	e7e9      	b.n	80048b8 <_vfiprintf_r+0x4c>
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	2320      	movs	r3, #32
 80048ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ee:	2330      	movs	r3, #48	; 0x30
 80048f0:	f04f 0901 	mov.w	r9, #1
 80048f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004ab8 <_vfiprintf_r+0x24c>
 80048fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004900:	4623      	mov	r3, r4
 8004902:	469a      	mov	sl, r3
 8004904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004908:	b10a      	cbz	r2, 800490e <_vfiprintf_r+0xa2>
 800490a:	2a25      	cmp	r2, #37	; 0x25
 800490c:	d1f9      	bne.n	8004902 <_vfiprintf_r+0x96>
 800490e:	ebba 0b04 	subs.w	fp, sl, r4
 8004912:	d00b      	beq.n	800492c <_vfiprintf_r+0xc0>
 8004914:	465b      	mov	r3, fp
 8004916:	4622      	mov	r2, r4
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ff93 	bl	8004846 <__sfputs_r>
 8004920:	3001      	adds	r0, #1
 8004922:	f000 80aa 	beq.w	8004a7a <_vfiprintf_r+0x20e>
 8004926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004928:	445a      	add	r2, fp
 800492a:	9209      	str	r2, [sp, #36]	; 0x24
 800492c:	f89a 3000 	ldrb.w	r3, [sl]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a2 	beq.w	8004a7a <_vfiprintf_r+0x20e>
 8004936:	2300      	movs	r3, #0
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004940:	f10a 0a01 	add.w	sl, sl, #1
 8004944:	9304      	str	r3, [sp, #16]
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494c:	931a      	str	r3, [sp, #104]	; 0x68
 800494e:	4654      	mov	r4, sl
 8004950:	2205      	movs	r2, #5
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4858      	ldr	r0, [pc, #352]	; (8004ab8 <_vfiprintf_r+0x24c>)
 8004958:	f000 faf8 	bl	8004f4c <memchr>
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	b9d8      	cbnz	r0, 8004998 <_vfiprintf_r+0x12c>
 8004960:	06d1      	lsls	r1, r2, #27
 8004962:	bf44      	itt	mi
 8004964:	2320      	movmi	r3, #32
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	0713      	lsls	r3, r2, #28
 800496c:	bf44      	itt	mi
 800496e:	232b      	movmi	r3, #43	; 0x2b
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b2a      	cmp	r3, #42	; 0x2a
 800497a:	d015      	beq.n	80049a8 <_vfiprintf_r+0x13c>
 800497c:	4654      	mov	r4, sl
 800497e:	2000      	movs	r0, #0
 8004980:	f04f 0c0a 	mov.w	ip, #10
 8004984:	9a07      	ldr	r2, [sp, #28]
 8004986:	4621      	mov	r1, r4
 8004988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498c:	3b30      	subs	r3, #48	; 0x30
 800498e:	2b09      	cmp	r3, #9
 8004990:	d94e      	bls.n	8004a30 <_vfiprintf_r+0x1c4>
 8004992:	b1b0      	cbz	r0, 80049c2 <_vfiprintf_r+0x156>
 8004994:	9207      	str	r2, [sp, #28]
 8004996:	e014      	b.n	80049c2 <_vfiprintf_r+0x156>
 8004998:	eba0 0308 	sub.w	r3, r0, r8
 800499c:	fa09 f303 	lsl.w	r3, r9, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	46a2      	mov	sl, r4
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	e7d2      	b.n	800494e <_vfiprintf_r+0xe2>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	1d19      	adds	r1, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfbb      	ittet	lt
 80049b4:	425b      	neglt	r3, r3
 80049b6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ba:	9307      	strge	r3, [sp, #28]
 80049bc:	9307      	strlt	r3, [sp, #28]
 80049be:	bfb8      	it	lt
 80049c0:	9204      	strlt	r2, [sp, #16]
 80049c2:	7823      	ldrb	r3, [r4, #0]
 80049c4:	2b2e      	cmp	r3, #46	; 0x2e
 80049c6:	d10c      	bne.n	80049e2 <_vfiprintf_r+0x176>
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d135      	bne.n	8004a3a <_vfiprintf_r+0x1ce>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3402      	adds	r4, #2
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	9203      	str	r2, [sp, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bfb8      	it	lt
 80049dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004abc <_vfiprintf_r+0x250>
 80049e6:	2203      	movs	r2, #3
 80049e8:	4650      	mov	r0, sl
 80049ea:	7821      	ldrb	r1, [r4, #0]
 80049ec:	f000 faae 	bl	8004f4c <memchr>
 80049f0:	b140      	cbz	r0, 8004a04 <_vfiprintf_r+0x198>
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	fa03 f000 	lsl.w	r0, r3, r0
 80049fc:	9b04      	ldr	r3, [sp, #16]
 80049fe:	3401      	adds	r4, #1
 8004a00:	4303      	orrs	r3, r0
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	2206      	movs	r2, #6
 8004a0a:	482d      	ldr	r0, [pc, #180]	; (8004ac0 <_vfiprintf_r+0x254>)
 8004a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a10:	f000 fa9c 	bl	8004f4c <memchr>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d03f      	beq.n	8004a98 <_vfiprintf_r+0x22c>
 8004a18:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <_vfiprintf_r+0x258>)
 8004a1a:	bb1b      	cbnz	r3, 8004a64 <_vfiprintf_r+0x1f8>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2a:	443b      	add	r3, r7
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2e:	e767      	b.n	8004900 <_vfiprintf_r+0x94>
 8004a30:	460c      	mov	r4, r1
 8004a32:	2001      	movs	r0, #1
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	e7a5      	b.n	8004986 <_vfiprintf_r+0x11a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 0c0a 	mov.w	ip, #10
 8004a40:	4619      	mov	r1, r3
 8004a42:	3401      	adds	r4, #1
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4620      	mov	r0, r4
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	; 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_vfiprintf_r+0x1ee>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c5      	beq.n	80049e2 <_vfiprintf_r+0x176>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c3      	b.n	80049e2 <_vfiprintf_r+0x176>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	e7f0      	b.n	8004a46 <_vfiprintf_r+0x1da>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <_vfiprintf_r+0x25c>)
 8004a6e:	a904      	add	r1, sp, #16
 8004a70:	f3af 8000 	nop.w
 8004a74:	4607      	mov	r7, r0
 8004a76:	1c78      	adds	r0, r7, #1
 8004a78:	d1d6      	bne.n	8004a28 <_vfiprintf_r+0x1bc>
 8004a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7c:	07d9      	lsls	r1, r3, #31
 8004a7e:	d405      	bmi.n	8004a8c <_vfiprintf_r+0x220>
 8004a80:	89ab      	ldrh	r3, [r5, #12]
 8004a82:	059a      	lsls	r2, r3, #22
 8004a84:	d402      	bmi.n	8004a8c <_vfiprintf_r+0x220>
 8004a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a88:	f7ff fd85 	bl	8004596 <__retarget_lock_release_recursive>
 8004a8c:	89ab      	ldrh	r3, [r5, #12]
 8004a8e:	065b      	lsls	r3, r3, #25
 8004a90:	f53f af12 	bmi.w	80048b8 <_vfiprintf_r+0x4c>
 8004a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a96:	e711      	b.n	80048bc <_vfiprintf_r+0x50>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <_vfiprintf_r+0x25c>)
 8004aa2:	a904      	add	r1, sp, #16
 8004aa4:	f000 f882 	bl	8004bac <_printf_i>
 8004aa8:	e7e4      	b.n	8004a74 <_vfiprintf_r+0x208>
 8004aaa:	bf00      	nop
 8004aac:	080051d0 	.word	0x080051d0
 8004ab0:	080051f0 	.word	0x080051f0
 8004ab4:	080051b0 	.word	0x080051b0
 8004ab8:	08005210 	.word	0x08005210
 8004abc:	08005216 	.word	0x08005216
 8004ac0:	0800521a 	.word	0x0800521a
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	08004847 	.word	0x08004847

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	4699      	mov	r9, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	4607      	mov	r7, r0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bfb8      	it	lt
 8004ade:	4613      	movlt	r3, r2
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aec:	b10a      	cbz	r2, 8004af2 <_printf_common+0x26>
 8004aee:	3301      	adds	r3, #1
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	0699      	lsls	r1, r3, #26
 8004af6:	bf42      	ittt	mi
 8004af8:	6833      	ldrmi	r3, [r6, #0]
 8004afa:	3302      	addmi	r3, #2
 8004afc:	6033      	strmi	r3, [r6, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	f015 0506 	ands.w	r5, r5, #6
 8004b04:	d106      	bne.n	8004b14 <_printf_common+0x48>
 8004b06:	f104 0a19 	add.w	sl, r4, #25
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	6832      	ldr	r2, [r6, #0]
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dc28      	bgt.n	8004b66 <_printf_common+0x9a>
 8004b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b18:	1e13      	subs	r3, r2, #0
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	bf18      	it	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	0692      	lsls	r2, r2, #26
 8004b22:	d42d      	bmi.n	8004b80 <_printf_common+0xb4>
 8004b24:	4649      	mov	r1, r9
 8004b26:	4638      	mov	r0, r7
 8004b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d020      	beq.n	8004b74 <_printf_common+0xa8>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	68e5      	ldr	r5, [r4, #12]
 8004b36:	f003 0306 	and.w	r3, r3, #6
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	bf18      	it	ne
 8004b3e:	2500      	movne	r5, #0
 8004b40:	6832      	ldr	r2, [r6, #0]
 8004b42:	f04f 0600 	mov.w	r6, #0
 8004b46:	68a3      	ldr	r3, [r4, #8]
 8004b48:	bf08      	it	eq
 8004b4a:	1aad      	subeq	r5, r5, r2
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	bf08      	it	eq
 8004b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bfc4      	itt	gt
 8004b58:	1a9b      	subgt	r3, r3, r2
 8004b5a:	18ed      	addgt	r5, r5, r3
 8004b5c:	341a      	adds	r4, #26
 8004b5e:	42b5      	cmp	r5, r6
 8004b60:	d11a      	bne.n	8004b98 <_printf_common+0xcc>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e008      	b.n	8004b78 <_printf_common+0xac>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4652      	mov	r2, sl
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	47c0      	blx	r8
 8004b70:	3001      	adds	r0, #1
 8004b72:	d103      	bne.n	8004b7c <_printf_common+0xb0>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7c4      	b.n	8004b0a <_printf_common+0x3e>
 8004b80:	2030      	movs	r0, #48	; 0x30
 8004b82:	18e1      	adds	r1, r4, r3
 8004b84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b8e:	4422      	add	r2, r4
 8004b90:	3302      	adds	r3, #2
 8004b92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b96:	e7c5      	b.n	8004b24 <_printf_common+0x58>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d0e6      	beq.n	8004b74 <_printf_common+0xa8>
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7d9      	b.n	8004b5e <_printf_common+0x92>
	...

08004bac <_printf_i>:
 8004bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	7e0f      	ldrb	r7, [r1, #24]
 8004bb2:	4691      	mov	r9, r2
 8004bb4:	2f78      	cmp	r7, #120	; 0x78
 8004bb6:	4680      	mov	r8, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	469a      	mov	sl, r3
 8004bbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bc2:	d807      	bhi.n	8004bd4 <_printf_i+0x28>
 8004bc4:	2f62      	cmp	r7, #98	; 0x62
 8004bc6:	d80a      	bhi.n	8004bde <_printf_i+0x32>
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	f000 80d9 	beq.w	8004d80 <_printf_i+0x1d4>
 8004bce:	2f58      	cmp	r7, #88	; 0x58
 8004bd0:	f000 80a4 	beq.w	8004d1c <_printf_i+0x170>
 8004bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bdc:	e03a      	b.n	8004c54 <_printf_i+0xa8>
 8004bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004be2:	2b15      	cmp	r3, #21
 8004be4:	d8f6      	bhi.n	8004bd4 <_printf_i+0x28>
 8004be6:	a101      	add	r1, pc, #4	; (adr r1, 8004bec <_printf_i+0x40>)
 8004be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bec:	08004c45 	.word	0x08004c45
 8004bf0:	08004c59 	.word	0x08004c59
 8004bf4:	08004bd5 	.word	0x08004bd5
 8004bf8:	08004bd5 	.word	0x08004bd5
 8004bfc:	08004bd5 	.word	0x08004bd5
 8004c00:	08004bd5 	.word	0x08004bd5
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004bd5 	.word	0x08004bd5
 8004c0c:	08004bd5 	.word	0x08004bd5
 8004c10:	08004bd5 	.word	0x08004bd5
 8004c14:	08004bd5 	.word	0x08004bd5
 8004c18:	08004d67 	.word	0x08004d67
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004d49 	.word	0x08004d49
 8004c24:	08004bd5 	.word	0x08004bd5
 8004c28:	08004bd5 	.word	0x08004bd5
 8004c2c:	08004d89 	.word	0x08004d89
 8004c30:	08004bd5 	.word	0x08004bd5
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004bd5 	.word	0x08004bd5
 8004c3c:	08004bd5 	.word	0x08004bd5
 8004c40:	08004d51 	.word	0x08004d51
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0a4      	b.n	8004da2 <_printf_i+0x1f6>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	6829      	ldr	r1, [r5, #0]
 8004c5c:	0606      	lsls	r6, r0, #24
 8004c5e:	f101 0304 	add.w	r3, r1, #4
 8004c62:	d50a      	bpl.n	8004c7a <_printf_i+0xce>
 8004c64:	680e      	ldr	r6, [r1, #0]
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	da03      	bge.n	8004c74 <_printf_i+0xc8>
 8004c6c:	232d      	movs	r3, #45	; 0x2d
 8004c6e:	4276      	negs	r6, r6
 8004c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c74:	230a      	movs	r3, #10
 8004c76:	485e      	ldr	r0, [pc, #376]	; (8004df0 <_printf_i+0x244>)
 8004c78:	e019      	b.n	8004cae <_printf_i+0x102>
 8004c7a:	680e      	ldr	r6, [r1, #0]
 8004c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	bf18      	it	ne
 8004c84:	b236      	sxthne	r6, r6
 8004c86:	e7ef      	b.n	8004c68 <_printf_i+0xbc>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1d19      	adds	r1, r3, #4
 8004c8e:	6029      	str	r1, [r5, #0]
 8004c90:	0601      	lsls	r1, r0, #24
 8004c92:	d501      	bpl.n	8004c98 <_printf_i+0xec>
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	e002      	b.n	8004c9e <_printf_i+0xf2>
 8004c98:	0646      	lsls	r6, r0, #25
 8004c9a:	d5fb      	bpl.n	8004c94 <_printf_i+0xe8>
 8004c9c:	881e      	ldrh	r6, [r3, #0]
 8004c9e:	2f6f      	cmp	r7, #111	; 0x6f
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2308      	moveq	r3, #8
 8004ca4:	230a      	movne	r3, #10
 8004ca6:	4852      	ldr	r0, [pc, #328]	; (8004df0 <_printf_i+0x244>)
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cae:	6865      	ldr	r5, [r4, #4]
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	bfa8      	it	ge
 8004cb4:	6821      	ldrge	r1, [r4, #0]
 8004cb6:	60a5      	str	r5, [r4, #8]
 8004cb8:	bfa4      	itt	ge
 8004cba:	f021 0104 	bicge.w	r1, r1, #4
 8004cbe:	6021      	strge	r1, [r4, #0]
 8004cc0:	b90e      	cbnz	r6, 8004cc6 <_printf_i+0x11a>
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	d04d      	beq.n	8004d62 <_printf_i+0x1b6>
 8004cc6:	4615      	mov	r5, r2
 8004cc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ccc:	fb03 6711 	mls	r7, r3, r1, r6
 8004cd0:	5dc7      	ldrb	r7, [r0, r7]
 8004cd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cd6:	4637      	mov	r7, r6
 8004cd8:	42bb      	cmp	r3, r7
 8004cda:	460e      	mov	r6, r1
 8004cdc:	d9f4      	bls.n	8004cc8 <_printf_i+0x11c>
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d10b      	bne.n	8004cfa <_printf_i+0x14e>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	07de      	lsls	r6, r3, #31
 8004ce6:	d508      	bpl.n	8004cfa <_printf_i+0x14e>
 8004ce8:	6923      	ldr	r3, [r4, #16]
 8004cea:	6861      	ldr	r1, [r4, #4]
 8004cec:	4299      	cmp	r1, r3
 8004cee:	bfde      	ittt	le
 8004cf0:	2330      	movle	r3, #48	; 0x30
 8004cf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cfa:	1b52      	subs	r2, r2, r5
 8004cfc:	6122      	str	r2, [r4, #16]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	4621      	mov	r1, r4
 8004d02:	4640      	mov	r0, r8
 8004d04:	f8cd a000 	str.w	sl, [sp]
 8004d08:	aa03      	add	r2, sp, #12
 8004d0a:	f7ff fedf 	bl	8004acc <_printf_common>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d14c      	bne.n	8004dac <_printf_i+0x200>
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b004      	add	sp, #16
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	4834      	ldr	r0, [pc, #208]	; (8004df0 <_printf_i+0x244>)
 8004d1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d22:	6829      	ldr	r1, [r5, #0]
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d2a:	6029      	str	r1, [r5, #0]
 8004d2c:	061d      	lsls	r5, r3, #24
 8004d2e:	d514      	bpl.n	8004d5a <_printf_i+0x1ae>
 8004d30:	07df      	lsls	r7, r3, #31
 8004d32:	bf44      	itt	mi
 8004d34:	f043 0320 	orrmi.w	r3, r3, #32
 8004d38:	6023      	strmi	r3, [r4, #0]
 8004d3a:	b91e      	cbnz	r6, 8004d44 <_printf_i+0x198>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f023 0320 	bic.w	r3, r3, #32
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	2310      	movs	r3, #16
 8004d46:	e7af      	b.n	8004ca8 <_printf_i+0xfc>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	f043 0320 	orr.w	r3, r3, #32
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	2378      	movs	r3, #120	; 0x78
 8004d52:	4828      	ldr	r0, [pc, #160]	; (8004df4 <_printf_i+0x248>)
 8004d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d58:	e7e3      	b.n	8004d22 <_printf_i+0x176>
 8004d5a:	0659      	lsls	r1, r3, #25
 8004d5c:	bf48      	it	mi
 8004d5e:	b2b6      	uxthmi	r6, r6
 8004d60:	e7e6      	b.n	8004d30 <_printf_i+0x184>
 8004d62:	4615      	mov	r5, r2
 8004d64:	e7bb      	b.n	8004cde <_printf_i+0x132>
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	6826      	ldr	r6, [r4, #0]
 8004d6a:	1d18      	adds	r0, r3, #4
 8004d6c:	6961      	ldr	r1, [r4, #20]
 8004d6e:	6028      	str	r0, [r5, #0]
 8004d70:	0635      	lsls	r5, r6, #24
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	d501      	bpl.n	8004d7a <_printf_i+0x1ce>
 8004d76:	6019      	str	r1, [r3, #0]
 8004d78:	e002      	b.n	8004d80 <_printf_i+0x1d4>
 8004d7a:	0670      	lsls	r0, r6, #25
 8004d7c:	d5fb      	bpl.n	8004d76 <_printf_i+0x1ca>
 8004d7e:	8019      	strh	r1, [r3, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	4615      	mov	r5, r2
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	e7ba      	b.n	8004cfe <_printf_i+0x152>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	602a      	str	r2, [r5, #0]
 8004d90:	681d      	ldr	r5, [r3, #0]
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f8d9 	bl	8004f4c <memchr>
 8004d9a:	b108      	cbz	r0, 8004da0 <_printf_i+0x1f4>
 8004d9c:	1b40      	subs	r0, r0, r5
 8004d9e:	6060      	str	r0, [r4, #4]
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	6123      	str	r3, [r4, #16]
 8004da4:	2300      	movs	r3, #0
 8004da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004daa:	e7a8      	b.n	8004cfe <_printf_i+0x152>
 8004dac:	462a      	mov	r2, r5
 8004dae:	4649      	mov	r1, r9
 8004db0:	4640      	mov	r0, r8
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	47d0      	blx	sl
 8004db6:	3001      	adds	r0, #1
 8004db8:	d0ab      	beq.n	8004d12 <_printf_i+0x166>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	079b      	lsls	r3, r3, #30
 8004dbe:	d413      	bmi.n	8004de8 <_printf_i+0x23c>
 8004dc0:	68e0      	ldr	r0, [r4, #12]
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	4298      	cmp	r0, r3
 8004dc6:	bfb8      	it	lt
 8004dc8:	4618      	movlt	r0, r3
 8004dca:	e7a4      	b.n	8004d16 <_printf_i+0x16a>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4632      	mov	r2, r6
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	47d0      	blx	sl
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d09b      	beq.n	8004d12 <_printf_i+0x166>
 8004dda:	3501      	adds	r5, #1
 8004ddc:	68e3      	ldr	r3, [r4, #12]
 8004dde:	9903      	ldr	r1, [sp, #12]
 8004de0:	1a5b      	subs	r3, r3, r1
 8004de2:	42ab      	cmp	r3, r5
 8004de4:	dcf2      	bgt.n	8004dcc <_printf_i+0x220>
 8004de6:	e7eb      	b.n	8004dc0 <_printf_i+0x214>
 8004de8:	2500      	movs	r5, #0
 8004dea:	f104 0619 	add.w	r6, r4, #25
 8004dee:	e7f5      	b.n	8004ddc <_printf_i+0x230>
 8004df0:	08005221 	.word	0x08005221
 8004df4:	08005232 	.word	0x08005232

08004df8 <_sbrk_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4d05      	ldr	r5, [pc, #20]	; (8004e14 <_sbrk_r+0x1c>)
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f7fc f878 	bl	8000ef8 <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_sbrk_r+0x1a>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_sbrk_r+0x1a>
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	200001b0 	.word	0x200001b0

08004e18 <__sread>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	f000 f8ae 	bl	8004f80 <_read_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	bfab      	itete	ge
 8004e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e2c:	181b      	addge	r3, r3, r0
 8004e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e32:	bfac      	ite	ge
 8004e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e36:	81a3      	strhlt	r3, [r4, #12]
 8004e38:	bd10      	pop	{r4, pc}

08004e3a <__swrite>:
 8004e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	461f      	mov	r7, r3
 8004e40:	898b      	ldrh	r3, [r1, #12]
 8004e42:	4605      	mov	r5, r0
 8004e44:	05db      	lsls	r3, r3, #23
 8004e46:	460c      	mov	r4, r1
 8004e48:	4616      	mov	r6, r2
 8004e4a:	d505      	bpl.n	8004e58 <__swrite+0x1e>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e54:	f000 f868 	bl	8004f28 <_lseek_r>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	4632      	mov	r2, r6
 8004e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	4628      	mov	r0, r5
 8004e64:	463b      	mov	r3, r7
 8004e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	f000 b817 	b.w	8004ea0 <_write_r>

08004e72 <__sseek>:
 8004e72:	b510      	push	{r4, lr}
 8004e74:	460c      	mov	r4, r1
 8004e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7a:	f000 f855 	bl	8004f28 <_lseek_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	bf15      	itete	ne
 8004e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8e:	81a3      	strheq	r3, [r4, #12]
 8004e90:	bf18      	it	ne
 8004e92:	81a3      	strhne	r3, [r4, #12]
 8004e94:	bd10      	pop	{r4, pc}

08004e96 <__sclose>:
 8004e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9a:	f000 b813 	b.w	8004ec4 <_close_r>
	...

08004ea0 <_write_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4d05      	ldr	r5, [pc, #20]	; (8004ec0 <_write_r+0x20>)
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fb ffd6 	bl	8000e60 <_write>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_write_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_write_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200001b0 	.word	0x200001b0

08004ec4 <_close_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4d05      	ldr	r5, [pc, #20]	; (8004ee0 <_close_r+0x1c>)
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f7fb ffe2 	bl	8000e98 <_close>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_close_r+0x1a>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_close_r+0x1a>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	200001b0 	.word	0x200001b0

08004ee4 <_fstat_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4d06      	ldr	r5, [pc, #24]	; (8004f04 <_fstat_r+0x20>)
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	f7fb ffdc 	bl	8000eae <_fstat>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d102      	bne.n	8004f00 <_fstat_r+0x1c>
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	b103      	cbz	r3, 8004f00 <_fstat_r+0x1c>
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	bd38      	pop	{r3, r4, r5, pc}
 8004f02:	bf00      	nop
 8004f04:	200001b0 	.word	0x200001b0

08004f08 <_isatty_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4d05      	ldr	r5, [pc, #20]	; (8004f24 <_isatty_r+0x1c>)
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f7fb ffda 	bl	8000ecc <_isatty>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_isatty_r+0x1a>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_isatty_r+0x1a>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	200001b0 	.word	0x200001b0

08004f28 <_lseek_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	2200      	movs	r2, #0
 8004f32:	4d05      	ldr	r5, [pc, #20]	; (8004f48 <_lseek_r+0x20>)
 8004f34:	602a      	str	r2, [r5, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7fb ffd2 	bl	8000ee0 <_lseek>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_lseek_r+0x1e>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_lseek_r+0x1e>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200001b0 	.word	0x200001b0

08004f4c <memchr>:
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	b2c9      	uxtb	r1, r1
 8004f52:	4402      	add	r2, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	d101      	bne.n	8004f5e <memchr+0x12>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e003      	b.n	8004f66 <memchr+0x1a>
 8004f5e:	7804      	ldrb	r4, [r0, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	428c      	cmp	r4, r1
 8004f64:	d1f6      	bne.n	8004f54 <memchr+0x8>
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <__malloc_lock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_lock+0x8>)
 8004f6a:	f7ff bb13 	b.w	8004594 <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	200001a4 	.word	0x200001a4

08004f74 <__malloc_unlock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_unlock+0x8>)
 8004f76:	f7ff bb0e 	b.w	8004596 <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	200001a4 	.word	0x200001a4

08004f80 <_read_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4d05      	ldr	r5, [pc, #20]	; (8004fa0 <_read_r+0x20>)
 8004f8c:	602a      	str	r2, [r5, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fb ff49 	bl	8000e26 <_read>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_read_r+0x1e>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_read_r+0x1e>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200001b0 	.word	0x200001b0

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
