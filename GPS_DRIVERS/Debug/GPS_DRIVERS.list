
GPS_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dbc  08003dbc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08003dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200000b8  08003e7c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003e7c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab1c  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bc  00000000  00000000  0002abfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001663a  00000000  00000000  0002d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c494  00000000  00000000  00043efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088411  00000000  00000000  0005038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d879f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec4  00000000  00000000  000d87f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08003ce4 	.word	0x08003ce4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08003ce4 	.word	0x08003ce4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <UBX_M8N_CHECKSUM>:
 *	After calculating the checksum values CK_A and CK_B, return it as a 16 bit unsigned integer
 *  Where CK_A is the high byte, and CK_B is the low byte
 *
 *	Check documentation if you need more info, details in header file
 */
uint16_t UBX_M8N_CHECKSUM(uint8_t* buffer, uint8_t buflen) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]

	// These values will be used to compare with the buffer's
	uint8_t CK_A = 0, CK_B = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	2300      	movs	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	// loop to go through buffer payload
	// start at index 2 since first two bytes of buffer are not included in checksum calculation
	// do not include last 2 bytes of buffer since they are also not included in checksum calculation
	for (int i = 2; i < buflen - 2; i++) {
 8000498:	2302      	movs	r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	e00d      	b.n	80004ba <UBX_M8N_CHECKSUM+0x36>
		CK_A = CK_A + buffer[i];
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4413      	add	r3, r2
 80004aa:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 80004ac:	7bba      	ldrb	r2, [r7, #14]
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4413      	add	r3, r2
 80004b2:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < buflen - 2; i++) {
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	3b02      	subs	r3, #2
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbec      	blt.n	800049e <UBX_M8N_CHECKSUM+0x1a>
	// After calculating checksum, compare with checksum bytes from buffer
	// Return 1 if both are equal to buffer checksum, return 0 if not
	// return ((CK_A == buffer[buflen - 2]) && (CK_B == buffer[buflen - 1]));

	// return 2 byte checksum
	return ((CK_A<<8) | CK_B);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b21a      	sxth	r2, r3
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b21b      	sxth	r3, r3
 80004d2:	b29b      	uxth	r3, r3
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <UBX_M8N_NAV_POSLLH_Parsing>:

/* This function parses the payload from a NAV_POSLLH message
 * The payload is in little endian format, so left shift the bytes
 * Follow reference from driver and protocol description
 */
void UBX_M8N_NAV_POSLLH_Parsing(uint8_t *buffer, NavData* data) {
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
	data->iTOW = buffer[9]<<24 | buffer[8]<<16 | buffer[7]<<8 | buffer[6];
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3309      	adds	r3, #9
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	061a      	lsls	r2, r3, #24
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3308      	adds	r3, #8
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	041b      	lsls	r3, r3, #16
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3307      	adds	r3, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	4313      	orrs	r3, r2
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	3206      	adds	r2, #6
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	4313      	orrs	r3, r2
 800050c:	461a      	mov	r2, r3
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	601a      	str	r2, [r3, #0]
	data->lon = buffer[13]<<24 | buffer[12]<<16 | buffer[11]<<8 | buffer[10];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	330d      	adds	r3, #13
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	061a      	lsls	r2, r3, #24
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	330c      	adds	r3, #12
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	041b      	lsls	r3, r3, #16
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	330b      	adds	r3, #11
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	320a      	adds	r2, #10
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	605a      	str	r2, [r3, #4]
	data->lat = buffer[17]<<24 | buffer[16]<<16 | buffer[15]<<8 | buffer[14];
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3311      	adds	r3, #17
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	061a      	lsls	r2, r3, #24
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3310      	adds	r3, #16
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	330f      	adds	r3, #15
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	4313      	orrs	r3, r2
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	320e      	adds	r2, #14
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	609a      	str	r2, [r3, #8]
	data->height = buffer[21]<<24 | buffer[20]<<16 | buffer[19]<<8 | buffer[18];
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3315      	adds	r3, #21
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	061a      	lsls	r2, r3, #24
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3314      	adds	r3, #20
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3313      	adds	r3, #19
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	4313      	orrs	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	3212      	adds	r2, #18
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	431a      	orrs	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	60da      	str	r2, [r3, #12]
	data->hMSL = buffer[25]<<24 | buffer[24]<<16 | buffer[23]<<8 | buffer[22];
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3319      	adds	r3, #25
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	061a      	lsls	r2, r3, #24
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3318      	adds	r3, #24
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	431a      	orrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3317      	adds	r3, #23
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	3216      	adds	r2, #22
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	611a      	str	r2, [r3, #16]
	data->hAcc = buffer[29]<<24 | buffer[28]<<16 | buffer[27]<<8 | buffer[26];
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	331d      	adds	r3, #29
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	061a      	lsls	r2, r3, #24
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	331c      	adds	r3, #28
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	331b      	adds	r3, #27
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	321a      	adds	r2, #26
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	461a      	mov	r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	615a      	str	r2, [r3, #20]
	data->vAcc = buffer[33]<<24 | buffer[32]<<16 | buffer[31]<<8 | buffer[30];
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3321      	adds	r3, #33	; 0x21
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	061a      	lsls	r2, r3, #24
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3320      	adds	r3, #32
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	041b      	lsls	r3, r3, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	331f      	adds	r3, #31
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	321e      	adds	r2, #30
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4313      	orrs	r3, r2
 8000600:	461a      	mov	r2, r3
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	619a      	str	r2, [r3, #24]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <CONFIG_Transmit>:

/* This function sets a desired configuration in the GPS receiver
 * It takes in a pointer to the configuration message buffer, as well as its size
 * Calls Error_Handler() if something goes wrong
*/
void CONFIG_Transmit(uint8_t* buffer, uint8_t buflen) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal;    				// HAL return status
	uint8_t ACK_BUFFER[10];   				// temporary buffer for acknowledge message
	ACK_BUFFER[0] = GPS_DATA_REGISTER;	  	// set first element of buffer as register of data stream
 800061c:	23ff      	movs	r3, #255	; 0xff
 800061e:	733b      	strb	r3, [r7, #12]

	// set global ACK message with expected values
	UBX_ACK_ACK[6] = buffer[2];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	789a      	ldrb	r2, [r3, #2]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <CONFIG_Transmit+0xb8>)
 8000626:	719a      	strb	r2, [r3, #6]
	UBX_ACK_ACK[7] = buffer[3];
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	78da      	ldrb	r2, [r3, #3]
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <CONFIG_Transmit+0xb8>)
 800062e:	71da      	strb	r2, [r3, #7]

	// set the checksum bytes of the expected ACK message
	uint16_t expectedCheckSum = UBX_M8N_CHECKSUM(UBX_ACK_ACK, 10);
 8000630:	210a      	movs	r1, #10
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <CONFIG_Transmit+0xb8>)
 8000634:	f7ff ff26 	bl	8000484 <UBX_M8N_CHECKSUM>
 8000638:	4603      	mov	r3, r0
 800063a:	837b      	strh	r3, [r7, #26]
	UBX_ACK_ACK[8] = (expectedCheckSum >> 8) & 0xFF;		// CK_A is the high byte
 800063c:	8b7b      	ldrh	r3, [r7, #26]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29b      	uxth	r3, r3
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <CONFIG_Transmit+0xb8>)
 8000646:	721a      	strb	r2, [r3, #8]
	UBX_ACK_ACK[9] = expectedCheckSum & 0xFF;				// CK_B is the low byte
 8000648:	8b7b      	ldrh	r3, [r7, #26]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <CONFIG_Transmit+0xb8>)
 800064e:	725a      	strb	r2, [r3, #9]
	
	// transmit desired CONFIG to GPS receiver
	hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, buffer, buflen, HAL_MAX_DELAY);
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	2184      	movs	r1, #132	; 0x84
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <CONFIG_Transmit+0xbc>)
 8000660:	f000 ff88 	bl	8001574 <HAL_I2C_Master_Transmit>
 8000664:	4603      	mov	r3, r0
 8000666:	767b      	strb	r3, [r7, #25]
	if (hal != HAL_OK) {
 8000668:	7e7b      	ldrb	r3, [r7, #25]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <CONFIG_Transmit+0x62>
		// something went wrong with transmit (exit)
		Error_Handler();
 800066e:	f000 f98b 	bl	8000988 <Error_Handler>
	}

	hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, UBX_ACK_ACK, 10, HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	230a      	movs	r3, #10
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <CONFIG_Transmit+0xb8>)
 800067c:	2185      	movs	r1, #133	; 0x85
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <CONFIG_Transmit+0xbc>)
 8000680:	f001 f876 	bl	8001770 <HAL_I2C_Master_Receive>
 8000684:	4603      	mov	r3, r0
 8000686:	767b      	strb	r3, [r7, #25]
	if (hal != HAL_OK) {
 8000688:	7e7b      	ldrb	r3, [r7, #25]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <CONFIG_Transmit+0x82>
		// something went wrong with receive (exit)
		Error_Handler();
 800068e:	f000 f97b 	bl	8000988 <Error_Handler>
	}
	
	for(int i = 0; i < 10; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
 8000696:	e00e      	b.n	80006b6 <CONFIG_Transmit+0xa6>
		if (buffer[i] != UBX_ACK_ACK[i]) {
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	4909      	ldr	r1, [pc, #36]	; (80006c8 <CONFIG_Transmit+0xb8>)
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	440b      	add	r3, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d001      	beq.n	80006b0 <CONFIG_Transmit+0xa0>
			// not acknowledged
			Error_Handler();
 80006ac:	f000 f96c 	bl	8000988 <Error_Handler>
	for(int i = 0; i < 10; i++) {
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	3301      	adds	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	dded      	ble.n	8000698 <CONFIG_Transmit+0x88>
		}
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	200000d4 	.word	0x200000d4

080006d0 <GPS_Initialization>:

void GPS_Initialization(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	CONFIG_Transmit(UBX_CFG_PRT, sizeof(UBX_CFG_PRT)/sizeof(UBX_CFG_PRT[0]));
 80006d4:	211c      	movs	r1, #28
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <GPS_Initialization+0x38>)
 80006d8:	f7ff ff9a 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fb6e 	bl	8000dc0 <HAL_Delay>

	CONFIG_Transmit(UBX_CFG_MSG, sizeof(UBX_CFG_MSG)/sizeof(UBX_CFG_MSG[0]));
 80006e4:	2110      	movs	r1, #16
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <GPS_Initialization+0x3c>)
 80006e8:	f7ff ff92 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f000 fb66 	bl	8000dc0 <HAL_Delay>

	CONFIG_Transmit(UBX_CFG_RATE, sizeof(UBX_CFG_RATE)/sizeof(UBX_CFG_RATE[0]));
 80006f4:	210e      	movs	r1, #14
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <GPS_Initialization+0x40>)
 80006f8:	f7ff ff8a 	bl	8000610 <CONFIG_Transmit>
	HAL_Delay(500);
 80006fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000700:	f000 fb5e 	bl	8000dc0 <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	2000001c 	.word	0x2000001c
 8000710:	2000002c 	.word	0x2000002c

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fae2 	bl	8000ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f871 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f90f 	bl	8000944 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000726:	f000 f8b5 	bl	8000894 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800072a:	f000 f8e1 	bl	80008f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup GPS receiver with desired configurations
  GPS_Initialization();
 800072e:	f7ff ffcf 	bl	80006d0 <GPS_Initialization>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // set first element of buffer as the address of data stream register
	  // If GPS_BUFFER == 0xFF, then it means that there is no data for the GPS to send
	  GPS_BUFFER[0] = GPS_DATA_REGISTER;
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	773b      	strb	r3, [r7, #28]

	  // Transmit to GPS, let it know I want data
	  hal = HAL_I2C_Master_Transmit(&hi2c1, GPS_DEVICE_ADDRESS, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);  
 8000736:	f107 021c 	add.w	r2, r7, #28
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2324      	movs	r3, #36	; 0x24
 8000742:	2184      	movs	r1, #132	; 0x84
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <main+0xe0>)
 8000746:	f000 ff15 	bl	8001574 <HAL_I2C_Master_Transmit>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if ( hal != HAL_OK ) {
 8000750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <main+0x48>
		  Error_Handler();
 8000758:	f000 f916 	bl	8000988 <Error_Handler>
	  }
		
    // if HAL_OK then receive data
    // set bit zero on device address for read access
    hal = HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS | 0x01, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);
 800075c:	f107 021c 	add.w	r2, r7, #28
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2324      	movs	r3, #36	; 0x24
 8000768:	2185      	movs	r1, #133	; 0x85
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <main+0xe0>)
 800076c:	f001 f800 	bl	8001770 <HAL_I2C_Master_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if ( hal != HAL_OK ) {
 8000776:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0x6e>
      Error_Handler();
 800077e:	f000 f903 	bl	8000988 <Error_Handler>
    }

    // buffer[0] == 0xff when there is no data
    if (GPS_BUFFER[0] != 0xff) {
 8000782:	7f3b      	ldrb	r3, [r7, #28]
 8000784:	2bff      	cmp	r3, #255	; 0xff
 8000786:	d02d      	beq.n	80007e4 <main+0xd0>
      
      // call Checksum function to retrieve computed checksum of the buffer's payload
      uint16_t computedChecksum = UBX_M8N_CHECKSUM(GPS_BUFFER, BUFFER_SIZE);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	2124      	movs	r1, #36	; 0x24
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe78 	bl	8000484 <UBX_M8N_CHECKSUM>
 8000794:	4603      	mov	r3, r0
 8000796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      // expected checksum value is the last 2 bytes of the buffer
      uint16_t expectedChecksum = (GPS_BUFFER[BUFFER_SIZE - 2]<<8) | GPS_BUFFER[BUFFER_SIZE - 1];
 800079a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      // if computed checksum = expected checksum, then data is valid
      if (computedChecksum == expectedChecksum) {
 80007b0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80007b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d10f      	bne.n	80007dc <main+0xc8>
        UBX_M8N_NAV_POSLLH_Parsing(GPS_BUFFER, &data);					      // parses data
 80007bc:	463a      	mov	r2, r7
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fe8a 	bl	80004de <UBX_M8N_NAV_POSLLH_Parsing>
        HAL_UART_Transmit(&huart2, GPS_BUFFER, BUFFER_SIZE, HAL_MAX_DELAY);    // transmit data to pc through UART (for testing)
 80007ca:	f107 011c 	add.w	r1, r7, #28
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2224      	movs	r2, #36	; 0x24
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <main+0xe4>)
 80007d6:	f002 fb87 	bl	8002ee8 <HAL_UART_Transmit>
 80007da:	e006      	b.n	80007ea <main+0xd6>
      } else {  
        // The data received from GPS is invalid
        printf("The checksum is invalid!\r\n");
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <main+0xe8>)
 80007de:	f002 fdf9 	bl	80033d4 <puts>
 80007e2:	e002      	b.n	80007ea <main+0xd6>
      }
    } else {
      // The GPS does not have data to send over  
      printf("There is no data!\r\n");
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <main+0xec>)
 80007e6:	f002 fdf5 	bl	80033d4 <puts>
    }

    HAL_Delay(500);
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f000 fae7 	bl	8000dc0 <HAL_Delay>
	  GPS_BUFFER[0] = GPS_DATA_REGISTER;
 80007f2:	e79e      	b.n	8000732 <main+0x1e>
 80007f4:	200000d4 	.word	0x200000d4
 80007f8:	20000128 	.word	0x20000128
 80007fc:	08003cfc 	.word	0x08003cfc
 8000800:	08003d18 	.word	0x08003d18

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b092      	sub	sp, #72	; 0x48
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fd68 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <SystemClock_Config+0x8c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <SystemClock_Config+0x8c>)
 8000830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000834:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000836:	2310      	movs	r3, #16
 8000838:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000842:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fd45 	bl	80022e0 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800085c:	f000 f894 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f861 	bl	8002940 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000884:	f000 f880 	bl	8000988 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3748      	adds	r7, #72	; 0x48
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40007000 	.word	0x40007000

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f000 fd0b 	bl	80012ec <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f854 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000d4 	.word	0x200000d4
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f002 fa8e 	bl	8002e48 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f829 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000128 	.word	0x20000128
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_GPIO_Init+0x40>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <MX_GPIO_Init+0x40>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_GPIO_Init+0x40>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_GPIO_Init+0x40>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <MX_GPIO_Init+0x40>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_GPIO_Init+0x40>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_MspInit+0x58>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_MspInit+0x58>)
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	6253      	str	r3, [r2, #36]	; 0x24
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_MspInit+0x58>)
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x58>)
 80009b4:	6a1b      	ldr	r3, [r3, #32]
 80009b6:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_MspInit+0x58>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6213      	str	r3, [r2, #32]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x58>)
 80009c0:	6a1b      	ldr	r3, [r3, #32]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x58>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_MspInit+0x58>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6253      	str	r3, [r2, #36]	; 0x24
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_MspInit+0x58>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x7c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d128      	bne.n	8000a64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a48:	f000 fac0 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a56:	6253      	str	r3, [r2, #36]	; 0x24
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_I2C_MspInit+0x80>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x7c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d127      	bne.n	8000aea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6253      	str	r3, [r2, #36]	; 0x24
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_UART_MspInit+0x80>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aca:	230c      	movs	r3, #12
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ada:	2307      	movs	r3, #7
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_MspInit+0x84>)
 8000ae6:	f000 fa71 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f91f 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e00a      	b.n	8000b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b60:	f3af 8000 	nop.w
 8000b64:	4601      	mov	r1, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	b2ca      	uxtb	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbf0      	blt.n	8000b60 <_read+0x12>
  }

  return len;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e009      	b.n	8000bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	60ba      	str	r2, [r7, #8]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf1      	blt.n	8000b9a <_write+0x12>
  }
  return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_close>:

int _close(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <_isatty>:

int _isatty(int file)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f002 fb20 	bl	8003294 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20014000 	.word	0x20014000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000170 	.word	0x20000170
 8000c88:	20000188 	.word	0x20000188

08000c8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff fff8 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb4:	4c09      	ldr	r4, [pc, #36]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 faed 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fd25 	bl	8000714 <main>
  bx lr
 8000cca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000cd4:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 8000cd8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000cdc:	20000188 	.word	0x20000188

08000ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_IRQHandler>

08000ce2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f939 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f80e 	bl	8000d14 <HAL_InitTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e001      	b.n	8000d08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d04:	f7ff fe46 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_InitTick+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d022      	beq.n	8000d6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_InitTick+0x6c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_InitTick+0x68>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f938 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10f      	bne.n	8000d68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	d809      	bhi.n	8000d62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295
 8000d56:	f000 f910 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_InitTick+0x70>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e004      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e001      	b.n	8000d72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000050 	.word	0x20000050
 8000d80:	20000048 	.word	0x20000048
 8000d84:	2000004c 	.word	0x2000004c

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000174 	.word	0x20000174
 8000da8:	20000050 	.word	0x20000050

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000174 	.word	0x20000174

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff fff0 	bl	8000dac <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d004      	beq.n	8000de4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_Delay+0x40>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de4:	bf00      	nop
 8000de6:	f7ff ffe1 	bl	8000dac <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d8f7      	bhi.n	8000de6 <HAL_Delay+0x26>
  {
  }
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000050 	.word	0x20000050

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff90 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff49 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe2:	e160      	b.n	80012a6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8152 	beq.w	80012a0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d005      	beq.n	8001014 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001010:	2b02      	cmp	r3, #2
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 0201 	and.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b03      	cmp	r3, #3
 8001080:	d017      	beq.n	80010b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0203 	and.w	r2, r3, #3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80ac 	beq.w	80012a0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_GPIO_Init+0x2fc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d025      	beq.n	80011d8 <HAL_GPIO_Init+0x20c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d01f      	beq.n	80011d4 <HAL_GPIO_Init+0x208>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d019      	beq.n	80011d0 <HAL_GPIO_Init+0x204>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x200>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x310>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1fc>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x314>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1f8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x318>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1f4>
 80011bc:	2306      	movs	r3, #6
 80011be:	e00c      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011c0:	2307      	movs	r3, #7
 80011c2:	e00a      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011c4:	2305      	movs	r3, #5
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x20e>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011ea:	4937      	ldr	r1, [pc, #220]	; (80012c8 <HAL_GPIO_Init+0x2fc>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800121c:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001246:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f ae97 	bne.w	8000fe4 <HAL_GPIO_Init+0x18>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e12b      	b.n	8001556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fb6c 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2224      	movs	r2, #36	; 0x24
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001350:	f001 fcf2 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8001354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a81      	ldr	r2, [pc, #516]	; (8001560 <HAL_I2C_Init+0x274>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d807      	bhi.n	8001370 <HAL_I2C_Init+0x84>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_I2C_Init+0x278>)
 8001364:	4293      	cmp	r3, r2
 8001366:	bf94      	ite	ls
 8001368:	2301      	movls	r3, #1
 800136a:	2300      	movhi	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	e006      	b.n	800137e <HAL_I2C_Init+0x92>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4a7d      	ldr	r2, [pc, #500]	; (8001568 <HAL_I2C_Init+0x27c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	bf94      	ite	ls
 8001378:	2301      	movls	r3, #1
 800137a:	2300      	movhi	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0e7      	b.n	8001556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a78      	ldr	r2, [pc, #480]	; (800156c <HAL_I2C_Init+0x280>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <HAL_I2C_Init+0x274>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d802      	bhi.n	80013c0 <HAL_I2C_Init+0xd4>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3301      	adds	r3, #1
 80013be:	e009      	b.n	80013d4 <HAL_I2C_Init+0xe8>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4a69      	ldr	r2, [pc, #420]	; (8001570 <HAL_I2C_Init+0x284>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	3301      	adds	r3, #1
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	430b      	orrs	r3, r1
 80013da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	495c      	ldr	r1, [pc, #368]	; (8001560 <HAL_I2C_Init+0x274>)
 80013f0:	428b      	cmp	r3, r1
 80013f2:	d819      	bhi.n	8001428 <HAL_I2C_Init+0x13c>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e59      	subs	r1, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001402:	1c59      	adds	r1, r3, #1
 8001404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001408:	400b      	ands	r3, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <HAL_I2C_Init+0x138>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e59      	subs	r1, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fbb1 f3f3 	udiv	r3, r1, r3
 800141c:	3301      	adds	r3, #1
 800141e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001422:	e051      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001424:	2304      	movs	r3, #4
 8001426:	e04f      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_I2C_Init+0x168>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e012      	b.n	800147a <HAL_I2C_Init+0x18e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1e58      	subs	r0, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6859      	ldr	r1, [r3, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	0099      	lsls	r1, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	fbb0 f3f3 	udiv	r3, r0, r3
 800146a:	3301      	adds	r3, #1
 800146c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Init+0x196>
 800147e:	2301      	movs	r3, #1
 8001480:	e022      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10e      	bne.n	80014a8 <HAL_I2C_Init+0x1bc>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e58      	subs	r0, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6859      	ldr	r1, [r3, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	440b      	add	r3, r1
 8001498:	fbb0 f3f3 	udiv	r3, r0, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	e00f      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	0099      	lsls	r1, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	6809      	ldr	r1, [r1, #0]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6911      	ldr	r1, [r2, #16]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68d2      	ldr	r2, [r2, #12]
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	000186a0 	.word	0x000186a0
 8001564:	001e847f 	.word	0x001e847f
 8001568:	003d08ff 	.word	0x003d08ff
 800156c:	431bde83 	.word	0x431bde83
 8001570:	10624dd3 	.word	0x10624dd3

08001574 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	461a      	mov	r2, r3
 8001580:	460b      	mov	r3, r1
 8001582:	817b      	strh	r3, [r7, #10]
 8001584:	4613      	mov	r3, r2
 8001586:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fc10 	bl	8000dac <HAL_GetTick>
 800158c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b20      	cmp	r3, #32
 8001598:	f040 80e0 	bne.w	800175c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2319      	movs	r3, #25
 80015a2:	2201      	movs	r2, #1
 80015a4:	4970      	ldr	r1, [pc, #448]	; (8001768 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fc64 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	e0d3      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_I2C_Master_Transmit+0x50>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e0cc      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2221      	movs	r2, #33	; 0x21
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2210      	movs	r2, #16
 8001606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	893a      	ldrh	r2, [r7, #8]
 800161a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_I2C_Master_Transmit+0x1f8>)
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800162c:	8979      	ldrh	r1, [r7, #10]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 face 	bl	8001bd4 <I2C_MasterRequestWrite>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e08d      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001658:	e066      	b.n	8001728 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 fd22 	bl	80020a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b04      	cmp	r3, #4
 8001670:	d107      	bne.n	8001682 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001680:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06b      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d11b      	bne.n	80016fc <HAL_I2C_Master_Transmit+0x188>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d017      	beq.n	80016fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	6a39      	ldr	r1, [r7, #32]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 fd19 	bl	8002138 <I2C_WaitOnBTFFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00d      	beq.n	8001728 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	2b04      	cmp	r3, #4
 8001712:	d107      	bne.n	8001724 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001722:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e01a      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d194      	bne.n	800165a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	00100002 	.word	0x00100002
 800176c:	ffff0000 	.word	0xffff0000

08001770 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af02      	add	r7, sp, #8
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	461a      	mov	r2, r3
 800177c:	460b      	mov	r3, r1
 800177e:	817b      	strh	r3, [r7, #10]
 8001780:	4613      	mov	r3, r2
 8001782:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fb12 	bl	8000dac <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b20      	cmp	r3, #32
 8001794:	f040 8217 	bne.w	8001bc6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2319      	movs	r3, #25
 800179e:	2201      	movs	r2, #1
 80017a0:	497c      	ldr	r1, [pc, #496]	; (8001994 <HAL_I2C_Master_Receive+0x224>)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fb66 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
 80017b0:	e20a      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_I2C_Master_Receive+0x50>
 80017bc:	2302      	movs	r3, #2
 80017be:	e203      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d007      	beq.n	80017e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2222      	movs	r2, #34	; 0x22
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2210      	movs	r2, #16
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	893a      	ldrh	r2, [r7, #8]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a5c      	ldr	r2, [pc, #368]	; (8001998 <HAL_I2C_Master_Receive+0x228>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001828:	8979      	ldrh	r1, [r7, #10]
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fa52 	bl	8001cd8 <I2C_MasterRequestRead>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1c4      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d113      	bne.n	800186e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e198      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	2b01      	cmp	r3, #1
 8001874:	d11b      	bne.n	80018ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e178      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d11b      	bne.n	80018ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	e158      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001914:	e144      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	2b03      	cmp	r3, #3
 800191c:	f200 80f1 	bhi.w	8001b02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	2b01      	cmp	r3, #1
 8001926:	d123      	bne.n	8001970 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fc4b 	bl	80021c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e145      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800196e:	e117      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b02      	cmp	r3, #2
 8001976:	d14e      	bne.n	8001a16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197e:	2200      	movs	r2, #0
 8001980:	4906      	ldr	r1, [pc, #24]	; (800199c <HAL_I2C_Master_Receive+0x22c>)
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fa76 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e11a      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
 8001992:	bf00      	nop
 8001994:	00100002 	.word	0x00100002
 8001998:	ffff0000 	.word	0xffff0000
 800199c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a14:	e0c4      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	496c      	ldr	r1, [pc, #432]	; (8001bd0 <HAL_I2C_Master_Receive+0x460>)
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fa27 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0cb      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4955      	ldr	r1, [pc, #340]	; (8001bd0 <HAL_I2C_Master_Receive+0x460>)
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f9f9 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e09d      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b00:	e04e      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fb5e 	bl	80021c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e058      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d124      	bne.n	8001ba0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f aeb6 	bne.w	8001916 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00010004 	.word	0x00010004

08001bd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	460b      	mov	r3, r1
 8001be2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d006      	beq.n	8001bfe <I2C_MasterRequestWrite+0x2a>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d003      	beq.n	8001bfe <I2C_MasterRequestWrite+0x2a>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bfc:	d108      	bne.n	8001c10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00b      	b.n	8001c28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d107      	bne.n	8001c28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f91d 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4e:	d103      	bne.n	8001c58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e035      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c64:	d108      	bne.n	8001c78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e01b      	b.n	8001cb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	11db      	asrs	r3, r3, #7
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 0306 	and.w	r3, r3, #6
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f063 030f 	orn	r3, r3, #15
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <I2C_MasterRequestWrite+0xfc>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f966 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e010      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <I2C_MasterRequestWrite+0x100>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f956 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	00010008 	.word	0x00010008
 8001cd4:	00010002 	.word	0x00010002

08001cd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d006      	beq.n	8001d12 <I2C_MasterRequestRead+0x3a>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d003      	beq.n	8001d12 <I2C_MasterRequestRead+0x3a>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e00b      	b.n	8001d3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d107      	bne.n	8001d3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f893 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d103      	bne.n	8001d6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e079      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d78:	d108      	bne.n	8001d8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	e05f      	b.n	8001e4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	11db      	asrs	r3, r3, #7
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 0306 	and.w	r3, r3, #6
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f063 030f 	orn	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4930      	ldr	r1, [pc, #192]	; (8001e6c <I2C_MasterRequestRead+0x194>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f8dc 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e054      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4929      	ldr	r1, [pc, #164]	; (8001e70 <I2C_MasterRequestRead+0x198>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f8cc 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e044      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f831 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e26:	d103      	bne.n	8001e30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e017      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	11db      	asrs	r3, r3, #7
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0306 	and.w	r3, r3, #6
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 030e 	orn	r3, r3, #14
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <I2C_MasterRequestRead+0x198>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f888 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010008 	.word	0x00010008
 8001e70:	00010002 	.word	0x00010002

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e048      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d044      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7fe ff8d 	bl	8000dac <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d139      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10d      	bne.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	e00c      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d116      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e023      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d093      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f76:	e071      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d123      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e067      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d041      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7fe fee8 	bl	8000dac <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d136      	bne.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e00b      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e021      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10c      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e00b      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f af6d 	bne.w	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f8e3 	bl	8002282 <I2C_IsAcknowledgeFailed>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e034      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d028      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7fe fe6d 	bl	8000dac <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11d      	bne.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d016      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d1c3      	bne.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	e034      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f89b 	bl	8002282 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e034      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7fe fe25 	bl	8000dac <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11d      	bne.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d016      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d1c3      	bne.n	8002146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021d4:	e049      	b.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d119      	bne.n	8002218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0210 	mvn.w	r2, #16
 80021ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e030      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7fe fdc8 	bl	8000dac <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11d      	bne.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d016      	beq.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e007      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d1ae      	bne.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002298:	d11b      	bne.n	80022d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e31d      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fc:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d07b      	beq.n	800240a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d006      	beq.n	8002326 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d10f      	bne.n	800233e <HAL_RCC_OscConfig+0x5e>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d10b      	bne.n	800233e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002326:	4b87      	ldr	r3, [pc, #540]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d06a      	beq.n	8002408 <HAL_RCC_OscConfig+0x128>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d166      	bne.n	8002408 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e2f7      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e02d      	b.n	80023b0 <HAL_RCC_OscConfig+0xd0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x96>
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a78      	ldr	r2, [pc, #480]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0xd0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0xb8>
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a70      	ldr	r2, [pc, #448]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b6e      	ldr	r3, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xd0>
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a66      	ldr	r2, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fcf8 	bl	8000dac <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fcf4 	bl	8000dac <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2ad      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fce4 	bl	8000dac <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fce0 	bl	8000dac <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e299      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fa:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d05a      	beq.n	80024cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d119      	bne.n	8002456 <HAL_RCC_OscConfig+0x176>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002428:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x160>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e276      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	493d      	ldr	r1, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002454:	e03a      	b.n	80024cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d020      	beq.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCC_OscConfig+0x268>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fca2 	bl	8000dac <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fc9e 	bl	8000dac <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e257      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	492a      	ldr	r1, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e015      	b.n	80024cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_OscConfig+0x268>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fc81 	bl	8000dac <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fc7d 	bl	8000dac <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e236      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80b8 	beq.w	800264a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d170      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_OscConfig+0x218>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e21a      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002504:	429a      	cmp	r2, r3
 8002506:	d921      	bls.n	800254c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fc3b 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e208      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	4901      	ldr	r1, [pc, #4]	; (8002544 <HAL_RCC_OscConfig+0x264>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
 8002542:	e020      	b.n	8002586 <HAL_RCC_OscConfig+0x2a6>
 8002544:	40023800 	.word	0x40023800
 8002548:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254c:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4996      	ldr	r1, [pc, #600]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255e:	4b95      	ldr	r3, [pc, #596]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4991      	ldr	r1, [pc, #580]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fc06 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1d3      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	0b5b      	lsrs	r3, r3, #13
 800258c:	3301      	adds	r3, #1
 800258e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002596:	4a87      	ldr	r2, [pc, #540]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	0912      	lsrs	r2, r2, #4
 800259c:	f002 020f 	and.w	r2, r2, #15
 80025a0:	4985      	ldr	r1, [pc, #532]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025a2:	5c8a      	ldrb	r2, [r1, r2]
 80025a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025a6:	4a85      	ldr	r2, [pc, #532]	; (80027bc <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x4e0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fbb0 	bl	8000d14 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d045      	beq.n	800264a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	e1b5      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d029      	beq.n	800261e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ca:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x4e4>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fbec 	bl	8000dac <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d8:	f7fe fbe8 	bl	8000dac <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1a1      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	496c      	ldr	r1, [pc, #432]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4967      	ldr	r1, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x4e4>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fbc2 	bl	8000dac <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800262c:	f7fe fbbe 	bl	8000dac <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e177      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d030      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe fba2 	bl	8000dac <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe fb9e 	bl	8000dac <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e157      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800267e:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x38c>
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe fb8b 	bl	8000dac <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fb87 	bl	8000dac <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e140      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80b5 	beq.w	8002830 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6253      	str	r3, [r2, #36]	; 0x24
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fb4f 	bl	8000dac <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fb4b 	bl	8000dac <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e104      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x466>
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6353      	str	r3, [r2, #52]	; 0x34
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_OscConfig+0x4c2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x488>
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002758:	6353      	str	r3, [r2, #52]	; 0x34
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002764:	6353      	str	r3, [r2, #52]	; 0x34
 8002766:	e01c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4c2>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x4aa>
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277a:	6353      	str	r3, [r2, #52]	; 0x34
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800277e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6353      	str	r3, [r2, #52]	; 0x34
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x4c2>
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002794:	6353      	str	r3, [r2, #52]	; 0x34
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 800279c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d024      	beq.n	80027f4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7fe faff 	bl	8000dac <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b0:	e019      	b.n	80027e6 <HAL_RCC_OscConfig+0x506>
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08003d38 	.word	0x08003d38
 80027bc:	20000048 	.word	0x20000048
 80027c0:	2000004c 	.word	0x2000004c
 80027c4:	42470020 	.word	0x42470020
 80027c8:	42470680 	.word	0x42470680
 80027cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe faec 	bl	8000dac <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0a3      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e6:	4b54      	ldr	r3, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4f0>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe fada 	bl	8000dac <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fad6 	bl	8000dac <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e08d      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d079      	beq.n	800292c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d056      	beq.n	80028ec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b02      	cmp	r3, #2
 8002844:	d13b      	bne.n	80028be <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCC_OscConfig+0x65c>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe faae 	bl	8000dac <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe faaa 	bl	8000dac <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e063      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4319      	orrs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	430b      	orrs	r3, r1
 800288a:	492b      	ldr	r1, [pc, #172]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x65c>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe fa89 	bl	8000dac <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fa85 	bl	8000dac <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e03e      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x5be>
 80028bc:	e036      	b.n	800292c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b1f      	ldr	r3, [pc, #124]	; (800293c <HAL_RCC_OscConfig+0x65c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fa72 	bl	8000dac <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fa6e 	bl	8000dac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e027      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x5ec>
 80028ea:	e01f      	b.n	800292c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01a      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_RCC_OscConfig+0x658>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	429a      	cmp	r2, r3
 800290a:	d10d      	bne.n	8002928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	42470060 	.word	0x42470060

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e11a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d919      	bls.n	8002996 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_ClockConfig+0x34>
 8002968:	4b8a      	ldr	r3, [pc, #552]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a89      	ldr	r2, [pc, #548]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0201 	bic.w	r2, r3, #1
 800297c:	4985      	ldr	r1, [pc, #532]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002984:	4b83      	ldr	r3, [pc, #524]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0f9      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a2:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	497a      	ldr	r1, [pc, #488]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 808e 	beq.w	8002ade <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ca:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0d7      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0cb      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0bf      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0b7      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	495c      	ldr	r1, [pc, #368]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9be 	bl	8000dac <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe f9b6 	bl	8000dac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e09b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xfc>
 8002a5e:	e03e      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe f99f 	bl	8000dac <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e084      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x12a>
 8002a8c:	e027      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d11d      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe f988 	bl	8000dac <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e06d      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x158>
 8002aba:	e010      	b.n	8002ade <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe f976 	bl	8000dac <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e05b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d219      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_ClockConfig+0x1be>
 8002af2:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	4923      	ldr	r1, [pc, #140]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_ClockConfig+0x254>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e034      	b.n	8002b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4917      	ldr	r1, [pc, #92]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	490f      	ldr	r1, [pc, #60]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b5e:	f000 f823 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_ClockConfig+0x258>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	490b      	ldr	r1, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b70:	5ccb      	ldrb	r3, [r1, r3]
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f8c8 	bl	8000d14 <HAL_InitTick>
 8002b84:	4603      	mov	r3, r0
 8002b86:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b88:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08003d38 	.word	0x08003d38
 8002ba0:	20000048 	.word	0x20000048
 8002ba4:	2000004c 	.word	0x2000004c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b08e      	sub	sp, #56	; 0x38
 8002bae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	f200 8092 	bhi.w	8002cea <HAL_RCC_GetSysClockFreq+0x142>
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x28>
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x2e>
 8002bce:	e08c      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x170>)
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bd4:	e097      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bda:	e094      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	0c9b      	lsrs	r3, r3, #18
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x178>)
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	0d9b      	lsrs	r3, r3, #22
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d021      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	2200      	movs	r2, #0
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8002c0c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c10:	464a      	mov	r2, r9
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	2300      	movs	r3, #0
 8002c18:	4644      	mov	r4, r8
 8002c1a:	fb04 f303 	mul.w	r3, r4, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x174>)
 8002c22:	4644      	mov	r4, r8
 8002c24:	fba4 0102 	umull	r0, r1, r4, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2200      	movs	r2, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	617a      	str	r2, [r7, #20]
 8002c34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c38:	f7fd faa0 	bl	800017c <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	e04e      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	469a      	mov	sl, r3
 8002c4c:	4693      	mov	fp, r2
 8002c4e:	4652      	mov	r2, sl
 8002c50:	465b      	mov	r3, fp
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c82:	ebb2 0408 	subs.w	r4, r2, r8
 8002c86:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	00eb      	lsls	r3, r5, #3
 8002c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	eb45 030b 	adc.w	r3, r5, fp
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	60fa      	str	r2, [r7, #12]
 8002cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd8:	f7fd fa50 	bl	800017c <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ce8:	e00d      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0b5b      	lsrs	r3, r3, #13
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3738      	adds	r7, #56	; 0x38
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	016e3600 	.word	0x016e3600
 8002d20:	08003d2c 	.word	0x08003d2c

08002d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	20000048 	.word	0x20000048

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff2 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08003d48 	.word	0x08003d48

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0adb      	lsrs	r3, r3, #11
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08003d48 	.word	0x08003d48

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d12c      	bne.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002da0:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e016      	b.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6253      	str	r3, [r2, #36]	; 0x24
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002dd8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002dec:	d105      	bne.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df4:	d101      	bne.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002df6:	2301      	movs	r3, #1
 8002df8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0201 	bic.w	r2, r3, #1
 8002e14:	490b      	ldr	r1, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e042      	b.n	8002ee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fe02 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f91d 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d16d      	bne.n	8002fe4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_UART_Transmit+0x2c>
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e066      	b.n	8002fe6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f26:	f7fd ff41 	bl	8000dac <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d108      	bne.n	8002f54 <HAL_UART_Transmit+0x6c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e003      	b.n	8002f5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f5c:	e02a      	b.n	8002fb4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f840 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e036      	b.n	8002fe6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3302      	adds	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	e007      	b.n	8002fa6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cf      	bne.n	8002f5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f810 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b090      	sub	sp, #64	; 0x40
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	e050      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d04c      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
 800300e:	f7fd fecd 	bl	8000dac <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301a:	429a      	cmp	r2, r3
 800301c:	d241      	bcs.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303e:	637a      	str	r2, [r7, #52]	; 0x34
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	613b      	str	r3, [r7, #16]
   return(result);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003072:	623a      	str	r2, [r7, #32]
 8003074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	69f9      	ldr	r1, [r7, #28]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e5      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d09f      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3740      	adds	r7, #64	; 0x40
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800310c:	f023 030c 	bic.w	r3, r3, #12
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a55      	ldr	r2, [pc, #340]	; (800328c <UART_SetConfig+0x1c0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d103      	bne.n	8003142 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800313a:	f7ff fe11 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	e002      	b.n	8003148 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003142:	f7ff fdf9 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003146:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003150:	d14c      	bne.n	80031ec <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	4a49      	ldr	r2, [pc, #292]	; (8003290 <UART_SetConfig+0x1c4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	0119      	lsls	r1, r3, #4
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <UART_SetConfig+0x1c4>)
 800318a:	fba3 0302 	umull	r0, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2064      	movs	r0, #100	; 0x64
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <UART_SetConfig+0x1c4>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031aa:	4419      	add	r1, r3
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <UART_SetConfig+0x1c4>)
 80031c4:	fba3 0302 	umull	r0, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2064      	movs	r0, #100	; 0x64
 80031cc:	fb00 f303 	mul.w	r3, r0, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3332      	adds	r3, #50	; 0x32
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <UART_SetConfig+0x1c4>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	440a      	add	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ea:	e04a      	b.n	8003282 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <UART_SetConfig+0x1c4>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	0119      	lsls	r1, r3, #4
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <UART_SetConfig+0x1c4>)
 8003224:	fba3 0302 	umull	r0, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2064      	movs	r0, #100	; 0x64
 800322c:	fb00 f303 	mul.w	r3, r0, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <UART_SetConfig+0x1c4>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003242:	4419      	add	r1, r3
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009a      	lsls	r2, r3, #2
 800324e:	441a      	add	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	fbb2 f2f3 	udiv	r2, r2, r3
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x1c4>)
 800325c:	fba3 0302 	umull	r0, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2064      	movs	r0, #100	; 0x64
 8003264:	fb00 f303 	mul.w	r3, r0, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x1c4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	440a      	add	r2, r1
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40013800 	.word	0x40013800
 8003290:	51eb851f 	.word	0x51eb851f

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000054 	.word	0x20000054

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2600      	movs	r6, #0
 80032a4:	4d0c      	ldr	r5, [pc, #48]	; (80032d8 <__libc_init_array+0x38>)
 80032a6:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	f000 fd18 	bl	8003ce4 <_init>
 80032b4:	2600      	movs	r6, #0
 80032b6:	4d0a      	ldr	r5, [pc, #40]	; (80032e0 <__libc_init_array+0x40>)
 80032b8:	4c0a      	ldr	r4, [pc, #40]	; (80032e4 <__libc_init_array+0x44>)
 80032ba:	1b64      	subs	r4, r4, r5
 80032bc:	10a4      	asrs	r4, r4, #2
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003dbc 	.word	0x08003dbc
 80032dc:	08003dbc 	.word	0x08003dbc
 80032e0:	08003dbc 	.word	0x08003dbc
 80032e4:	08003dc0 	.word	0x08003dc0

080032e8 <memset>:
 80032e8:	4603      	mov	r3, r0
 80032ea:	4402      	add	r2, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <_puts_r>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	460e      	mov	r6, r1
 80032fc:	4605      	mov	r5, r0
 80032fe:	b118      	cbz	r0, 8003308 <_puts_r+0x10>
 8003300:	6983      	ldr	r3, [r0, #24]
 8003302:	b90b      	cbnz	r3, 8003308 <_puts_r+0x10>
 8003304:	f000 fa44 	bl	8003790 <__sinit>
 8003308:	69ab      	ldr	r3, [r5, #24]
 800330a:	68ac      	ldr	r4, [r5, #8]
 800330c:	b913      	cbnz	r3, 8003314 <_puts_r+0x1c>
 800330e:	4628      	mov	r0, r5
 8003310:	f000 fa3e 	bl	8003790 <__sinit>
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <_puts_r+0xd0>)
 8003316:	429c      	cmp	r4, r3
 8003318:	d120      	bne.n	800335c <_puts_r+0x64>
 800331a:	686c      	ldr	r4, [r5, #4]
 800331c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d405      	bmi.n	800332e <_puts_r+0x36>
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	0598      	lsls	r0, r3, #22
 8003326:	d402      	bmi.n	800332e <_puts_r+0x36>
 8003328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332a:	f000 facf 	bl	80038cc <__retarget_lock_acquire_recursive>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	0719      	lsls	r1, r3, #28
 8003332:	d51d      	bpl.n	8003370 <_puts_r+0x78>
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	b1db      	cbz	r3, 8003370 <_puts_r+0x78>
 8003338:	3e01      	subs	r6, #1
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003340:	3b01      	subs	r3, #1
 8003342:	60a3      	str	r3, [r4, #8]
 8003344:	bb39      	cbnz	r1, 8003396 <_puts_r+0x9e>
 8003346:	2b00      	cmp	r3, #0
 8003348:	da38      	bge.n	80033bc <_puts_r+0xc4>
 800334a:	4622      	mov	r2, r4
 800334c:	210a      	movs	r1, #10
 800334e:	4628      	mov	r0, r5
 8003350:	f000 f848 	bl	80033e4 <__swbuf_r>
 8003354:	3001      	adds	r0, #1
 8003356:	d011      	beq.n	800337c <_puts_r+0x84>
 8003358:	250a      	movs	r5, #10
 800335a:	e011      	b.n	8003380 <_puts_r+0x88>
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <_puts_r+0xd4>)
 800335e:	429c      	cmp	r4, r3
 8003360:	d101      	bne.n	8003366 <_puts_r+0x6e>
 8003362:	68ac      	ldr	r4, [r5, #8]
 8003364:	e7da      	b.n	800331c <_puts_r+0x24>
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <_puts_r+0xd8>)
 8003368:	429c      	cmp	r4, r3
 800336a:	bf08      	it	eq
 800336c:	68ec      	ldreq	r4, [r5, #12]
 800336e:	e7d5      	b.n	800331c <_puts_r+0x24>
 8003370:	4621      	mov	r1, r4
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f888 	bl	8003488 <__swsetup_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	d0dd      	beq.n	8003338 <_puts_r+0x40>
 800337c:	f04f 35ff 	mov.w	r5, #4294967295
 8003380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003382:	07da      	lsls	r2, r3, #31
 8003384:	d405      	bmi.n	8003392 <_puts_r+0x9a>
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	d402      	bmi.n	8003392 <_puts_r+0x9a>
 800338c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800338e:	f000 fa9e 	bl	80038ce <__retarget_lock_release_recursive>
 8003392:	4628      	mov	r0, r5
 8003394:	bd70      	pop	{r4, r5, r6, pc}
 8003396:	2b00      	cmp	r3, #0
 8003398:	da04      	bge.n	80033a4 <_puts_r+0xac>
 800339a:	69a2      	ldr	r2, [r4, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	dc06      	bgt.n	80033ae <_puts_r+0xb6>
 80033a0:	290a      	cmp	r1, #10
 80033a2:	d004      	beq.n	80033ae <_puts_r+0xb6>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	6022      	str	r2, [r4, #0]
 80033aa:	7019      	strb	r1, [r3, #0]
 80033ac:	e7c5      	b.n	800333a <_puts_r+0x42>
 80033ae:	4622      	mov	r2, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f817 	bl	80033e4 <__swbuf_r>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d1bf      	bne.n	800333a <_puts_r+0x42>
 80033ba:	e7df      	b.n	800337c <_puts_r+0x84>
 80033bc:	250a      	movs	r5, #10
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	6022      	str	r2, [r4, #0]
 80033c4:	701d      	strb	r5, [r3, #0]
 80033c6:	e7db      	b.n	8003380 <_puts_r+0x88>
 80033c8:	08003d74 	.word	0x08003d74
 80033cc:	08003d94 	.word	0x08003d94
 80033d0:	08003d54 	.word	0x08003d54

080033d4 <puts>:
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <puts+0xc>)
 80033d6:	4601      	mov	r1, r0
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	f7ff bf8d 	b.w	80032f8 <_puts_r>
 80033de:	bf00      	nop
 80033e0:	20000054 	.word	0x20000054

080033e4 <__swbuf_r>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	460e      	mov	r6, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	4605      	mov	r5, r0
 80033ec:	b118      	cbz	r0, 80033f6 <__swbuf_r+0x12>
 80033ee:	6983      	ldr	r3, [r0, #24]
 80033f0:	b90b      	cbnz	r3, 80033f6 <__swbuf_r+0x12>
 80033f2:	f000 f9cd 	bl	8003790 <__sinit>
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <__swbuf_r+0x98>)
 80033f8:	429c      	cmp	r4, r3
 80033fa:	d12b      	bne.n	8003454 <__swbuf_r+0x70>
 80033fc:	686c      	ldr	r4, [r5, #4]
 80033fe:	69a3      	ldr	r3, [r4, #24]
 8003400:	60a3      	str	r3, [r4, #8]
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	071a      	lsls	r2, r3, #28
 8003406:	d52f      	bpl.n	8003468 <__swbuf_r+0x84>
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	b36b      	cbz	r3, 8003468 <__swbuf_r+0x84>
 800340c:	6923      	ldr	r3, [r4, #16]
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	b2f6      	uxtb	r6, r6
 8003412:	1ac0      	subs	r0, r0, r3
 8003414:	6963      	ldr	r3, [r4, #20]
 8003416:	4637      	mov	r7, r6
 8003418:	4283      	cmp	r3, r0
 800341a:	dc04      	bgt.n	8003426 <__swbuf_r+0x42>
 800341c:	4621      	mov	r1, r4
 800341e:	4628      	mov	r0, r5
 8003420:	f000 f922 	bl	8003668 <_fflush_r>
 8003424:	bb30      	cbnz	r0, 8003474 <__swbuf_r+0x90>
 8003426:	68a3      	ldr	r3, [r4, #8]
 8003428:	3001      	adds	r0, #1
 800342a:	3b01      	subs	r3, #1
 800342c:	60a3      	str	r3, [r4, #8]
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	6022      	str	r2, [r4, #0]
 8003434:	701e      	strb	r6, [r3, #0]
 8003436:	6963      	ldr	r3, [r4, #20]
 8003438:	4283      	cmp	r3, r0
 800343a:	d004      	beq.n	8003446 <__swbuf_r+0x62>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	07db      	lsls	r3, r3, #31
 8003440:	d506      	bpl.n	8003450 <__swbuf_r+0x6c>
 8003442:	2e0a      	cmp	r6, #10
 8003444:	d104      	bne.n	8003450 <__swbuf_r+0x6c>
 8003446:	4621      	mov	r1, r4
 8003448:	4628      	mov	r0, r5
 800344a:	f000 f90d 	bl	8003668 <_fflush_r>
 800344e:	b988      	cbnz	r0, 8003474 <__swbuf_r+0x90>
 8003450:	4638      	mov	r0, r7
 8003452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <__swbuf_r+0x9c>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d101      	bne.n	800345e <__swbuf_r+0x7a>
 800345a:	68ac      	ldr	r4, [r5, #8]
 800345c:	e7cf      	b.n	80033fe <__swbuf_r+0x1a>
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <__swbuf_r+0xa0>)
 8003460:	429c      	cmp	r4, r3
 8003462:	bf08      	it	eq
 8003464:	68ec      	ldreq	r4, [r5, #12]
 8003466:	e7ca      	b.n	80033fe <__swbuf_r+0x1a>
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f80c 	bl	8003488 <__swsetup_r>
 8003470:	2800      	cmp	r0, #0
 8003472:	d0cb      	beq.n	800340c <__swbuf_r+0x28>
 8003474:	f04f 37ff 	mov.w	r7, #4294967295
 8003478:	e7ea      	b.n	8003450 <__swbuf_r+0x6c>
 800347a:	bf00      	nop
 800347c:	08003d74 	.word	0x08003d74
 8003480:	08003d94 	.word	0x08003d94
 8003484:	08003d54 	.word	0x08003d54

08003488 <__swsetup_r>:
 8003488:	4b32      	ldr	r3, [pc, #200]	; (8003554 <__swsetup_r+0xcc>)
 800348a:	b570      	push	{r4, r5, r6, lr}
 800348c:	681d      	ldr	r5, [r3, #0]
 800348e:	4606      	mov	r6, r0
 8003490:	460c      	mov	r4, r1
 8003492:	b125      	cbz	r5, 800349e <__swsetup_r+0x16>
 8003494:	69ab      	ldr	r3, [r5, #24]
 8003496:	b913      	cbnz	r3, 800349e <__swsetup_r+0x16>
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f979 	bl	8003790 <__sinit>
 800349e:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <__swsetup_r+0xd0>)
 80034a0:	429c      	cmp	r4, r3
 80034a2:	d10f      	bne.n	80034c4 <__swsetup_r+0x3c>
 80034a4:	686c      	ldr	r4, [r5, #4]
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ac:	0719      	lsls	r1, r3, #28
 80034ae:	d42c      	bmi.n	800350a <__swsetup_r+0x82>
 80034b0:	06dd      	lsls	r5, r3, #27
 80034b2:	d411      	bmi.n	80034d8 <__swsetup_r+0x50>
 80034b4:	2309      	movs	r3, #9
 80034b6:	6033      	str	r3, [r6, #0]
 80034b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	e03e      	b.n	8003542 <__swsetup_r+0xba>
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <__swsetup_r+0xd4>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d101      	bne.n	80034ce <__swsetup_r+0x46>
 80034ca:	68ac      	ldr	r4, [r5, #8]
 80034cc:	e7eb      	b.n	80034a6 <__swsetup_r+0x1e>
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <__swsetup_r+0xd8>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	bf08      	it	eq
 80034d4:	68ec      	ldreq	r4, [r5, #12]
 80034d6:	e7e6      	b.n	80034a6 <__swsetup_r+0x1e>
 80034d8:	0758      	lsls	r0, r3, #29
 80034da:	d512      	bpl.n	8003502 <__swsetup_r+0x7a>
 80034dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034de:	b141      	cbz	r1, 80034f2 <__swsetup_r+0x6a>
 80034e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e4:	4299      	cmp	r1, r3
 80034e6:	d002      	beq.n	80034ee <__swsetup_r+0x66>
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 fa57 	bl	800399c <_free_r>
 80034ee:	2300      	movs	r3, #0
 80034f0:	6363      	str	r3, [r4, #52]	; 0x34
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	2300      	movs	r3, #0
 80034fc:	6063      	str	r3, [r4, #4]
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f043 0308 	orr.w	r3, r3, #8
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	b94b      	cbnz	r3, 8003522 <__swsetup_r+0x9a>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003518:	d003      	beq.n	8003522 <__swsetup_r+0x9a>
 800351a:	4621      	mov	r1, r4
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f9fd 	bl	800391c <__smakebuf_r>
 8003522:	89a0      	ldrh	r0, [r4, #12]
 8003524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003528:	f010 0301 	ands.w	r3, r0, #1
 800352c:	d00a      	beq.n	8003544 <__swsetup_r+0xbc>
 800352e:	2300      	movs	r3, #0
 8003530:	60a3      	str	r3, [r4, #8]
 8003532:	6963      	ldr	r3, [r4, #20]
 8003534:	425b      	negs	r3, r3
 8003536:	61a3      	str	r3, [r4, #24]
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	b943      	cbnz	r3, 800354e <__swsetup_r+0xc6>
 800353c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003540:	d1ba      	bne.n	80034b8 <__swsetup_r+0x30>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	0781      	lsls	r1, r0, #30
 8003546:	bf58      	it	pl
 8003548:	6963      	ldrpl	r3, [r4, #20]
 800354a:	60a3      	str	r3, [r4, #8]
 800354c:	e7f4      	b.n	8003538 <__swsetup_r+0xb0>
 800354e:	2000      	movs	r0, #0
 8003550:	e7f7      	b.n	8003542 <__swsetup_r+0xba>
 8003552:	bf00      	nop
 8003554:	20000054 	.word	0x20000054
 8003558:	08003d74 	.word	0x08003d74
 800355c:	08003d94 	.word	0x08003d94
 8003560:	08003d54 	.word	0x08003d54

08003564 <__sflush_r>:
 8003564:	898a      	ldrh	r2, [r1, #12]
 8003566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003568:	4605      	mov	r5, r0
 800356a:	0710      	lsls	r0, r2, #28
 800356c:	460c      	mov	r4, r1
 800356e:	d457      	bmi.n	8003620 <__sflush_r+0xbc>
 8003570:	684b      	ldr	r3, [r1, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	dc04      	bgt.n	8003580 <__sflush_r+0x1c>
 8003576:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	dc01      	bgt.n	8003580 <__sflush_r+0x1c>
 800357c:	2000      	movs	r0, #0
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003582:	2e00      	cmp	r6, #0
 8003584:	d0fa      	beq.n	800357c <__sflush_r+0x18>
 8003586:	2300      	movs	r3, #0
 8003588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800358c:	682f      	ldr	r7, [r5, #0]
 800358e:	602b      	str	r3, [r5, #0]
 8003590:	d032      	beq.n	80035f8 <__sflush_r+0x94>
 8003592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	075a      	lsls	r2, r3, #29
 8003598:	d505      	bpl.n	80035a6 <__sflush_r+0x42>
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	1ac0      	subs	r0, r0, r3
 800359e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035a0:	b10b      	cbz	r3, 80035a6 <__sflush_r+0x42>
 80035a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a4:	1ac0      	subs	r0, r0, r3
 80035a6:	2300      	movs	r3, #0
 80035a8:	4602      	mov	r2, r0
 80035aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ac:	4628      	mov	r0, r5
 80035ae:	6a21      	ldr	r1, [r4, #32]
 80035b0:	47b0      	blx	r6
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	d106      	bne.n	80035c6 <__sflush_r+0x62>
 80035b8:	6829      	ldr	r1, [r5, #0]
 80035ba:	291d      	cmp	r1, #29
 80035bc:	d82c      	bhi.n	8003618 <__sflush_r+0xb4>
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <__sflush_r+0x100>)
 80035c0:	40ca      	lsrs	r2, r1
 80035c2:	07d6      	lsls	r6, r2, #31
 80035c4:	d528      	bpl.n	8003618 <__sflush_r+0xb4>
 80035c6:	2200      	movs	r2, #0
 80035c8:	6062      	str	r2, [r4, #4]
 80035ca:	6922      	ldr	r2, [r4, #16]
 80035cc:	04d9      	lsls	r1, r3, #19
 80035ce:	6022      	str	r2, [r4, #0]
 80035d0:	d504      	bpl.n	80035dc <__sflush_r+0x78>
 80035d2:	1c42      	adds	r2, r0, #1
 80035d4:	d101      	bne.n	80035da <__sflush_r+0x76>
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	b903      	cbnz	r3, 80035dc <__sflush_r+0x78>
 80035da:	6560      	str	r0, [r4, #84]	; 0x54
 80035dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035de:	602f      	str	r7, [r5, #0]
 80035e0:	2900      	cmp	r1, #0
 80035e2:	d0cb      	beq.n	800357c <__sflush_r+0x18>
 80035e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d002      	beq.n	80035f2 <__sflush_r+0x8e>
 80035ec:	4628      	mov	r0, r5
 80035ee:	f000 f9d5 	bl	800399c <_free_r>
 80035f2:	2000      	movs	r0, #0
 80035f4:	6360      	str	r0, [r4, #52]	; 0x34
 80035f6:	e7c2      	b.n	800357e <__sflush_r+0x1a>
 80035f8:	6a21      	ldr	r1, [r4, #32]
 80035fa:	2301      	movs	r3, #1
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b0      	blx	r6
 8003600:	1c41      	adds	r1, r0, #1
 8003602:	d1c7      	bne.n	8003594 <__sflush_r+0x30>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0c4      	beq.n	8003594 <__sflush_r+0x30>
 800360a:	2b1d      	cmp	r3, #29
 800360c:	d001      	beq.n	8003612 <__sflush_r+0xae>
 800360e:	2b16      	cmp	r3, #22
 8003610:	d101      	bne.n	8003616 <__sflush_r+0xb2>
 8003612:	602f      	str	r7, [r5, #0]
 8003614:	e7b2      	b.n	800357c <__sflush_r+0x18>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	e7ae      	b.n	800357e <__sflush_r+0x1a>
 8003620:	690f      	ldr	r7, [r1, #16]
 8003622:	2f00      	cmp	r7, #0
 8003624:	d0aa      	beq.n	800357c <__sflush_r+0x18>
 8003626:	0793      	lsls	r3, r2, #30
 8003628:	bf18      	it	ne
 800362a:	2300      	movne	r3, #0
 800362c:	680e      	ldr	r6, [r1, #0]
 800362e:	bf08      	it	eq
 8003630:	694b      	ldreq	r3, [r1, #20]
 8003632:	1bf6      	subs	r6, r6, r7
 8003634:	600f      	str	r7, [r1, #0]
 8003636:	608b      	str	r3, [r1, #8]
 8003638:	2e00      	cmp	r6, #0
 800363a:	dd9f      	ble.n	800357c <__sflush_r+0x18>
 800363c:	4633      	mov	r3, r6
 800363e:	463a      	mov	r2, r7
 8003640:	4628      	mov	r0, r5
 8003642:	6a21      	ldr	r1, [r4, #32]
 8003644:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003648:	47e0      	blx	ip
 800364a:	2800      	cmp	r0, #0
 800364c:	dc06      	bgt.n	800365c <__sflush_r+0xf8>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	e790      	b.n	800357e <__sflush_r+0x1a>
 800365c:	4407      	add	r7, r0
 800365e:	1a36      	subs	r6, r6, r0
 8003660:	e7ea      	b.n	8003638 <__sflush_r+0xd4>
 8003662:	bf00      	nop
 8003664:	20400001 	.word	0x20400001

08003668 <_fflush_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	4605      	mov	r5, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b913      	cbnz	r3, 8003678 <_fflush_r+0x10>
 8003672:	2500      	movs	r5, #0
 8003674:	4628      	mov	r0, r5
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	b118      	cbz	r0, 8003682 <_fflush_r+0x1a>
 800367a:	6983      	ldr	r3, [r0, #24]
 800367c:	b90b      	cbnz	r3, 8003682 <_fflush_r+0x1a>
 800367e:	f000 f887 	bl	8003790 <__sinit>
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <_fflush_r+0x6c>)
 8003684:	429c      	cmp	r4, r3
 8003686:	d11b      	bne.n	80036c0 <_fflush_r+0x58>
 8003688:	686c      	ldr	r4, [r5, #4]
 800368a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ef      	beq.n	8003672 <_fflush_r+0xa>
 8003692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003694:	07d0      	lsls	r0, r2, #31
 8003696:	d404      	bmi.n	80036a2 <_fflush_r+0x3a>
 8003698:	0599      	lsls	r1, r3, #22
 800369a:	d402      	bmi.n	80036a2 <_fflush_r+0x3a>
 800369c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369e:	f000 f915 	bl	80038cc <__retarget_lock_acquire_recursive>
 80036a2:	4628      	mov	r0, r5
 80036a4:	4621      	mov	r1, r4
 80036a6:	f7ff ff5d 	bl	8003564 <__sflush_r>
 80036aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ac:	4605      	mov	r5, r0
 80036ae:	07da      	lsls	r2, r3, #31
 80036b0:	d4e0      	bmi.n	8003674 <_fflush_r+0xc>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	059b      	lsls	r3, r3, #22
 80036b6:	d4dd      	bmi.n	8003674 <_fflush_r+0xc>
 80036b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ba:	f000 f908 	bl	80038ce <__retarget_lock_release_recursive>
 80036be:	e7d9      	b.n	8003674 <_fflush_r+0xc>
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <_fflush_r+0x70>)
 80036c2:	429c      	cmp	r4, r3
 80036c4:	d101      	bne.n	80036ca <_fflush_r+0x62>
 80036c6:	68ac      	ldr	r4, [r5, #8]
 80036c8:	e7df      	b.n	800368a <_fflush_r+0x22>
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <_fflush_r+0x74>)
 80036cc:	429c      	cmp	r4, r3
 80036ce:	bf08      	it	eq
 80036d0:	68ec      	ldreq	r4, [r5, #12]
 80036d2:	e7da      	b.n	800368a <_fflush_r+0x22>
 80036d4:	08003d74 	.word	0x08003d74
 80036d8:	08003d94 	.word	0x08003d94
 80036dc:	08003d54 	.word	0x08003d54

080036e0 <std>:
 80036e0:	2300      	movs	r3, #0
 80036e2:	b510      	push	{r4, lr}
 80036e4:	4604      	mov	r4, r0
 80036e6:	e9c0 3300 	strd	r3, r3, [r0]
 80036ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ee:	6083      	str	r3, [r0, #8]
 80036f0:	8181      	strh	r1, [r0, #12]
 80036f2:	6643      	str	r3, [r0, #100]	; 0x64
 80036f4:	81c2      	strh	r2, [r0, #14]
 80036f6:	6183      	str	r3, [r0, #24]
 80036f8:	4619      	mov	r1, r3
 80036fa:	2208      	movs	r2, #8
 80036fc:	305c      	adds	r0, #92	; 0x5c
 80036fe:	f7ff fdf3 	bl	80032e8 <memset>
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <std+0x38>)
 8003704:	6224      	str	r4, [r4, #32]
 8003706:	6263      	str	r3, [r4, #36]	; 0x24
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <std+0x3c>)
 800370a:	62a3      	str	r3, [r4, #40]	; 0x28
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <std+0x40>)
 800370e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <std+0x44>)
 8003712:	6323      	str	r3, [r4, #48]	; 0x30
 8003714:	bd10      	pop	{r4, pc}
 8003716:	bf00      	nop
 8003718:	08003b75 	.word	0x08003b75
 800371c:	08003b97 	.word	0x08003b97
 8003720:	08003bcf 	.word	0x08003bcf
 8003724:	08003bf3 	.word	0x08003bf3

08003728 <_cleanup_r>:
 8003728:	4901      	ldr	r1, [pc, #4]	; (8003730 <_cleanup_r+0x8>)
 800372a:	f000 b8af 	b.w	800388c <_fwalk_reent>
 800372e:	bf00      	nop
 8003730:	08003669 	.word	0x08003669

08003734 <__sfmoreglue>:
 8003734:	2268      	movs	r2, #104	; 0x68
 8003736:	b570      	push	{r4, r5, r6, lr}
 8003738:	1e4d      	subs	r5, r1, #1
 800373a:	4355      	muls	r5, r2
 800373c:	460e      	mov	r6, r1
 800373e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003742:	f000 f993 	bl	8003a6c <_malloc_r>
 8003746:	4604      	mov	r4, r0
 8003748:	b140      	cbz	r0, 800375c <__sfmoreglue+0x28>
 800374a:	2100      	movs	r1, #0
 800374c:	e9c0 1600 	strd	r1, r6, [r0]
 8003750:	300c      	adds	r0, #12
 8003752:	60a0      	str	r0, [r4, #8]
 8003754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003758:	f7ff fdc6 	bl	80032e8 <memset>
 800375c:	4620      	mov	r0, r4
 800375e:	bd70      	pop	{r4, r5, r6, pc}

08003760 <__sfp_lock_acquire>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__sfp_lock_acquire+0x8>)
 8003762:	f000 b8b3 	b.w	80038cc <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	20000179 	.word	0x20000179

0800376c <__sfp_lock_release>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__sfp_lock_release+0x8>)
 800376e:	f000 b8ae 	b.w	80038ce <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	20000179 	.word	0x20000179

08003778 <__sinit_lock_acquire>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__sinit_lock_acquire+0x8>)
 800377a:	f000 b8a7 	b.w	80038cc <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	2000017a 	.word	0x2000017a

08003784 <__sinit_lock_release>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__sinit_lock_release+0x8>)
 8003786:	f000 b8a2 	b.w	80038ce <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	2000017a 	.word	0x2000017a

08003790 <__sinit>:
 8003790:	b510      	push	{r4, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	f7ff fff0 	bl	8003778 <__sinit_lock_acquire>
 8003798:	69a3      	ldr	r3, [r4, #24]
 800379a:	b11b      	cbz	r3, 80037a4 <__sinit+0x14>
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a0:	f7ff bff0 	b.w	8003784 <__sinit_lock_release>
 80037a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037a8:	6523      	str	r3, [r4, #80]	; 0x50
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <__sinit+0x68>)
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <__sinit+0x6c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	bf08      	it	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	4620      	mov	r0, r4
 80037ba:	bf08      	it	eq
 80037bc:	61a3      	streq	r3, [r4, #24]
 80037be:	f000 f81f 	bl	8003800 <__sfp>
 80037c2:	6060      	str	r0, [r4, #4]
 80037c4:	4620      	mov	r0, r4
 80037c6:	f000 f81b 	bl	8003800 <__sfp>
 80037ca:	60a0      	str	r0, [r4, #8]
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 f817 	bl	8003800 <__sfp>
 80037d2:	2200      	movs	r2, #0
 80037d4:	2104      	movs	r1, #4
 80037d6:	60e0      	str	r0, [r4, #12]
 80037d8:	6860      	ldr	r0, [r4, #4]
 80037da:	f7ff ff81 	bl	80036e0 <std>
 80037de:	2201      	movs	r2, #1
 80037e0:	2109      	movs	r1, #9
 80037e2:	68a0      	ldr	r0, [r4, #8]
 80037e4:	f7ff ff7c 	bl	80036e0 <std>
 80037e8:	2202      	movs	r2, #2
 80037ea:	2112      	movs	r1, #18
 80037ec:	68e0      	ldr	r0, [r4, #12]
 80037ee:	f7ff ff77 	bl	80036e0 <std>
 80037f2:	2301      	movs	r3, #1
 80037f4:	61a3      	str	r3, [r4, #24]
 80037f6:	e7d1      	b.n	800379c <__sinit+0xc>
 80037f8:	08003d50 	.word	0x08003d50
 80037fc:	08003729 	.word	0x08003729

08003800 <__sfp>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4607      	mov	r7, r0
 8003804:	f7ff ffac 	bl	8003760 <__sfp_lock_acquire>
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <__sfp+0x84>)
 800380a:	681e      	ldr	r6, [r3, #0]
 800380c:	69b3      	ldr	r3, [r6, #24]
 800380e:	b913      	cbnz	r3, 8003816 <__sfp+0x16>
 8003810:	4630      	mov	r0, r6
 8003812:	f7ff ffbd 	bl	8003790 <__sinit>
 8003816:	3648      	adds	r6, #72	; 0x48
 8003818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	d503      	bpl.n	8003828 <__sfp+0x28>
 8003820:	6833      	ldr	r3, [r6, #0]
 8003822:	b30b      	cbz	r3, 8003868 <__sfp+0x68>
 8003824:	6836      	ldr	r6, [r6, #0]
 8003826:	e7f7      	b.n	8003818 <__sfp+0x18>
 8003828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800382c:	b9d5      	cbnz	r5, 8003864 <__sfp+0x64>
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <__sfp+0x88>)
 8003830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003834:	60e3      	str	r3, [r4, #12]
 8003836:	6665      	str	r5, [r4, #100]	; 0x64
 8003838:	f000 f847 	bl	80038ca <__retarget_lock_init_recursive>
 800383c:	f7ff ff96 	bl	800376c <__sfp_lock_release>
 8003840:	2208      	movs	r2, #8
 8003842:	4629      	mov	r1, r5
 8003844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800384c:	6025      	str	r5, [r4, #0]
 800384e:	61a5      	str	r5, [r4, #24]
 8003850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003854:	f7ff fd48 	bl	80032e8 <memset>
 8003858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800385c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003860:	4620      	mov	r0, r4
 8003862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003864:	3468      	adds	r4, #104	; 0x68
 8003866:	e7d9      	b.n	800381c <__sfp+0x1c>
 8003868:	2104      	movs	r1, #4
 800386a:	4638      	mov	r0, r7
 800386c:	f7ff ff62 	bl	8003734 <__sfmoreglue>
 8003870:	4604      	mov	r4, r0
 8003872:	6030      	str	r0, [r6, #0]
 8003874:	2800      	cmp	r0, #0
 8003876:	d1d5      	bne.n	8003824 <__sfp+0x24>
 8003878:	f7ff ff78 	bl	800376c <__sfp_lock_release>
 800387c:	230c      	movs	r3, #12
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	e7ee      	b.n	8003860 <__sfp+0x60>
 8003882:	bf00      	nop
 8003884:	08003d50 	.word	0x08003d50
 8003888:	ffff0001 	.word	0xffff0001

0800388c <_fwalk_reent>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	4606      	mov	r6, r0
 8003892:	4688      	mov	r8, r1
 8003894:	2700      	movs	r7, #0
 8003896:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800389a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389e:	f1b9 0901 	subs.w	r9, r9, #1
 80038a2:	d505      	bpl.n	80038b0 <_fwalk_reent+0x24>
 80038a4:	6824      	ldr	r4, [r4, #0]
 80038a6:	2c00      	cmp	r4, #0
 80038a8:	d1f7      	bne.n	800389a <_fwalk_reent+0xe>
 80038aa:	4638      	mov	r0, r7
 80038ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b0:	89ab      	ldrh	r3, [r5, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d907      	bls.n	80038c6 <_fwalk_reent+0x3a>
 80038b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d003      	beq.n	80038c6 <_fwalk_reent+0x3a>
 80038be:	4629      	mov	r1, r5
 80038c0:	4630      	mov	r0, r6
 80038c2:	47c0      	blx	r8
 80038c4:	4307      	orrs	r7, r0
 80038c6:	3568      	adds	r5, #104	; 0x68
 80038c8:	e7e9      	b.n	800389e <_fwalk_reent+0x12>

080038ca <__retarget_lock_init_recursive>:
 80038ca:	4770      	bx	lr

080038cc <__retarget_lock_acquire_recursive>:
 80038cc:	4770      	bx	lr

080038ce <__retarget_lock_release_recursive>:
 80038ce:	4770      	bx	lr

080038d0 <__swhatbuf_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	460e      	mov	r6, r1
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	4614      	mov	r4, r2
 80038da:	2900      	cmp	r1, #0
 80038dc:	461d      	mov	r5, r3
 80038de:	b096      	sub	sp, #88	; 0x58
 80038e0:	da08      	bge.n	80038f4 <__swhatbuf_r+0x24>
 80038e2:	2200      	movs	r2, #0
 80038e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80038e8:	602a      	str	r2, [r5, #0]
 80038ea:	061a      	lsls	r2, r3, #24
 80038ec:	d410      	bmi.n	8003910 <__swhatbuf_r+0x40>
 80038ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f2:	e00e      	b.n	8003912 <__swhatbuf_r+0x42>
 80038f4:	466a      	mov	r2, sp
 80038f6:	f000 f9a3 	bl	8003c40 <_fstat_r>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	dbf1      	blt.n	80038e2 <__swhatbuf_r+0x12>
 80038fe:	9a01      	ldr	r2, [sp, #4]
 8003900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003908:	425a      	negs	r2, r3
 800390a:	415a      	adcs	r2, r3
 800390c:	602a      	str	r2, [r5, #0]
 800390e:	e7ee      	b.n	80038ee <__swhatbuf_r+0x1e>
 8003910:	2340      	movs	r3, #64	; 0x40
 8003912:	2000      	movs	r0, #0
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	b016      	add	sp, #88	; 0x58
 8003918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800391c <__smakebuf_r>:
 800391c:	898b      	ldrh	r3, [r1, #12]
 800391e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003920:	079d      	lsls	r5, r3, #30
 8003922:	4606      	mov	r6, r0
 8003924:	460c      	mov	r4, r1
 8003926:	d507      	bpl.n	8003938 <__smakebuf_r+0x1c>
 8003928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	6123      	str	r3, [r4, #16]
 8003930:	2301      	movs	r3, #1
 8003932:	6163      	str	r3, [r4, #20]
 8003934:	b002      	add	sp, #8
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	466a      	mov	r2, sp
 800393a:	ab01      	add	r3, sp, #4
 800393c:	f7ff ffc8 	bl	80038d0 <__swhatbuf_r>
 8003940:	9900      	ldr	r1, [sp, #0]
 8003942:	4605      	mov	r5, r0
 8003944:	4630      	mov	r0, r6
 8003946:	f000 f891 	bl	8003a6c <_malloc_r>
 800394a:	b948      	cbnz	r0, 8003960 <__smakebuf_r+0x44>
 800394c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003950:	059a      	lsls	r2, r3, #22
 8003952:	d4ef      	bmi.n	8003934 <__smakebuf_r+0x18>
 8003954:	f023 0303 	bic.w	r3, r3, #3
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	e7e3      	b.n	8003928 <__smakebuf_r+0xc>
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <__smakebuf_r+0x7c>)
 8003962:	62b3      	str	r3, [r6, #40]	; 0x28
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	6020      	str	r0, [r4, #0]
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	9b00      	ldr	r3, [sp, #0]
 8003970:	6120      	str	r0, [r4, #16]
 8003972:	6163      	str	r3, [r4, #20]
 8003974:	9b01      	ldr	r3, [sp, #4]
 8003976:	b15b      	cbz	r3, 8003990 <__smakebuf_r+0x74>
 8003978:	4630      	mov	r0, r6
 800397a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800397e:	f000 f971 	bl	8003c64 <_isatty_r>
 8003982:	b128      	cbz	r0, 8003990 <__smakebuf_r+0x74>
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	81a3      	strh	r3, [r4, #12]
 8003990:	89a0      	ldrh	r0, [r4, #12]
 8003992:	4305      	orrs	r5, r0
 8003994:	81a5      	strh	r5, [r4, #12]
 8003996:	e7cd      	b.n	8003934 <__smakebuf_r+0x18>
 8003998:	08003729 	.word	0x08003729

0800399c <_free_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4605      	mov	r5, r0
 80039a0:	2900      	cmp	r1, #0
 80039a2:	d040      	beq.n	8003a26 <_free_r+0x8a>
 80039a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a8:	1f0c      	subs	r4, r1, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfb8      	it	lt
 80039ae:	18e4      	addlt	r4, r4, r3
 80039b0:	f000 f97a 	bl	8003ca8 <__malloc_lock>
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <_free_r+0x8c>)
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	b933      	cbnz	r3, 80039c8 <_free_r+0x2c>
 80039ba:	6063      	str	r3, [r4, #4]
 80039bc:	6014      	str	r4, [r2, #0]
 80039be:	4628      	mov	r0, r5
 80039c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c4:	f000 b976 	b.w	8003cb4 <__malloc_unlock>
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	d908      	bls.n	80039de <_free_r+0x42>
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	1821      	adds	r1, r4, r0
 80039d0:	428b      	cmp	r3, r1
 80039d2:	bf01      	itttt	eq
 80039d4:	6819      	ldreq	r1, [r3, #0]
 80039d6:	685b      	ldreq	r3, [r3, #4]
 80039d8:	1809      	addeq	r1, r1, r0
 80039da:	6021      	streq	r1, [r4, #0]
 80039dc:	e7ed      	b.n	80039ba <_free_r+0x1e>
 80039de:	461a      	mov	r2, r3
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b10b      	cbz	r3, 80039e8 <_free_r+0x4c>
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d9fa      	bls.n	80039de <_free_r+0x42>
 80039e8:	6811      	ldr	r1, [r2, #0]
 80039ea:	1850      	adds	r0, r2, r1
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d10b      	bne.n	8003a08 <_free_r+0x6c>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	4401      	add	r1, r0
 80039f4:	1850      	adds	r0, r2, r1
 80039f6:	4283      	cmp	r3, r0
 80039f8:	6011      	str	r1, [r2, #0]
 80039fa:	d1e0      	bne.n	80039be <_free_r+0x22>
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4401      	add	r1, r0
 8003a02:	6011      	str	r1, [r2, #0]
 8003a04:	6053      	str	r3, [r2, #4]
 8003a06:	e7da      	b.n	80039be <_free_r+0x22>
 8003a08:	d902      	bls.n	8003a10 <_free_r+0x74>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	e7d6      	b.n	80039be <_free_r+0x22>
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	1821      	adds	r1, r4, r0
 8003a14:	428b      	cmp	r3, r1
 8003a16:	bf01      	itttt	eq
 8003a18:	6819      	ldreq	r1, [r3, #0]
 8003a1a:	685b      	ldreq	r3, [r3, #4]
 8003a1c:	1809      	addeq	r1, r1, r0
 8003a1e:	6021      	streq	r1, [r4, #0]
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	6054      	str	r4, [r2, #4]
 8003a24:	e7cb      	b.n	80039be <_free_r+0x22>
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	2000017c 	.word	0x2000017c

08003a2c <sbrk_aligned>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4e0e      	ldr	r6, [pc, #56]	; (8003a68 <sbrk_aligned+0x3c>)
 8003a30:	460c      	mov	r4, r1
 8003a32:	6831      	ldr	r1, [r6, #0]
 8003a34:	4605      	mov	r5, r0
 8003a36:	b911      	cbnz	r1, 8003a3e <sbrk_aligned+0x12>
 8003a38:	f000 f88c 	bl	8003b54 <_sbrk_r>
 8003a3c:	6030      	str	r0, [r6, #0]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f887 	bl	8003b54 <_sbrk_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d00a      	beq.n	8003a60 <sbrk_aligned+0x34>
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d007      	beq.n	8003a64 <sbrk_aligned+0x38>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 f87c 	bl	8003b54 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d101      	bne.n	8003a64 <sbrk_aligned+0x38>
 8003a60:	f04f 34ff 	mov.w	r4, #4294967295
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	20000180 	.word	0x20000180

08003a6c <_malloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	1ccd      	adds	r5, r1, #3
 8003a72:	f025 0503 	bic.w	r5, r5, #3
 8003a76:	3508      	adds	r5, #8
 8003a78:	2d0c      	cmp	r5, #12
 8003a7a:	bf38      	it	cc
 8003a7c:	250c      	movcc	r5, #12
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	4607      	mov	r7, r0
 8003a82:	db01      	blt.n	8003a88 <_malloc_r+0x1c>
 8003a84:	42a9      	cmp	r1, r5
 8003a86:	d905      	bls.n	8003a94 <_malloc_r+0x28>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a94:	4e2e      	ldr	r6, [pc, #184]	; (8003b50 <_malloc_r+0xe4>)
 8003a96:	f000 f907 	bl	8003ca8 <__malloc_lock>
 8003a9a:	6833      	ldr	r3, [r6, #0]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	bb34      	cbnz	r4, 8003aee <_malloc_r+0x82>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff ffc2 	bl	8003a2c <sbrk_aligned>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	d14d      	bne.n	8003b4a <_malloc_r+0xde>
 8003aae:	6834      	ldr	r4, [r6, #0]
 8003ab0:	4626      	mov	r6, r4
 8003ab2:	2e00      	cmp	r6, #0
 8003ab4:	d140      	bne.n	8003b38 <_malloc_r+0xcc>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4638      	mov	r0, r7
 8003abc:	eb04 0803 	add.w	r8, r4, r3
 8003ac0:	f000 f848 	bl	8003b54 <_sbrk_r>
 8003ac4:	4580      	cmp	r8, r0
 8003ac6:	d13a      	bne.n	8003b3e <_malloc_r+0xd2>
 8003ac8:	6821      	ldr	r1, [r4, #0]
 8003aca:	3503      	adds	r5, #3
 8003acc:	1a6d      	subs	r5, r5, r1
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	4638      	mov	r0, r7
 8003adc:	4629      	mov	r1, r5
 8003ade:	f7ff ffa5 	bl	8003a2c <sbrk_aligned>
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d02b      	beq.n	8003b3e <_malloc_r+0xd2>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	442b      	add	r3, r5
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	e00e      	b.n	8003b0c <_malloc_r+0xa0>
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	1b52      	subs	r2, r2, r5
 8003af2:	d41e      	bmi.n	8003b32 <_malloc_r+0xc6>
 8003af4:	2a0b      	cmp	r2, #11
 8003af6:	d916      	bls.n	8003b26 <_malloc_r+0xba>
 8003af8:	1961      	adds	r1, r4, r5
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	6025      	str	r5, [r4, #0]
 8003afe:	bf18      	it	ne
 8003b00:	6059      	strne	r1, [r3, #4]
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	bf08      	it	eq
 8003b06:	6031      	streq	r1, [r6, #0]
 8003b08:	5162      	str	r2, [r4, r5]
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f104 060b 	add.w	r6, r4, #11
 8003b12:	f000 f8cf 	bl	8003cb4 <__malloc_unlock>
 8003b16:	f026 0607 	bic.w	r6, r6, #7
 8003b1a:	1d23      	adds	r3, r4, #4
 8003b1c:	1af2      	subs	r2, r6, r3
 8003b1e:	d0b6      	beq.n	8003a8e <_malloc_r+0x22>
 8003b20:	1b9b      	subs	r3, r3, r6
 8003b22:	50a3      	str	r3, [r4, r2]
 8003b24:	e7b3      	b.n	8003a8e <_malloc_r+0x22>
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	bf0c      	ite	eq
 8003b2c:	6032      	streq	r2, [r6, #0]
 8003b2e:	605a      	strne	r2, [r3, #4]
 8003b30:	e7ec      	b.n	8003b0c <_malloc_r+0xa0>
 8003b32:	4623      	mov	r3, r4
 8003b34:	6864      	ldr	r4, [r4, #4]
 8003b36:	e7b2      	b.n	8003a9e <_malloc_r+0x32>
 8003b38:	4634      	mov	r4, r6
 8003b3a:	6876      	ldr	r6, [r6, #4]
 8003b3c:	e7b9      	b.n	8003ab2 <_malloc_r+0x46>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	4638      	mov	r0, r7
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	f000 f8b6 	bl	8003cb4 <__malloc_unlock>
 8003b48:	e7a1      	b.n	8003a8e <_malloc_r+0x22>
 8003b4a:	6025      	str	r5, [r4, #0]
 8003b4c:	e7de      	b.n	8003b0c <_malloc_r+0xa0>
 8003b4e:	bf00      	nop
 8003b50:	2000017c 	.word	0x2000017c

08003b54 <_sbrk_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	2300      	movs	r3, #0
 8003b58:	4d05      	ldr	r5, [pc, #20]	; (8003b70 <_sbrk_r+0x1c>)
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	f7fd f85e 	bl	8000c20 <_sbrk>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_sbrk_r+0x1a>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_sbrk_r+0x1a>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	20000184 	.word	0x20000184

08003b74 <__sread>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	460c      	mov	r4, r1
 8003b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7c:	f000 f8a0 	bl	8003cc0 <_read_r>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	bfab      	itete	ge
 8003b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b86:	89a3      	ldrhlt	r3, [r4, #12]
 8003b88:	181b      	addge	r3, r3, r0
 8003b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b8e:	bfac      	ite	ge
 8003b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b92:	81a3      	strhlt	r3, [r4, #12]
 8003b94:	bd10      	pop	{r4, pc}

08003b96 <__swrite>:
 8003b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9a:	461f      	mov	r7, r3
 8003b9c:	898b      	ldrh	r3, [r1, #12]
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	4616      	mov	r6, r2
 8003ba6:	d505      	bpl.n	8003bb4 <__swrite+0x1e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	2200      	movs	r2, #0
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	f000 f868 	bl	8003c84 <_lseek_r>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bca:	f000 b817 	b.w	8003bfc <_write_r>

08003bce <__sseek>:
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd6:	f000 f855 	bl	8003c84 <_lseek_r>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	bf15      	itete	ne
 8003be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bea:	81a3      	strheq	r3, [r4, #12]
 8003bec:	bf18      	it	ne
 8003bee:	81a3      	strhne	r3, [r4, #12]
 8003bf0:	bd10      	pop	{r4, pc}

08003bf2 <__sclose>:
 8003bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf6:	f000 b813 	b.w	8003c20 <_close_r>
	...

08003bfc <_write_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	4d05      	ldr	r5, [pc, #20]	; (8003c1c <_write_r+0x20>)
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f7fc ffbc 	bl	8000b88 <_write>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_write_r+0x1e>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_write_r+0x1e>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	20000184 	.word	0x20000184

08003c20 <_close_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	2300      	movs	r3, #0
 8003c24:	4d05      	ldr	r5, [pc, #20]	; (8003c3c <_close_r+0x1c>)
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fc ffc8 	bl	8000bc0 <_close>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_close_r+0x1a>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_close_r+0x1a>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	20000184 	.word	0x20000184

08003c40 <_fstat_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	2300      	movs	r3, #0
 8003c44:	4d06      	ldr	r5, [pc, #24]	; (8003c60 <_fstat_r+0x20>)
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	f7fc ffc2 	bl	8000bd6 <_fstat>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d102      	bne.n	8003c5c <_fstat_r+0x1c>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	b103      	cbz	r3, 8003c5c <_fstat_r+0x1c>
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000184 	.word	0x20000184

08003c64 <_isatty_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	2300      	movs	r3, #0
 8003c68:	4d05      	ldr	r5, [pc, #20]	; (8003c80 <_isatty_r+0x1c>)
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	f7fc ffc0 	bl	8000bf4 <_isatty>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_isatty_r+0x1a>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_isatty_r+0x1a>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20000184 	.word	0x20000184

08003c84 <_lseek_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4d05      	ldr	r5, [pc, #20]	; (8003ca4 <_lseek_r+0x20>)
 8003c90:	602a      	str	r2, [r5, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f7fc ffb8 	bl	8000c08 <_lseek>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_lseek_r+0x1e>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_lseek_r+0x1e>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20000184 	.word	0x20000184

08003ca8 <__malloc_lock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__malloc_lock+0x8>)
 8003caa:	f7ff be0f 	b.w	80038cc <__retarget_lock_acquire_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20000178 	.word	0x20000178

08003cb4 <__malloc_unlock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__malloc_unlock+0x8>)
 8003cb6:	f7ff be0a 	b.w	80038ce <__retarget_lock_release_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000178 	.word	0x20000178

08003cc0 <_read_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_read_r+0x20>)
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fc ff3d 	bl	8000b4e <_read>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_read_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_read_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000184 	.word	0x20000184

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
