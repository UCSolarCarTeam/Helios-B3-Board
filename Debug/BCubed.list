
BCubed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b0  080080b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b8  080080b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011328  20000060  0800812c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011388  0800812c  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ba40  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b2f  00000000  00000000  0004bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00052640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000165a  00000000  00000000  00054370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002057e  00000000  00000000  000559ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026745  00000000  00000000  00075f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa546  00000000  00000000  0009c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f88  00000000  00000000  00146bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014eb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08007cc0 	.word	0x08007cc0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08007cc0 	.word	0x08007cc0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	468e      	mov	lr, r1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d14c      	bne.n	800026a <__udivmoddi4+0xaa>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4694      	mov	ip, r2
 80001d4:	d967      	bls.n	80002a6 <__udivmoddi4+0xe6>
 80001d6:	fab2 f382 	clz	r3, r2
 80001da:	b153      	cbz	r3, 80001f2 <__udivmoddi4+0x32>
 80001dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001e0:	f1c3 0220 	rsb	r2, r3, #32
 80001e4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ec:	ea42 0e0e 	orr.w	lr, r2, lr
 80001f0:	409c      	lsls	r4, r3
 80001f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f6:	fbbe f1f7 	udiv	r1, lr, r7
 80001fa:	fa1f f58c 	uxth.w	r5, ip
 80001fe:	fb07 ee11 	mls	lr, r7, r1, lr
 8000202:	fb01 f005 	mul.w	r0, r1, r5
 8000206:	0c22      	lsrs	r2, r4, #16
 8000208:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800020c:	4290      	cmp	r0, r2
 800020e:	d90a      	bls.n	8000226 <__udivmoddi4+0x66>
 8000210:	eb1c 0202 	adds.w	r2, ip, r2
 8000214:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000218:	f080 8119 	bcs.w	800044e <__udivmoddi4+0x28e>
 800021c:	4290      	cmp	r0, r2
 800021e:	f240 8116 	bls.w	800044e <__udivmoddi4+0x28e>
 8000222:	3902      	subs	r1, #2
 8000224:	4462      	add	r2, ip
 8000226:	1a12      	subs	r2, r2, r0
 8000228:	fbb2 f0f7 	udiv	r0, r2, r7
 800022c:	fb07 2210 	mls	r2, r7, r0, r2
 8000230:	fb00 f505 	mul.w	r5, r0, r5
 8000234:	b2a4      	uxth	r4, r4
 8000236:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800023a:	42a5      	cmp	r5, r4
 800023c:	d90a      	bls.n	8000254 <__udivmoddi4+0x94>
 800023e:	eb1c 0404 	adds.w	r4, ip, r4
 8000242:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000246:	f080 8104 	bcs.w	8000452 <__udivmoddi4+0x292>
 800024a:	42a5      	cmp	r5, r4
 800024c:	f240 8101 	bls.w	8000452 <__udivmoddi4+0x292>
 8000250:	4464      	add	r4, ip
 8000252:	3802      	subs	r0, #2
 8000254:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000258:	2100      	movs	r1, #0
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	b11e      	cbz	r6, 8000266 <__udivmoddi4+0xa6>
 800025e:	40dc      	lsrs	r4, r3
 8000260:	2300      	movs	r3, #0
 8000262:	e9c6 4300 	strd	r4, r3, [r6]
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d908      	bls.n	8000280 <__udivmoddi4+0xc0>
 800026e:	2e00      	cmp	r6, #0
 8000270:	f000 80ea 	beq.w	8000448 <__udivmoddi4+0x288>
 8000274:	2100      	movs	r1, #0
 8000276:	e9c6 0500 	strd	r0, r5, [r6]
 800027a:	4608      	mov	r0, r1
 800027c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000280:	fab3 f183 	clz	r1, r3
 8000284:	2900      	cmp	r1, #0
 8000286:	d148      	bne.n	800031a <__udivmoddi4+0x15a>
 8000288:	42ab      	cmp	r3, r5
 800028a:	d302      	bcc.n	8000292 <__udivmoddi4+0xd2>
 800028c:	4282      	cmp	r2, r0
 800028e:	f200 80f8 	bhi.w	8000482 <__udivmoddi4+0x2c2>
 8000292:	1a84      	subs	r4, r0, r2
 8000294:	eb65 0203 	sbc.w	r2, r5, r3
 8000298:	2001      	movs	r0, #1
 800029a:	4696      	mov	lr, r2
 800029c:	2e00      	cmp	r6, #0
 800029e:	d0e2      	beq.n	8000266 <__udivmoddi4+0xa6>
 80002a0:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a4:	e7df      	b.n	8000266 <__udivmoddi4+0xa6>
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xea>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 808e 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b4:	1a88      	subs	r0, r1, r2
 80002b6:	2101      	movs	r1, #1
 80002b8:	0c17      	lsrs	r7, r2, #16
 80002ba:	fa1f fe82 	uxth.w	lr, r2
 80002be:	fbb0 f5f7 	udiv	r5, r0, r7
 80002c2:	fb07 0015 	mls	r0, r7, r5, r0
 80002c6:	0c22      	lsrs	r2, r4, #16
 80002c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002cc:	fb0e f005 	mul.w	r0, lr, r5
 80002d0:	4290      	cmp	r0, r2
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x126>
 80002d4:	eb1c 0202 	adds.w	r2, ip, r2
 80002d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x124>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f200 80cc 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e4:	4645      	mov	r5, r8
 80002e6:	1a12      	subs	r2, r2, r0
 80002e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ec:	fb07 2210 	mls	r2, r7, r0, r2
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x150>
 80002fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000302:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x14e>
 8000308:	45a6      	cmp	lr, r4
 800030a:	f200 80b4 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030e:	4610      	mov	r0, r2
 8000310:	eba4 040e 	sub.w	r4, r4, lr
 8000314:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000318:	e7a0      	b.n	800025c <__udivmoddi4+0x9c>
 800031a:	f1c1 0720 	rsb	r7, r1, #32
 800031e:	408b      	lsls	r3, r1
 8000320:	fa22 fc07 	lsr.w	ip, r2, r7
 8000324:	ea4c 0c03 	orr.w	ip, ip, r3
 8000328:	fa25 fa07 	lsr.w	sl, r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	fbba f8f9 	udiv	r8, sl, r9
 8000334:	408d      	lsls	r5, r1
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	432b      	orrs	r3, r5
 8000344:	fa00 f501 	lsl.w	r5, r0, r1
 8000348:	fb08 f00e 	mul.w	r0, r8, lr
 800034c:	0c1c      	lsrs	r4, r3, #16
 800034e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000352:	42a0      	cmp	r0, r4
 8000354:	fa02 f201 	lsl.w	r2, r2, r1
 8000358:	d90b      	bls.n	8000372 <__udivmoddi4+0x1b2>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000362:	f080 8086 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000366:	42a0      	cmp	r0, r4
 8000368:	f240 8083 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036c:	f1a8 0802 	sub.w	r8, r8, #2
 8000370:	4464      	add	r4, ip
 8000372:	1a24      	subs	r4, r4, r0
 8000374:	b298      	uxth	r0, r3
 8000376:	fbb4 f3f9 	udiv	r3, r4, r9
 800037a:	fb09 4413 	mls	r4, r9, r3, r4
 800037e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000382:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000386:	45a6      	cmp	lr, r4
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x1dc>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000392:	d26a      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000394:	45a6      	cmp	lr, r4
 8000396:	d968      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000398:	3b02      	subs	r3, #2
 800039a:	4464      	add	r4, ip
 800039c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003a0:	fba0 9302 	umull	r9, r3, r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	429c      	cmp	r4, r3
 80003aa:	46c8      	mov	r8, r9
 80003ac:	469e      	mov	lr, r3
 80003ae:	d354      	bcc.n	800045a <__udivmoddi4+0x29a>
 80003b0:	d051      	beq.n	8000456 <__udivmoddi4+0x296>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d067      	beq.n	8000486 <__udivmoddi4+0x2c6>
 80003b6:	ebb5 0308 	subs.w	r3, r5, r8
 80003ba:	eb64 040e 	sbc.w	r4, r4, lr
 80003be:	40cb      	lsrs	r3, r1
 80003c0:	fa04 f707 	lsl.w	r7, r4, r7
 80003c4:	431f      	orrs	r7, r3
 80003c6:	40cc      	lsrs	r4, r1
 80003c8:	e9c6 7400 	strd	r7, r4, [r6]
 80003cc:	2100      	movs	r1, #0
 80003ce:	e74a      	b.n	8000266 <__udivmoddi4+0xa6>
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	f1c3 0020 	rsb	r0, r3, #32
 80003d8:	40c1      	lsrs	r1, r0
 80003da:	409d      	lsls	r5, r3
 80003dc:	fa24 f000 	lsr.w	r0, r4, r0
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	4328      	orrs	r0, r5
 80003e6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003ea:	fb07 1115 	mls	r1, r7, r5, r1
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	0c02      	lsrs	r2, r0, #16
 80003f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f8:	fb05 f10e 	mul.w	r1, r5, lr
 80003fc:	4291      	cmp	r1, r2
 80003fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x256>
 8000404:	eb1c 0202 	adds.w	r2, ip, r2
 8000408:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	4291      	cmp	r1, r2
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3d02      	subs	r5, #2
 8000414:	4462      	add	r2, ip
 8000416:	1a52      	subs	r2, r2, r1
 8000418:	fbb2 f1f7 	udiv	r1, r2, r7
 800041c:	fb07 2211 	mls	r2, r7, r1, r2
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000426:	fb01 f20e 	mul.w	r2, r1, lr
 800042a:	4282      	cmp	r2, r0
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x280>
 800042e:	eb1c 0000 	adds.w	r0, ip, r0
 8000432:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000436:	d216      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000438:	4282      	cmp	r2, r0
 800043a:	d914      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043c:	3902      	subs	r1, #2
 800043e:	4460      	add	r0, ip
 8000440:	1a80      	subs	r0, r0, r2
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	e73a      	b.n	80002be <__udivmoddi4+0xfe>
 8000448:	4631      	mov	r1, r6
 800044a:	4630      	mov	r0, r6
 800044c:	e70b      	b.n	8000266 <__udivmoddi4+0xa6>
 800044e:	4671      	mov	r1, lr
 8000450:	e6e9      	b.n	8000226 <__udivmoddi4+0x66>
 8000452:	4610      	mov	r0, r2
 8000454:	e6fe      	b.n	8000254 <__udivmoddi4+0x94>
 8000456:	454d      	cmp	r5, r9
 8000458:	d2ab      	bcs.n	80003b2 <__udivmoddi4+0x1f2>
 800045a:	ebb9 0802 	subs.w	r8, r9, r2
 800045e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000462:	3801      	subs	r0, #1
 8000464:	e7a5      	b.n	80003b2 <__udivmoddi4+0x1f2>
 8000466:	4641      	mov	r1, r8
 8000468:	e7ea      	b.n	8000440 <__udivmoddi4+0x280>
 800046a:	4603      	mov	r3, r0
 800046c:	e796      	b.n	800039c <__udivmoddi4+0x1dc>
 800046e:	4645      	mov	r5, r8
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	46d0      	mov	r8, sl
 8000474:	e77d      	b.n	8000372 <__udivmoddi4+0x1b2>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e749      	b.n	8000310 <__udivmoddi4+0x150>
 800047c:	3d02      	subs	r5, #2
 800047e:	4462      	add	r2, ip
 8000480:	e731      	b.n	80002e6 <__udivmoddi4+0x126>
 8000482:	4608      	mov	r0, r1
 8000484:	e70a      	b.n	800029c <__udivmoddi4+0xdc>
 8000486:	4631      	mov	r1, r6
 8000488:	e6ed      	b.n	8000266 <__udivmoddi4+0xa6>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <run_interface>:
#include "main_system.hpp"
#include "UARTDriver.hpp"

extern "C" {
    void run_interface()
    {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
        run_main();
 8000494:	f000 f856 	bl	8000544 <_Z8run_mainv>
    }
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <cpp_USART2_IRQHandler>:

    void cpp_USART2_IRQHandler()
    {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
        Driver::uart2.HandleIRQ_UART();
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <cpp_USART2_IRQHandler+0x10>)
 80004a2:	f001 fc94 	bl	8001dce <_ZN10UARTDriver14HandleIRQ_UARTEv>
    }
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000088 	.word	0x20000088

080004b0 <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <_ZN8CubeTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class CubeTask : public Task
{
public:
    static CubeTask& Inst() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
        static CubeTask inst;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_ZN8CubeTask4InstEv+0x48>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f3bf 8f5b 	dmb	ish
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d010      	beq.n	8000518 <_ZN8CubeTask4InstEv+0x40>
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <_ZN8CubeTask4InstEv+0x48>)
 80004f8:	f006 fe7c 	bl	80071f4 <__cxa_guard_acquire>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf14      	ite	ne
 8000502:	2301      	movne	r3, #1
 8000504:	2300      	moveq	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d005      	beq.n	8000518 <_ZN8CubeTask4InstEv+0x40>
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <_ZN8CubeTask4InstEv+0x4c>)
 800050e:	f000 f80b 	bl	8000528 <_ZN8CubeTaskC1Ev>
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <_ZN8CubeTask4InstEv+0x48>)
 8000514:	f006 fe7a 	bl	800720c <__cxa_guard_release>
        return inst;
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <_ZN8CubeTask4InstEv+0x4c>)
    }
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000084 	.word	0x20000084
 8000524:	2000007c 	.word	0x2000007c

08000528 <_ZN8CubeTaskC1Ev>:
    void Run(void* pvParams);    // Main run code

    void HandleCommand(Command& cm);

private:
    CubeTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}    // Private constructor
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	210a      	movs	r1, #10
 8000534:	4618      	mov	r0, r3
 8000536:	f001 f8ef 	bl	8001718 <_ZN4TaskC1Et>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_Z8run_mainv>:

/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    // Init Tasks
    CubeTask::Inst().InitTask();
 8000548:	f7ff ffc6 	bl	80004d8 <_ZN8CubeTask4InstEv>
 800054c:	4603      	mov	r3, r0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fa96 	bl	8001a80 <_ZN8CubeTask8InitTaskEv>

    // Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
    CUBE_PRINT("\n-- CUBE SYSTEM --\n");
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <_Z8run_mainv+0x50>)
 8000556:	f001 f90f 	bl	8001778 <_Z10cube_printPKcz>
    CUBE_PRINT("System Reset Reason: [TODO]\n"); //TODO: System reset reason can be implemented via. Flash storage
 800055a:	480f      	ldr	r0, [pc, #60]	; (8000598 <_Z8run_mainv+0x54>)
 800055c:	f001 f90c 	bl	8001778 <_Z10cube_printPKcz>
    CUBE_PRINT("Current System Heap Use: %d Bytes\n", xPortGetFreeHeapSize());
 8000560:	f006 fd7a 	bl	8007058 <xPortGetFreeHeapSize>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <_Z8run_mainv+0x58>)
 800056a:	f001 f905 	bl	8001778 <_Z10cube_printPKcz>
    CUBE_PRINT("Lowest Ever Heap Size: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 800056e:	f006 fd7d 	bl	800706c <xPortGetMinimumEverFreeHeapSize>
 8000572:	4603      	mov	r3, r0
 8000574:	4619      	mov	r1, r3
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <_Z8run_mainv+0x5c>)
 8000578:	f001 f8fe 	bl	8001778 <_Z10cube_printPKcz>

    // Start the Scheduler
    // Guidelines:
    // - Be CAREFUL with race conditions after osKernelStart
    // - All uses of new and delete should be closely monitored after this point
    osKernelStart();
 800057c:	f003 ff64 	bl	8004448 <osKernelStart>

    // Should never reach here
    CUBE_ASSERT(false, "osKernelStart() failed");
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_Z8run_mainv+0x60>)
 8000582:	2229      	movs	r2, #41	; 0x29
 8000584:	4908      	ldr	r1, [pc, #32]	; (80005a8 <_Z8run_mainv+0x64>)
 8000586:	2000      	movs	r0, #0
 8000588:	f001 f956 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>

    while (1)
    {
        osDelay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f003 ff62 	bl	8004456 <osDelay>
 8000592:	e7fb      	b.n	800058c <_Z8run_mainv+0x48>
 8000594:	08007cd8 	.word	0x08007cd8
 8000598:	08007cec 	.word	0x08007cec
 800059c:	08007d0c 	.word	0x08007d0c
 80005a0:	08007d30 	.word	0x08007d30
 80005a4:	08007d54 	.word	0x08007d54
 80005a8:	08007d6c 	.word	0x08007d6c

080005ac <_Z41__static_initialization_and_destruction_0ii>:
    }
}
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d108      	bne.n	80005ce <_Z41__static_initialization_and_destruction_0ii+0x22>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d103      	bne.n	80005ce <_Z41__static_initialization_and_destruction_0ii+0x22>
    UARTDriver uart2(USART2);
 80005c6:	4904      	ldr	r1, [pc, #16]	; (80005d8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80005ca:	f7ff ff71 	bl	80004b0 <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400
 80005dc:	20000088 	.word	0x20000088

080005e0 <_GLOBAL__sub_I__ZN6Driver5uart2E>:
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ffdf 	bl	80005ac <_Z41__static_initialization_and_destruction_0ii>
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <vApplicationGetIdleTaskMemory+0x28>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000094 	.word	0x20000094
 800061c:	20000134 	.word	0x20000134

08000620 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetTimerTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetTimerTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800063e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000434 	.word	0x20000434
 8000650:	200004d4 	.word	0x200004d4

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	; (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60da      	str	r2, [r3, #12]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	615a      	str	r2, [r3, #20]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3314      	adds	r3, #20
 80007b4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	e853 3f00 	ldrex	r3, [r3]
 80007bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007c4:	61fb      	str	r3, [r7, #28]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3314      	adds	r3, #20
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	61ba      	str	r2, [r7, #24]
 80007ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007d0:	6979      	ldr	r1, [r7, #20]
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	e841 2300 	strex	r3, r2, [r1]
 80007d8:	613b      	str	r3, [r7, #16]
   return(result);
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1e7      	bne.n	80007b0 <LL_USART_DisableIT_CTS+0x8>
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007f6:	69da      	ldr	r2, [r3, #28]
 80007f8:	4907      	ldr	r1, [pc, #28]	; (8000818 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000802:	69da      	ldr	r2, [r3, #28]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4013      	ands	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <LL_APB1_GRP1_EnableClock+0x2c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f001 faf0 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f818 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f9fe 	bl	8000c58 <MX_GPIO_Init>
  MX_I2C1_Init();
 800085c:	f000 f874 	bl	8000948 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000860:	f000 f8a0 	bl	80009a4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000864:	f000 f8cc 	bl	8000a00 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000868:	f000 f900 	bl	8000a6c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800086c:	f000 f934 	bl	8000ad8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000870:	f000 f9d0 	bl	8000c14 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f95a 	bl	8000b2c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000878:	f000 f852 	bl	8000920 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  run_interface();
 800087c:	f7ff fe08 	bl	8000490 <run_interface>
 8000880:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
  #endif
  /* USER CODE END 3 */
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b092      	sub	sp, #72	; 0x48
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2234      	movs	r2, #52	; 0x34
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f006 fd2a 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <SystemClock_Config+0x94>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <SystemClock_Config+0x94>)
 80008b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ba:	2301      	movs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 ffb1 	bl	8002844 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80008e8:	f000 fa65 	bl	8000db6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2303      	movs	r3, #3
 80008f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f002 facd 	bl	8002ea4 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000910:	f000 fa51 	bl	8000db6 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3748      	adds	r7, #72	; 0x48
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40007000 	.word	0x40007000

08000920 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_CRC_Init+0x20>)
 8000926:	4a07      	ldr	r2, [pc, #28]	; (8000944 <MX_CRC_Init+0x24>)
 8000928:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_CRC_Init+0x20>)
 800092c:	f001 fbaf 	bl	800208e <HAL_CRC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000936:	f000 fa3e 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000ad4 	.word	0x20000ad4
 8000944:	40023000 	.word	0x40023000

08000948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x50>)
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_I2C1_Init+0x54>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x50>)
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x58>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_I2C1_Init+0x50>)
 8000966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_I2C1_Init+0x50>)
 8000986:	f001 fd47 	bl	8002418 <HAL_I2C_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000990:	f000 fa11 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000adc 	.word	0x20000adc
 800099c:	40005400 	.word	0x40005400
 80009a0:	000186a0 	.word	0x000186a0

080009a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <MX_I2C2_Init+0x54>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_I2C2_Init+0x58>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_I2C2_Init+0x50>)
 80009e2:	f001 fd19 	bl	8002418 <HAL_I2C_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 f9e3 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000b30 	.word	0x20000b30
 80009f8:	40005800 	.word	0x40005800
 80009fc:	000186a0 	.word	0x000186a0

08000a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a52:	f002 fcdb 	bl	800340c <HAL_SPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a5c:	f000 f9ab 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000b84 	.word	0x20000b84
 8000a68:	40013000 	.word	0x40013000

08000a6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <MX_SPI2_Init+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000ab8:	220a      	movs	r2, #10
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_SPI2_Init+0x64>)
 8000abe:	f002 fca5 	bl	800340c <HAL_SPI_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ac8:	f000 f975 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000bdc 	.word	0x20000bdc
 8000ad4:	40003800 	.word	0x40003800

08000ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f002 ff10 	bl	8003934 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f94c 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000c34 	.word	0x20000c34
 8000b28:	40013800 	.word	0x40013800

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b5a:	f7ff fe5f 	bl	800081c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f7ff fe44 	bl	80007ec <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b64:	2304      	movs	r3, #4
 8000b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4822      	ldr	r0, [pc, #136]	; (8000c0c <MX_USART2_UART_Init+0xe0>)
 8000b82:	f003 f90a 	bl	8003d9a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b86:	2308      	movs	r3, #8
 8000b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481a      	ldr	r0, [pc, #104]	; (8000c0c <MX_USART2_UART_Init+0xe0>)
 8000ba4:	f003 f8f9 	bl	8003d9a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000ba8:	f7ff fd54 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fda2 	bl	80006fc <NVIC_EncodePriority>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2026      	movs	r0, #38	; 0x26
 8000bbe:	f7ff fd73 	bl	80006a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f7ff fd54 	bl	8000670 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000bc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bcc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0xe4>)
 8000bee:	f003 fb7b 	bl	80042e8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <MX_USART2_UART_Init+0xe4>)
 8000bf4:	f7ff fdd8 	bl	80007a8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0xe4>)
 8000bfa:	f7ff fdc0 	bl	800077e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_USART2_UART_Init+0xe4>)
 8000c00:	f7ff fdae 	bl	8000760 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40004400 	.word	0x40004400

08000c14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <MX_USB_PCD_Init+0x40>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USB_PCD_Init+0x3c>)
 8000c3e:	f001 fd2f 	bl	80026a0 <HAL_PCD_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c48:	f000 f8b5 	bl	8000db6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000c7c 	.word	0x20000c7c
 8000c54:	40005c00 	.word	0x40005c00

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x12c>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin|CS_CAN_N_Pin
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f641 510e 	movw	r1, #7438	; 0x1d0e
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x130>)
 8000cee:	f001 fb7b 	bl	80023e8 <HAL_GPIO_WritePin>
                          |SPI_Data_CS1_Pin|SPI_Data_CS0_Pin|Board_SLCT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : board_int_1_Pin board_int_3_Pin board_int_2_Pin CAN_RX1BF_Pin
                           CAN_RX0BF_Pin CAN_INT_Pin */
  GPIO_InitStruct.Pin = board_int_1_Pin|board_int_3_Pin|board_int_2_Pin|CAN_RX1BF_Pin
 8000cf2:	f24e 23c0 	movw	r3, #58048	; 0xe2c0
 8000cf6:	617b      	str	r3, [r7, #20]
                          |CAN_RX0BF_Pin|CAN_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	481f      	ldr	r0, [pc, #124]	; (8000d88 <MX_GPIO_Init+0x130>)
 8000d0a:	f001 f9dd 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin LED_GREEN_Pin CS_CAN_N_Pin
                           SPI_Data_CS1_Pin SPI_Data_CS0_Pin Board_SLCT_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin|CS_CAN_N_Pin
 8000d0e:	f641 530e 	movw	r3, #7438	; 0x1d0e
 8000d12:	617b      	str	r3, [r7, #20]
                          |SPI_Data_CS1_Pin|SPI_Data_CS0_Pin|Board_SLCT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <MX_GPIO_Init+0x130>)
 8000d28:	f001 f9ce 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : board_int_4_Pin */
  GPIO_InitStruct.Pin = board_int_4_Pin;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(board_int_4_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x134>)
 8000d42:	f001 f9c1 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DETECT_Pin */
  GPIO_InitStruct.Pin = VBUS_DETECT_Pin;
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x138>)
 8000d5c:	f001 f9b4 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Board_SLCT_0_Pin */
  GPIO_InitStruct.Pin = Board_SLCT_0_Pin;
 8000d60:	2304      	movs	r3, #4
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Board_SLCT_0_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_GPIO_Init+0x13c>)
 8000d76:	f001 f9a7 	bl	80020c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da8:	d101      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000daa:	f001 f85b 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dba:	b672      	cpsid	i
}
 8000dbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <Error_Handler+0x8>

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_MspInit+0x64>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <HAL_MspInit+0x64>)
 8000dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd0:	6253      	str	r3, [r2, #36]	; 0x24
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_MspInit+0x64>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_MspInit+0x64>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_MspInit+0x64>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6213      	str	r3, [r2, #32]
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_MspInit+0x64>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_MspInit+0x64>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_MspInit+0x64>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6253      	str	r3, [r2, #36]	; 0x24
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x64>)
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f001 f90c 	bl	8002032 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_CRC_MspInit+0x34>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10b      	bne.n	8000e52 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_CRC_MspInit+0x38>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_CRC_MspInit+0x38>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_CRC_MspInit+0x38>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	40023000 	.word	0x40023000
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <HAL_I2C_MspInit+0xd8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d128      	bne.n	8000ed8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Data_Pin|I2C_SDA_Data_Pin;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <HAL_I2C_MspInit+0xe0>)
 8000eba:	f001 f905 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ed6:	e02d      	b.n	8000f34 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_I2C_MspInit+0xe4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d128      	bne.n	8000f34 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_SCL_Expander_Pin|I2C_SDA_Expander_Pin;
 8000efa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <HAL_I2C_MspInit+0xe0>)
 8000f18:	f001 f8d6 	bl	80020c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f26:	6253      	str	r3, [r2, #36]	; 0x24
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_I2C_MspInit+0xdc>)
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40005800 	.word	0x40005800

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2e      	ldr	r2, [pc, #184]	; (8001024 <HAL_SPI_MspInit+0xd8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d128      	bne.n	8000fc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a27      	ldr	r2, [pc, #156]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Data_Pin|SPI_MISO_Data_Pin|SPI_MOSI_Data_Pin;
 8000f9e:	23e0      	movs	r3, #224	; 0xe0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481c      	ldr	r0, [pc, #112]	; (800102c <HAL_SPI_MspInit+0xe0>)
 8000fba:	f001 f885 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fbe:	e02d      	b.n	800101c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_SPI_MspInit+0xe4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d128      	bne.n	800101c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6253      	str	r3, [r2, #36]	; 0x24
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_SPI_MspInit+0xdc>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_SCK_CAN_Pin|SPI_MISO_CAN_Pin|SPI_MOSI_CAN_Pin;
 8000ffa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <HAL_SPI_MspInit+0xe8>)
 8001018:	f001 f856 	bl	80020c8 <HAL_GPIO_Init>
}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40003800 	.word	0x40003800
 8001034:	40020400 	.word	0x40020400

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x7c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d128      	bne.n	80010ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_UART_MspInit+0x80>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <HAL_UART_MspInit+0x80>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0x80>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x80>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x80>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_UART_MspInit+0x80>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800108a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800109c:	2307      	movs	r3, #7
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_UART_MspInit+0x84>)
 80010a8:	f001 f80e 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_PCD_MspInit+0x34>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10b      	bne.n	80010ea <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_PCD_MspInit+0x38>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_PCD_MspInit+0x38>)
 80010d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010dc:	6253      	str	r3, [r2, #36]	; 0x24
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_PCD_MspInit+0x38>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40005c00 	.word	0x40005c00
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_InitTick+0xe4>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_InitTick+0xe4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6253      	str	r3, [r2, #36]	; 0x24
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_InitTick+0xe4>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112a:	f107 0210 	add.w	r2, r7, #16
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f8d9 	bl	80032ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001144:	f002 f8aa 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8001148:	6378      	str	r0, [r7, #52]	; 0x34
 800114a:	e004      	b.n	8001156 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800114c:	f002 f8a6 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8001150:	4603      	mov	r3, r0
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_InitTick+0xe8>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	3b01      	subs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_InitTick+0xec>)
 8001166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_InitTick+0xec>)
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_InitTick+0xec>)
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_InitTick+0xec>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_InitTick+0xec>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <HAL_InitTick+0xec>)
 8001188:	f002 f9c9 	bl	800351e <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001196:	2b00      	cmp	r3, #0
 8001198:	d11b      	bne.n	80011d2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <HAL_InitTick+0xec>)
 800119c:	f002 fa08 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d111      	bne.n	80011d2 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ae:	201c      	movs	r0, #28
 80011b0:	f000 ff5b 	bl	800206a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	d808      	bhi.n	80011cc <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80011ba:	2200      	movs	r2, #0
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	201c      	movs	r0, #28
 80011c0:	f000 ff37 	bl	8002032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c4:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_InitTick+0xf0>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e002      	b.n	80011d2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3738      	adds	r7, #56	; 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	20000f68 	.word	0x20000f68
 80011ec:	20000004 	.word	0x20000004

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <TIM2_IRQHandler+0x10>)
 8001222:	f002 fa17 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000f68 	.word	0x20000f68

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
  cpp_USART2_IRQHandler();
 8001234:	f7ff f932 	bl	800049c <cpp_USART2_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f006 f89e 	bl	80073ac <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20014000 	.word	0x20014000
 800129c:	00000400 	.word	0x00000400
 80012a0:	20000fa8 	.word	0x20000fa8
 80012a4:	20011388 	.word	0x20011388

080012a8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff fff8 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012ba:	490c      	ldr	r1, [pc, #48]	; (80012ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012d0:	4c09      	ldr	r4, [pc, #36]	; (80012f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f006 f86b 	bl	80073b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff fab3 	bl	800084c <main>
  bx lr
 80012e6:	4770      	bx	lr
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012f0:	080080cc 	.word	0x080080cc
  ldr r2, =_sbss
 80012f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012f8:	20011388 	.word	0x20011388

080012fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_IRQHandler>

080012fe <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4013      	ands	r3, r2
  }
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <_Z11cube_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* cube_malloc(uint32_t size) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    uint8_t* ret = (uint8_t*)malloc(size);
#else
    uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f005 fd7b 	bl	8006e1c <pvPortMalloc>
 8001326:	60f8      	str	r0, [r7, #12]
#endif
    CUBE_ASSERT(ret, "cube_malloc failed");
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <_Z11cube_mallocm+0x22>
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <_Z11cube_mallocm+0x2c>)
 8001330:	2247      	movs	r2, #71	; 0x47
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <_Z11cube_mallocm+0x30>)
 8001334:	2000      	movs	r0, #0
 8001336:	f000 fa7f 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>
    return ret;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08007d8c 	.word	0x08007d8c
 8001348:	08007da0 	.word	0x08007da0

0800134c <_Z9cube_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void cube_free(void* ptr) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    free(ptr);
#else
    vPortFree(ptr);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f005 fe25 	bl	8006fa4 <vPortFree>
#endif
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	729a      	strb	r2, [r3, #10]
}
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	4613      	mov	r3, r2
 80013a2:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	883a      	ldrh	r2, [r7, #0]
 80013ae:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	729a      	strb	r2, [r3, #10]
}
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
	...

080013d0 <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return Pointer to data on success, nullptr on failure (mem already allocated)
*/
uint8_t* Command::AllocateData(uint16_t dataSize)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d126      	bne.n	8001432 <_ZN7Command12AllocateDataEt+0x62>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7a9b      	ldrb	r3, [r3, #10]
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01f      	beq.n	8001432 <_ZN7Command12AllocateDataEt+0x62>
        this->data = cube_malloc(dataSize);
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff8f 	bl	8001318 <_Z11cube_mallocm>
 80013fa:	4602      	mov	r2, r0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	887a      	ldrh	r2, [r7, #2]
 800140a:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 800140c:	2101      	movs	r1, #1
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <_ZN7Command12AllocateDataEt+0x6c>)
 8001410:	f000 f871 	bl	80014f6 <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        CUBE_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <_ZN7Command12AllocateDataEt+0x6c>)
 8001416:	f000 f887 	bl	8001528 <_ZNKSt13__atomic_baseItEcvtEv>
 800141a:	4603      	mov	r3, r0
 800141c:	2b63      	cmp	r3, #99	; 0x63
 800141e:	d905      	bls.n	800142c <_ZN7Command12AllocateDataEt+0x5c>
 8001420:	2300      	movs	r3, #0
 8001422:	2264      	movs	r2, #100	; 0x64
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <_ZN7Command12AllocateDataEt+0x70>)
 8001426:	2000      	movs	r0, #0
 8001428:	f000 fa06 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>
        return this->data;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	e000      	b.n	8001434 <_ZN7Command12AllocateDataEt+0x64>
    }
    return nullptr;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000fac 	.word	0x20000fac
 8001440:	08007de0 	.word	0x08007de0

08001444 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	4613      	mov	r3, r2
 8001450:	80fb      	strh	r3, [r7, #6]
    // If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4619      	mov	r1, r3
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff ffba 	bl	80013d0 <_ZN7Command12AllocateDataEt>
 800145c:	4603      	mov	r3, r0
        && this->data != nullptr) {
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <_ZN7Command17CopyDataToCommandEPht+0x2c>
 800146e:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <_ZN7Command17CopyDataToCommandEPht+0x42>
        memcpy(this->data, dataSrc, size);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f005 ffc1 	bl	8007404 <memcpy>
        return true;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <_ZN7Command17CopyDataToCommandEPht+0x44>
    }

    return false;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7a9b      	ldrb	r3, [r3, #10]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <_ZN7Command5ResetEv+0x36>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <_ZN7Command5ResetEv+0x36>
        cube_free(data);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff4d 	bl	800134c <_Z9cube_freePv>
        statAllocationCounter -= 1;
 80014b2:	2101      	movs	r1, #1
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <_ZN7Command5ResetEv+0x40>)
 80014b6:	f000 f851 	bl	800155c <_ZNSt13__atomic_baseItEmIEt>
		data = nullptr;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
        bShouldFreeData = false;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	729a      	strb	r2, [r3, #10]
    }
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000fac 	.word	0x20000fac

080014d4 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e001      	b.n	80014ec <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	891b      	ldrh	r3, [r3, #8]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	f3bf 8f5b 	dmb	ish
 800150a:	e8d3 1f5f 	ldrexh	r1, [r3]
 800150e:	4411      	add	r1, r2
 8001510:	e8c3 1f50 	strexh	r0, r1, [r3]
 8001514:	2800      	cmp	r0, #0
 8001516:	d1f8      	bne.n	800150a <_ZNSt13__atomic_baseItEpLEt+0x14>
 8001518:	f3bf 8f5b 	dmb	ish
 800151c:	b28b      	uxth	r3, r1
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	2305      	movs	r3, #5
 8001536:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8001538:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800153c:	6938      	ldr	r0, [r7, #16]
 800153e:	f7ff fede 	bl	80012fe <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8001542:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f3bf 8f5b 	dmb	ish
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f3bf 8f5b 	dmb	ish
 8001550:	b29b      	uxth	r3, r3
 8001552:	bf00      	nop
      { return load(); }
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	f3bf 8f5b 	dmb	ish
 8001570:	e8d3 1f5f 	ldrexh	r1, [r3]
 8001574:	eba1 0102 	sub.w	r1, r1, r2
 8001578:	e8c3 1f50 	strexh	r0, r1, [r3]
 800157c:	2800      	cmp	r0, #0
 800157e:	d1f7      	bne.n	8001570 <_ZNSt13__atomic_baseItEmIEt+0x14>
 8001580:	f3bf 8f5b 	dmb	ish
 8001584:	b28b      	uxth	r3, r1
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <_ZN5MutexC1Ev>:
#include "semphr.h"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
{
    rtSemaphoreHandle = xSemaphoreCreateMutex();
 8001598:	2001      	movs	r0, #1
 800159a:	f003 f975 	bl	8004888 <xQueueCreateMutex>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	601a      	str	r2, [r3, #0]

    CUBE_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <_ZN5MutexC1Ev+0x28>
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <_ZN5MutexC1Ev+0x34>)
 80015ae:	2215      	movs	r2, #21
 80015b0:	4905      	ldr	r1, [pc, #20]	; (80015c8 <_ZN5MutexC1Ev+0x38>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f940 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>
}
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08007dfc 	.word	0x08007dfc
 80015c8:	08007e18 	.word	0x08007e18

080015cc <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete(rtSemaphoreHandle);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fcef 	bl	8004fbc <vQueueDelete>
}
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4908      	ldr	r1, [pc, #32]	; (8001624 <_ZN5Mutex4LockEm+0x3c>)
 8001602:	fba1 1303 	umull	r1, r3, r1, r3
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	4619      	mov	r1, r3
 800160a:	4610      	mov	r0, r2
 800160c:	f003 fbca 	bl	8004da4 <xQueueSemaphoreTake>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	bf0c      	ite	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	2300      	movne	r3, #0
 800161a:	b2db      	uxtb	r3, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	f003 f93d 	bl	80048b8 <xQueueGenericSend>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
{
    //Initialize RTOS Queue handle with given depth
    rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	2200      	movs	r2, #0
 8001662:	210c      	movs	r1, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f898 	bl	800479a <xQueueGenericCreate>
 800166a:	4602      	mov	r2, r0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	601a      	str	r2, [r3, #0]
    queueDepth = depth;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	809a      	strh	r2, [r3, #4]
}
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN5Queue4SendER7Command>:
 * @brief Sends a command object to the queue (sends to back of queue in FIFO order)
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::Send(Command& command)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
    if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	220f      	movs	r2, #15
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	f003 f910 	bl	80048b8 <xQueueGenericSend>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZN5Queue4SendER7Command+0x2c>
        return true;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <_ZN5Queue4SendER7Command+0x3a>

    //TODO: It may be possible to have this automatically set the command to not free data externally as we've "passed" control of the data over, which might let us use a destructor to free the data

    CUBE_PRINT("Could not send data to queue!\n");
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <_ZN5Queue4SendER7Command+0x44>)
 80016ae:	f000 f863 	bl	8001778 <_Z10cube_printPKcz>
    command.Reset();
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f7ff feec 	bl	8001490 <_ZN7Command5ResetEv>

    return false;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08007e5c 	.word	0x08007e5c

080016c8 <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fa81 	bl	8004be4 <xQueueReceive>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_ZN5Queue11ReceiveWaitER7Command+0x2e>
        return true;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <_ZN5Queue11ReceiveWaitER7Command+0x30>
    }
    return false;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_Znwj>:

/* Other ------------------------------------------------------------------*/
// Override the new and delete operator to ensure heap4 is used for dynamic memory allocation
inline void* operator new(size_t size) { return cube_malloc(size); }
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe05 	bl	8001318 <_Z11cube_mallocm>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
{
    if (depth == 0)
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <_ZN4TaskC1Et+0x1a>
        qEvtQueue = nullptr;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	e00b      	b.n	800174a <_ZN4TaskC1Et+0x32>
    else
        qEvtQueue = new Queue(depth);
 8001732:	2008      	movs	r0, #8
 8001734:	f7ff ffe4 	bl	8001700 <_Znwj>
 8001738:	4603      	mov	r3, r0
 800173a:	461c      	mov	r4, r3
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	4619      	mov	r1, r3
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff ff86 	bl	8001652 <_ZN5QueueC1Et>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	605c      	str	r4, [r3, #4]
    rtTaskHandle = nullptr;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}

0800175a <_ZN4Task20SendCommandReferenceER7Command>:

    void InitTask();

    Queue* GetEventQueue() const { return qEvtQueue; }
    void SendCommand(Command cmd) { qEvtQueue->Send(cmd); }
    void SendCommandReference(Command& cmd) { qEvtQueue->Send(cmd); }
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff88 	bl	8001680 <_ZN5Queue4SendER7Command>
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_Z10cube_printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void cube_print(const char* str, ...)
{
 8001778:	b40f      	push	{r0, r1, r2, r3}
 800177a:	b580      	push	{r7, lr}
 800177c:	b0b6      	sub	sp, #216	; 0xd8
 800177e:	af00      	add	r7, sp, #0
#ifndef DISABLE_DEBUG
    //Try to take the VA list mutex
    if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8001780:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001784:	4829      	ldr	r0, [pc, #164]	; (800182c <_Z10cube_printPKcz+0xb4>)
 8001786:	f7ff ff2f 	bl	80015e8 <_ZN5Mutex4LockEm>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03f      	beq.n	8001810 <_Z10cube_printPKcz+0x98>
        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	22bc      	movs	r2, #188	; 0xbc
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f005 fda7 	bl	80072f0 <memset>
        va_list argument_list;
        va_start(argument_list, str);
 80017a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 80017aa:	1d38      	adds	r0, r7, #4
 80017ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80017b4:	21bf      	movs	r1, #191	; 0xbf
 80017b6:	f005 fd8d 	bl	80072d4 <vsniprintf>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        va_end(argument_list);
        if (buflen > 0) {
 80017c0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dd06      	ble.n	80017d6 <_Z10cube_printPKcz+0x5e>
            str_buffer[buflen] = '\0';
 80017c8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80017cc:	33d8      	adds	r3, #216	; 0xd8
 80017ce:	443b      	add	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	f803 2cd4 	strb.w	r2, [r3, #-212]
        }

        // Release the VA List Mutex
        Global::vaListMutex.Unlock();
 80017d6:	4815      	ldr	r0, [pc, #84]	; (800182c <_Z10cube_printPKcz+0xb4>)
 80017d8:	f7ff ff26 	bl	8001628 <_ZN5Mutex6UnlockEv>

        //Generate a command
        Command cmd(DATA_COMMAND, (uint16_t)CUBE_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 80017dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017e0:	2201      	movs	r2, #1
 80017e2:	2102      	movs	r1, #2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fdd5 	bl	8001394 <_ZN7CommandC1E15GLOBAL_COMMANDSt>

        //Copy data into the command
        cmd.CopyDataToCommand(str_buffer, buflen);
 80017ea:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80017ee:	1d39      	adds	r1, r7, #4
 80017f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe25 	bl	8001444 <_ZN7Command17CopyDataToCommandEPht>

        //Send this packet off to the UART Task
        CubeTask::Inst().SendCommandReference(cmd);
 80017fa:	f7fe fe6d 	bl	80004d8 <_ZN8CubeTask4InstEv>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff ffa6 	bl	800175a <_ZN4Task20SendCommandReferenceER7Command>
    {
        // Print out that we could not acquire the VA list mutex
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
    }
#endif
}
 800180e:	e005      	b.n	800181c <_Z10cube_printPKcz+0xa4>
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_Z10cube_printPKcz+0xb8>)
 8001812:	2238      	movs	r2, #56	; 0x38
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <_Z10cube_printPKcz+0xbc>)
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f80e 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>
}
 800181c:	bf00      	nop
 800181e:	37d8      	adds	r7, #216	; 0xd8
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001826:	b004      	add	sp, #16
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000fb0 	.word	0x20000fb0
 8001830:	08007e7c 	.word	0x08007e7c
 8001834:	08007e9c 	.word	0x08007e9c

08001838 <_Z17cube_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void cube_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8001838:	b408      	push	{r3}
 800183a:	b580      	push	{r7, lr}
 800183c:	b0d9      	sub	sp, #356	; 0x164
 800183e:	af02      	add	r7, sp, #8
 8001840:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001844:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001848:	6019      	str	r1, [r3, #0]
 800184a:	4611      	mov	r1, r2
 800184c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001850:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8001854:	4602      	mov	r2, r0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800185c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001860:	460a      	mov	r2, r1
 8001862:	801a      	strh	r2, [r3, #0]
    // If assertion succeeds, do nothing
    if (condition) {
 8001864:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001868:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 8091 	bne.w	8001996 <_Z17cube_assert_debugbPKctS0_z+0x15e>
        return;
    }

#ifndef DISABLE_DEBUG

    bool printMessage = false;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    // NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
    // NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

    // We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
    if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 800187a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800187e:	484a      	ldr	r0, [pc, #296]	; (80019a8 <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8001880:	f7ff feb2 	bl	80015e8 <_ZN5Mutex4LockEm>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <_Z17cube_assert_debugbPKctS0_z+0x58>
        // We have the mutex, we can now safely print the message
        printMessage = true;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }

    vTaskSuspendAll();
 8001890:	f003 ffaa 	bl	80057e8 <vTaskSuspendAll>

    //If we have the vaListMutex, we can safely use vsnprintf
    if (printMessage) {
 8001894:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001898:	2b00      	cmp	r3, #0
 800189a:	d072      	beq.n	8001982 <_Z17cube_assert_debugbPKctS0_z+0x14a>
        // Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
        uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 800189c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	229c      	movs	r2, #156	; 0x9c
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fd1e 	bl	80072f0 <memset>
        int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 80018b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018b8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018c2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80018c6:	f107 000c 	add.w	r0, r7, #12
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <_Z17cube_assert_debugbPKctS0_z+0x174>)
 80018d0:	219f      	movs	r1, #159	; 0x9f
 80018d2:	f005 fc9f 	bl	8007214 <sniprintf>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
        if (res < 0) {
 80018dc:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da0a      	bge.n	80018fa <_Z17cube_assert_debugbPKctS0_z+0xc2>
            // If we failed to generate the header, just format the line number
            snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 80018e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80018e8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f107 000c 	add.w	r0, r7, #12
 80018f2:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <_Z17cube_assert_debugbPKctS0_z+0x178>)
 80018f4:	219f      	movs	r1, #159	; 0x9f
 80018f6:	f005 fc8d 	bl	8007214 <sniprintf>
        }

        // Output the header to the debug port
        DEFAULT_DEBUG_UART_DRIVER->Transmit(header_buf, strlen(reinterpret_cast<char*>(header_buf)));
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc3e 	bl	8000180 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	4829      	ldr	r0, [pc, #164]	; (80019b4 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8001910:	f000 f9d8 	bl	8001cc4 <_ZN10UARTDriver8TransmitEPht>

        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        if (printMessage && str != nullptr) {
 8001914:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001918:	2b00      	cmp	r3, #0
 800191a:	d037      	beq.n	800198c <_Z17cube_assert_debugbPKctS0_z+0x154>
 800191c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001920:	2b00      	cmp	r3, #0
 8001922:	d033      	beq.n	800198c <_Z17cube_assert_debugbPKctS0_z+0x154>
            uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800192a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800192e:	229c      	movs	r2, #156	; 0x9c
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f005 fcdc 	bl	80072f0 <memset>
            va_list argument_list;
            va_start(argument_list, str);
 8001938:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800193c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8001940:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001948:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800194c:	219f      	movs	r1, #159	; 0x9f
 800194e:	f005 fcc1 	bl	80072d4 <vsniprintf>
 8001952:	4603      	mov	r3, r0
 8001954:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
            va_end(argument_list);
            if (buflen > 0) {
 8001958:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd15      	ble.n	800198c <_Z17cube_assert_debugbPKctS0_z+0x154>
                str_buffer[buflen] = '\0';
 8001960:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001964:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001968:	443b      	add	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	f803 2cac 	strb.w	r2, [r3, #-172]
                DEFAULT_DEBUG_UART_DRIVER->Transmit(str_buffer, buflen);
 8001970:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 8001974:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001978:	4619      	mov	r1, r3
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 800197c:	f000 f9a2 	bl	8001cc4 <_ZN10UARTDriver8TransmitEPht>
 8001980:	e004      	b.n	800198c <_Z17cube_assert_debugbPKctS0_z+0x154>
            }
        }
    }
    else {
        DEFAULT_DEBUG_UART_DRIVER->Transmit((uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55);
 8001982:	2237      	movs	r2, #55	; 0x37
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <_Z17cube_assert_debugbPKctS0_z+0x180>)
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8001988:	f000 f99c 	bl	8001cc4 <_ZN10UARTDriver8TransmitEPht>
    }

#endif

    HAL_NVIC_SystemReset();
 800198c:	f000 fb7b 	bl	8002086 <HAL_NVIC_SystemReset>

    // We should not reach this code, but if we do, we should resume the scheduler
    xTaskResumeAll();
 8001990:	f003 ff38 	bl	8005804 <xTaskResumeAll>
 8001994:	e000      	b.n	8001998 <_Z17cube_assert_debugbPKctS0_z+0x160>
        return;
 8001996:	bf00      	nop
}
 8001998:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a2:	b001      	add	sp, #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000fb0 	.word	0x20000fb0
 80019ac:	08007eb8 	.word	0x08007eb8
 80019b0:	08007ef0 	.word	0x08007ef0
 80019b4:	20000088 	.word	0x20000088
 80019b8:	08007f30 	.word	0x08007f30

080019bc <_Z41__static_initialization_and_destruction_0ii>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d102      	bne.n	80019dc <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019d8:	f7ff fdda 	bl	8001590 <_ZN5MutexC1Ev>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019ee:	f7ff fded 	bl	80015cc <_ZN5MutexD1Ev>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000fb0 	.word	0x20000fb0

08001a00 <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff ffd7 	bl	80019bc <_Z41__static_initialization_and_destruction_0ii>
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ffcf 	bl	80019bc <_Z41__static_initialization_and_destruction_0ii>
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZNK7Command14GetDataPointerEv>:

    void Reset();    // Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

    // Getters
    uint16_t GetDataSize() const;
    uint8_t* GetDataPointer() const { return data; }
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <_ZNK7Command10GetCommandEv>:
    GLOBAL_COMMANDS GetCommand() const { return command; }
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_ZNK7Command14GetTaskCommandEv>:
    uint16_t GetTaskCommand() const { return taskCommand; }
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	885b      	ldrh	r3, [r3, #2]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <_ZN8CubeTask7RunTaskEPv>:
    }

    void InitTask();

protected:
    static void RunTask(void* pvParams) { CubeTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	f7fe fd35 	bl	80004d8 <_ZN8CubeTask4InstEv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f836 	bl	8001ae4 <_ZN8CubeTask3RunEPv>
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN8CubeTask8InitTaskEv>:

/**
 * @brief Initializes Cube task with the RTOS scheduler
*/
void CubeTask::InitTask()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    CUBE_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <_ZN8CubeTask8InitTaskEv+0x1c>
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <_ZN8CubeTask8InitTaskEv+0x50>)
 8001a92:	2211      	movs	r2, #17
 8001a94:	490f      	ldr	r1, [pc, #60]	; (8001ad4 <_ZN8CubeTask8InitTaskEv+0x54>)
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fece 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>

    // Start the task
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)CubeTask::RunTask,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aaa:	490b      	ldr	r1, [pc, #44]	; (8001ad8 <_ZN8CubeTask8InitTaskEv+0x58>)
 8001aac:	480b      	ldr	r0, [pc, #44]	; (8001adc <_ZN8CubeTask8InitTaskEv+0x5c>)
 8001aae:	f003 fcb1 	bl	8005414 <xTaskCreate>
 8001ab2:	60f8      	str	r0, [r7, #12]
            (void*)this,
            (UBaseType_t)UART_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    //Ensure creation succeded
    CUBE_ASSERT(rtValue == pdPASS, "CUBETask::InitTask() - xTaskCreate() failed");
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <_ZN8CubeTask8InitTaskEv+0x46>
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <_ZN8CubeTask8InitTaskEv+0x60>)
 8001abc:	221d      	movs	r2, #29
 8001abe:	4905      	ldr	r1, [pc, #20]	; (8001ad4 <_ZN8CubeTask8InitTaskEv+0x54>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff feb9 	bl	8001838 <_Z17cube_assert_debugbPKctS0_z>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	08007f68 	.word	0x08007f68
 8001ad4:	08007f8c 	.word	0x08007f8c
 8001ad8:	08007fa4 	.word	0x08007fa4
 8001adc:	08001a63 	.word	0x08001a63
 8001ae0:	08007fb0 	.word	0x08007fb0

08001ae4 <_ZN8CubeTask3RunEPv>:
/**
 * @brief Instance Run loop for the Cube Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void CubeTask::Run(void * pvParams)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
    //UART Task loop
    while(1) {
        Command cm;
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fc35 	bl	8001362 <_ZN7CommandC1Ev>

        //Wait forever for a command
        qEvtQueue->ReceiveWait(cm);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fde0 	bl	80016c8 <_ZN5Queue11ReceiveWaitER7Command>

        //Process the command
        HandleCommand(cm);
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f802 	bl	8001b18 <_ZN8CubeTask13HandleCommandER7Command>
    }
 8001b14:	e7eb      	b.n	8001aee <_ZN8CubeTask3RunEPv+0xa>
	...

08001b18 <_ZN8CubeTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the Cube task primary event queue. Responsible for
 *           handling all commands, even if unsupported. (Unexpected commands must still be reset)
 * @param cm Reference to the command object to handle
*/
void CubeTask::HandleCommand(Command& cm)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    //Switch for the GLOBAL_COMMAND
    switch (cm.GetCommand()) {
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f7ff ff87 	bl	8001a36 <_ZNK7Command10GetCommandEv>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d11c      	bne.n	8001b68 <_ZN8CubeTask13HandleCommandER7Command+0x50>
    case DATA_COMMAND: {
        //Switch for task specific command within DATA_COMMAND
        switch (cm.GetTaskCommand()) {
 8001b2e:	6838      	ldr	r0, [r7, #0]
 8001b30:	f7ff ff8c 	bl	8001a4c <_ZNK7Command14GetTaskCommandEv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10d      	bne.n	8001b56 <_ZN8CubeTask13HandleCommandER7Command+0x3e>
        case CUBE_TASK_COMMAND_SEND_DEBUG:
#ifndef DISABLE_DEBUG
                DEFAULT_DEBUG_UART_DRIVER->Transmit(cm.GetDataPointer(), cm.GetDataSize());
 8001b3a:	6838      	ldr	r0, [r7, #0]
 8001b3c:	f7ff ff70 	bl	8001a20 <_ZNK7Command14GetDataPointerEv>
 8001b40:	4604      	mov	r4, r0
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f7ff fcc6 	bl	80014d4 <_ZNK7Command11GetDataSizeEv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	480e      	ldr	r0, [pc, #56]	; (8001b88 <_ZN8CubeTask13HandleCommandER7Command+0x70>)
 8001b50:	f000 f8b8 	bl	8001cc4 <_ZN10UARTDriver8TransmitEPht>
#endif
            break;
 8001b54:	e008      	b.n	8001b68 <_ZN8CubeTask13HandleCommandER7Command+0x50>
        default:
            CUBE_PRINT("CUBETask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	f7ff ff78 	bl	8001a4c <_ZNK7Command14GetTaskCommandEv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <_ZN8CubeTask13HandleCommandER7Command+0x74>)
 8001b62:	f7ff fe09 	bl	8001778 <_Z10cube_printPKcz>
            break;
 8001b66:	bf00      	nop
        }
    default:
        CUBE_PRINT("CUBETask - Received Unsupported Command {%d}\n", cm.GetCommand());
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f7ff ff64 	bl	8001a36 <_ZNK7Command10GetCommandEv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <_ZN8CubeTask13HandleCommandER7Command+0x78>)
 8001b74:	f7ff fe00 	bl	8001778 <_Z10cube_printPKcz>
        break;
 8001b78:	bf00      	nop
    }
    }

    //No matter what we happens, we must reset allocated data
    cm.Reset();
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f7ff fc88 	bl	8001490 <_ZN7Command5ResetEv>
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	20000088 	.word	0x20000088
 8001b8c:	08007fdc 	.word	0x08007fdc
 8001b90:	08008010 	.word	0x08008010

08001b94 <LL_USART_IsActiveFlag_PE>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <LL_USART_IsActiveFlag_FE>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_USART_IsActiveFlag_NE>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_USART_IsActiveFlag_ORE>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <LL_USART_IsActiveFlag_RXNE>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_USART_IsActiveFlag_TC>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_USART_IsActiveFlag_TXE>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7c:	2b80      	cmp	r3, #128	; 0x80
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	605a      	str	r2, [r3, #4]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN10UARTDriver8TransmitEPht>:
 * @param data The data to transmit
 * @param len The length of the data to transmit
 * @return True if the transmission was successful, false otherwise
 */
bool UARTDriver::Transmit(uint8_t* data, uint16_t len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
    // Loop through and transmit each byte via. polling
    for (uint16_t i = 0; i < len; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	82fb      	strh	r3, [r7, #22]
 8001cd6:	e019      	b.n	8001d0c <_ZN10UARTDriver8TransmitEPht+0x48>
        LL_USART_TransmitData8(kUart_, data[i]);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	8afb      	ldrh	r3, [r7, #22]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7ff ffdf 	bl	8001ca8 <LL_USART_TransmitData8>

        // Wait until the TX Register Empty Flag is set
        while (!LL_USART_IsActiveFlag_TXE(kUart_)) {}
 8001cea:	bf00      	nop
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffbb 	bl	8001c6c <LL_USART_IsActiveFlag_TXE>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f2      	bne.n	8001cec <_ZN10UARTDriver8TransmitEPht+0x28>
    for (uint16_t i = 0; i < len; i++) {
 8001d06:	8afb      	ldrh	r3, [r7, #22]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	82fb      	strh	r3, [r7, #22]
 8001d0c:	8afa      	ldrh	r2, [r7, #22]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3e1      	bcc.n	8001cd8 <_ZN10UARTDriver8TransmitEPht+0x14>
    }

    // Wait until the transfer complete flag is set
    while (!LL_USART_IsActiveFlag_TC(kUart_)) {}
 8001d14:	bf00      	nop
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff94 	bl	8001c48 <LL_USART_IsActiveFlag_TC>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f2      	bne.n	8001d16 <_ZN10UARTDriver8TransmitEPht+0x52>

    return true;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN10UARTDriver11GetRxErrorsEv>:
/**
 * @brief Checks UART Rx error flags, if any are set returns true
 * @return true if any error flags are set, false otherwise
 */
bool UARTDriver::GetRxErrors()
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
    bool hasErrors = false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]

    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff58 	bl	8001c00 <LL_USART_IsActiveFlag_ORE>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <_ZN10UARTDriver11GetRxErrorsEv+0x2c>
        hasErrors = true;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e02e      	b.n	8001dc4 <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if (LL_USART_IsActiveFlag_NE(kUart_)) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff36 	bl	8001bdc <LL_USART_IsActiveFlag_NE>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <_ZN10UARTDriver11GetRxErrorsEv+0x4c>
        hasErrors = true;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e01e      	b.n	8001dc4 <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_FE(kUart_)) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff14 	bl	8001bb8 <LL_USART_IsActiveFlag_FE>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <_ZN10UARTDriver11GetRxErrorsEv+0x6c>
        hasErrors = true;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e00e      	b.n	8001dc4 <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_PE(kUart_)) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fef2 	bl	8001b94 <LL_USART_IsActiveFlag_PE>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
        hasErrors = true;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
    }

    return hasErrors;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZN10UARTDriver14HandleIRQ_UARTEv>:
/**
 * @brief Handles an interrupt for the UART
 * @attention MUST be called inside USARTx_IRQHandler
 */
void UARTDriver::HandleIRQ_UART()
{
 8001dce:	b5b0      	push	{r4, r5, r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
    // Call the callback if RXNE is set
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff22 	bl	8001c24 <LL_USART_IsActiveFlag_RXNE>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01d      	beq.n	8001e2c <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
        // Read the data from the data register
        if (rxCharBuf_ != nullptr) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <_ZN10UARTDriver14HandleIRQ_UARTEv+0x3c>
            *rxCharBuf_ = LL_USART_ReceiveData8(kUart_);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685c      	ldr	r4, [r3, #4]
 8001e00:	4610      	mov	r0, r2
 8001e02:	f7ff ff45 	bl	8001c90 <LL_USART_ReceiveData8>
 8001e06:	4603      	mov	r3, r0
 8001e08:	7023      	strb	r3, [r4, #0]
        }

        // Call the receiver interrupt
        if(rxReceiver_ != nullptr) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
            rxReceiver_->InterruptRxData(GetRxErrors());
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681c      	ldr	r4, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689d      	ldr	r5, [r3, #8]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff8b 	bl	8001d3a <_ZN10UARTDriver11GetRxErrorsEv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4619      	mov	r1, r3
 8001e28:	4628      	mov	r0, r5
 8001e2a:	47a0      	blx	r4
        }
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bdb0      	pop	{r4, r5, r7, pc}

08001e34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f000 f8ec 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e44:	200f      	movs	r0, #15
 8001e46:	f7ff f959 	bl	80010fc <HAL_InitTick>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	e001      	b.n	8001e5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e56:	f7fe ffb3 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_IncTick+0x1c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <HAL_IncTick+0x1c>)
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000fb4 	.word	0x20000fb4
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <HAL_GetTick+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000fb4 	.word	0x20000fb4

08001e9c <__NVIC_SetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff4:	f3bf 8f4f 	dsb	sy
}
 8001ff8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <__NVIC_SystemReset+0x24>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002002:	4904      	ldr	r1, [pc, #16]	; (8002014 <__NVIC_SystemReset+0x24>)
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_SystemReset+0x28>)
 8002006:	4313      	orrs	r3, r2
 8002008:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800200a:	f3bf 8f4f 	dsb	sy
}
 800200e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <__NVIC_SystemReset+0x20>
 8002014:	e000ed00 	.word	0xe000ed00
 8002018:	05fa0004 	.word	0x05fa0004

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff39 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff4e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff9c 	bl	8001f8c <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff6b 	bl	8001f38 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff41 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800208a:	f7ff ffb1 	bl	8001ff0 <__NVIC_SystemReset>

0800208e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00e      	b.n	80020be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe feb9 	bl	8000e28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020de:	e160      	b.n	80023a2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8152 	beq.w	800239c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800210c:	2b02      	cmp	r3, #2
 800210e:	d130      	bne.n	8002172 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002146:	2201      	movs	r2, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d123      	bne.n	8002202 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	6939      	ldr	r1, [r7, #16]
 80021fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80ac 	beq.w	800239c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002244:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800225c:	4a59      	ldr	r2, [pc, #356]	; (80023c4 <HAL_GPIO_Init+0x2fc>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a51      	ldr	r2, [pc, #324]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d025      	beq.n	80022d4 <HAL_GPIO_Init+0x20c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a50      	ldr	r2, [pc, #320]	; (80023cc <HAL_GPIO_Init+0x304>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d01f      	beq.n	80022d0 <HAL_GPIO_Init+0x208>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <HAL_GPIO_Init+0x308>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d019      	beq.n	80022cc <HAL_GPIO_Init+0x204>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_GPIO_Init+0x200>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_GPIO_Init+0x310>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <HAL_GPIO_Init+0x1fc>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_GPIO_Init+0x314>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <HAL_GPIO_Init+0x1f8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4b      	ldr	r2, [pc, #300]	; (80023e0 <HAL_GPIO_Init+0x318>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_GPIO_Init+0x1f4>
 80022b8:	2306      	movs	r3, #6
 80022ba:	e00c      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022bc:	2307      	movs	r3, #7
 80022be:	e00a      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022c0:	2305      	movs	r3, #5
 80022c2:	e008      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e006      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e004      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022d4:	2300      	movs	r3, #0
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022e6:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_GPIO_Init+0x2fc>)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002318:	4a32      	ldr	r2, [pc, #200]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002396:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f ae97 	bne.w	80020e0 <HAL_GPIO_Init+0x18>
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e12b      	b.n	8002682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fd10 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800247a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800247c:	f000 ff0e 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8002480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a81      	ldr	r2, [pc, #516]	; (800268c <HAL_I2C_Init+0x274>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d807      	bhi.n	800249c <HAL_I2C_Init+0x84>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a80      	ldr	r2, [pc, #512]	; (8002690 <HAL_I2C_Init+0x278>)
 8002490:	4293      	cmp	r3, r2
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e006      	b.n	80024aa <HAL_I2C_Init+0x92>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a7d      	ldr	r2, [pc, #500]	; (8002694 <HAL_I2C_Init+0x27c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	bf94      	ite	ls
 80024a4:	2301      	movls	r3, #1
 80024a6:	2300      	movhi	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0e7      	b.n	8002682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a78      	ldr	r2, [pc, #480]	; (8002698 <HAL_I2C_Init+0x280>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9b      	lsrs	r3, r3, #18
 80024bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a6a      	ldr	r2, [pc, #424]	; (800268c <HAL_I2C_Init+0x274>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d802      	bhi.n	80024ec <HAL_I2C_Init+0xd4>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3301      	adds	r3, #1
 80024ea:	e009      	b.n	8002500 <HAL_I2C_Init+0xe8>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	4a69      	ldr	r2, [pc, #420]	; (800269c <HAL_I2C_Init+0x284>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	3301      	adds	r3, #1
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	430b      	orrs	r3, r1
 8002506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002512:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	495c      	ldr	r1, [pc, #368]	; (800268c <HAL_I2C_Init+0x274>)
 800251c:	428b      	cmp	r3, r1
 800251e:	d819      	bhi.n	8002554 <HAL_I2C_Init+0x13c>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e59      	subs	r1, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fbb1 f3f3 	udiv	r3, r1, r3
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002534:	400b      	ands	r3, r1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_I2C_Init+0x138>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e59      	subs	r1, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fbb1 f3f3 	udiv	r3, r1, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	e051      	b.n	80025f4 <HAL_I2C_Init+0x1dc>
 8002550:	2304      	movs	r3, #4
 8002552:	e04f      	b.n	80025f4 <HAL_I2C_Init+0x1dc>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d111      	bne.n	8002580 <HAL_I2C_Init+0x168>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e012      	b.n	80025a6 <HAL_I2C_Init+0x18e>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	0099      	lsls	r1, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Init+0x196>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e022      	b.n	80025f4 <HAL_I2C_Init+0x1dc>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10e      	bne.n	80025d4 <HAL_I2C_Init+0x1bc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e58      	subs	r0, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	440b      	add	r3, r1
 80025c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d2:	e00f      	b.n	80025f4 <HAL_I2C_Init+0x1dc>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	6809      	ldr	r1, [r1, #0]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6911      	ldr	r1, [r2, #16]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68d2      	ldr	r2, [r2, #12]
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	000186a0 	.word	0x000186a0
 8002690:	001e847f 	.word	0x001e847f
 8002694:	003d08ff 	.word	0x003d08ff
 8002698:	431bde83 	.word	0x431bde83
 800269c:	10624dd3 	.word	0x10624dd3

080026a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b08b      	sub	sp, #44	; 0x2c
 80026a4:	af06      	add	r7, sp, #24
 80026a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0c4      	b.n	800283c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fcfa 	bl	80010c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fe7b 	bl	80043d4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e040      	b.n	8002766 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3301      	adds	r3, #1
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	3303      	adds	r3, #3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	333c      	adds	r3, #60	; 0x3c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3340      	adds	r3, #64	; 0x40
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	3301      	adds	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3b9      	bcc.n	80026e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e044      	b.n	8002800 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d3b5      	bcc.n	8002776 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	687e      	ldr	r6, [r7, #4]
 8002812:	466d      	mov	r5, sp
 8002814:	f106 0410 	add.w	r4, r6, #16
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	602b      	str	r3, [r5, #0]
 8002820:	1d33      	adds	r3, r6, #4
 8002822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	f001 fdef 	bl	8004408 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e31d      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002856:	4b94      	ldr	r3, [pc, #592]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002860:	4b91      	ldr	r3, [pc, #580]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07b      	beq.n	800296e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d006      	beq.n	800288a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06a      	beq.n	800296c <HAL_RCC_OscConfig+0x128>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d166      	bne.n	800296c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e2f7      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x74>
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7e      	ldr	r2, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e02d      	b.n	8002914 <HAL_RCC_OscConfig+0xd0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x96>
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0xd0>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0xb8>
 80028e2:	4b71      	ldr	r3, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a70      	ldr	r2, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6d      	ldr	r2, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0xd0>
 80028fc:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a69      	ldr	r2, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a66      	ldr	r2, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 800290e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fab4 	bl	8001e88 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fab0 	bl	8001e88 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e2ad      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002936:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0xe0>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff faa0 	bl	8001e88 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff fa9c 	bl	8001e88 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e299      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800295e:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x108>
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d05a      	beq.n	8002a30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d119      	bne.n	80029ba <HAL_RCC_OscConfig+0x176>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x160>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e276      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	493d      	ldr	r1, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b8:	e03a      	b.n	8002a30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d020      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x268>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fa5e 	bl	8001e88 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d0:	f7ff fa5a 	bl	8001e88 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e257      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	492a      	ldr	r1, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
 8002a02:	e015      	b.n	8002a30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x268>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fa3d 	bl	8001e88 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff fa39 	bl	8001e88 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e236      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80b8 	beq.w	8002bae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d170      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x218>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e21a      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d921      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fc6b 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e208      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4906      	ldr	r1, [pc, #24]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	4901      	ldr	r1, [pc, #4]	; (8002aa8 <HAL_RCC_OscConfig+0x264>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e020      	b.n	8002aea <HAL_RCC_OscConfig+0x2a6>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab0:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4996      	ldr	r1, [pc, #600]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac2:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	4991      	ldr	r1, [pc, #580]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fc36 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e1d3      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	3301      	adds	r3, #1
 8002af2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002afa:	4a87      	ldr	r2, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002afc:	6892      	ldr	r2, [r2, #8]
 8002afe:	0912      	lsrs	r2, r2, #4
 8002b00:	f002 020f 	and.w	r2, r2, #15
 8002b04:	4985      	ldr	r1, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x4d8>)
 8002b06:	5c8a      	ldrb	r2, [r1, r2]
 8002b08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b0a:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x4dc>)
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0e:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <HAL_RCC_OscConfig+0x4e0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe faf2 	bl	80010fc <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d045      	beq.n	8002bae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	e1b5      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d029      	beq.n	8002b82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2e:	4b7e      	ldr	r3, [pc, #504]	; (8002d28 <HAL_RCC_OscConfig+0x4e4>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff f9a8 	bl	8001e88 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f9a4 	bl	8001e88 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1a1      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	496c      	ldr	r1, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	4967      	ldr	r1, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b82:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x4e4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f97e 	bl	8001e88 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b90:	f7ff f97a 	bl	8001e88 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e177      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d030      	beq.n	8002c1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <HAL_RCC_OscConfig+0x4e8>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f95e 	bl	8001e88 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f95a 	bl	8001e88 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e157      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002be2:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x38c>
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f947 	bl	8001e88 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff f943 	bl	8001e88 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e140      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80b5 	beq.w	8002d94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	4a36      	ldr	r2, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6253      	str	r3, [r2, #36]	; 0x24
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f90b 	bl	8001e88 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7ff f907 	bl	8001e88 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e104      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_RCC_OscConfig+0x4ec>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x466>
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x4c2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x488>
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbc:	6353      	str	r3, [r2, #52]	; 0x34
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc8:	6353      	str	r3, [r2, #52]	; 0x34
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4c2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x4aa>
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6353      	str	r3, [r2, #52]	; 0x34
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6353      	str	r3, [r2, #52]	; 0x34
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x4c2>
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x4d4>)
 8002d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d024      	beq.n	8002d58 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f8bb 	bl	8001e88 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d14:	e019      	b.n	8002d4a <HAL_RCC_OscConfig+0x506>
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08008064 	.word	0x08008064
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000004 	.word	0x20000004
 8002d28:	42470020 	.word	0x42470020
 8002d2c:	42470680 	.word	0x42470680
 8002d30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7ff f8a8 	bl	8001e88 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0a3      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4f0>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7ff f896 	bl	8001e88 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7ff f892 	bl	8001e88 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e08d      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ee      	bne.n	8002d60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d079      	beq.n	8002e90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d056      	beq.n	8002e50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d13b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_OscConfig+0x65c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f86a 	bl	8001e88 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7ff f866 	bl	8001e88 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e063      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	4319      	orrs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	430b      	orrs	r3, r1
 8002dee:	492b      	ldr	r1, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_RCC_OscConfig+0x65c>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff f845 	bl	8001e88 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7ff f841 	bl	8001e88 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03e      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x5be>
 8002e20:	e036      	b.n	8002e90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCC_OscConfig+0x65c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f82e 	bl	8001e88 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f82a 	bl	8001e88 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e027      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5ec>
 8002e4e:	e01f      	b.n	8002e90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e01a      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_OscConfig+0x658>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470060 	.word	0x42470060

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e11a      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d919      	bls.n	8002efa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x34>
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a89      	ldr	r2, [pc, #548]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b87      	ldr	r3, [pc, #540]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0201 	bic.w	r2, r3, #1
 8002ee0:	4985      	ldr	r1, [pc, #532]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee8:	4b83      	ldr	r3, [pc, #524]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0f9      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	497a      	ldr	r1, [pc, #488]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 808e 	beq.w	8003042 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0d7      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f46:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d115      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0cb      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0bf      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0b7      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f90:	f7fe ff7a 	bl	8001e88 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe ff72 	bl	8001e88 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e09b      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d1ee      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xfc>
 8002fc2:	e03e      	b.n	8003042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fce:	f7fe ff5b 	bl	8001e88 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e084      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b45      	ldr	r3, [pc, #276]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_ClockConfig+0x12a>
 8002ff0:	e027      	b.n	8003042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d11d      	bne.n	8003036 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe ff44 	bl	8001e88 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e06d      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x158>
 800301e:	e010      	b.n	8003042 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe ff32 	bl	8001e88 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e05b      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d219      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCC_ClockConfig+0x1be>
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	4923      	ldr	r1, [pc, #140]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCC_ClockConfig+0x254>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e034      	b.n	80030ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4917      	ldr	r1, [pc, #92]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490f      	ldr	r1, [pc, #60]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f823 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_ClockConfig+0x258>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490b      	ldr	r1, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x25c>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x260>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x264>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe f80a 	bl	80010fc <HAL_InitTick>
 80030e8:	4603      	mov	r3, r0
 80030ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ec:	7afb      	ldrb	r3, [r7, #11]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08008064 	.word	0x08008064
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b08e      	sub	sp, #56	; 0x38
 8003112:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003114:	4b58      	ldr	r3, [pc, #352]	; (8003278 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d00d      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 8003124:	2b0c      	cmp	r3, #12
 8003126:	f200 8092 	bhi.w	800324e <HAL_RCC_GetSysClockFreq+0x142>
 800312a:	2b04      	cmp	r3, #4
 800312c:	d002      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x28>
 800312e:	2b08      	cmp	r3, #8
 8003130:	d003      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x2e>
 8003132:	e08c      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_RCC_GetSysClockFreq+0x170>)
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003138:	e097      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCC_GetSysClockFreq+0x174>)
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800313e:	e094      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	0c9b      	lsrs	r3, r3, #18
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <HAL_RCC_GetSysClockFreq+0x178>)
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	0d9b      	lsrs	r3, r3, #22
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCC_GetSysClockFreq+0x16c>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d021      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	61fa      	str	r2, [r7, #28]
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_GetSysClockFreq+0x174>)
 8003170:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003174:	464a      	mov	r2, r9
 8003176:	fb03 f202 	mul.w	r2, r3, r2
 800317a:	2300      	movs	r3, #0
 800317c:	4644      	mov	r4, r8
 800317e:	fb04 f303 	mul.w	r3, r4, r3
 8003182:	4413      	add	r3, r2
 8003184:	4a3e      	ldr	r2, [pc, #248]	; (8003280 <HAL_RCC_GetSysClockFreq+0x174>)
 8003186:	4644      	mov	r4, r8
 8003188:	fba4 0102 	umull	r0, r1, r4, r2
 800318c:	440b      	add	r3, r1
 800318e:	4619      	mov	r1, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	2200      	movs	r2, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	617a      	str	r2, [r7, #20]
 8003198:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800319c:	f7fc fff8 	bl	8000190 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
 80031a8:	e04e      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	469a      	mov	sl, r3
 80031b0:	4693      	mov	fp, r2
 80031b2:	4652      	mov	r2, sl
 80031b4:	465b      	mov	r3, fp
 80031b6:	f04f 0000 	mov.w	r0, #0
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	0159      	lsls	r1, r3, #5
 80031c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c4:	0150      	lsls	r0, r2, #5
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	ebb2 080a 	subs.w	r8, r2, sl
 80031ce:	eb63 090b 	sbc.w	r9, r3, fp
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031e6:	ebb2 0408 	subs.w	r4, r2, r8
 80031ea:	eb63 0509 	sbc.w	r5, r3, r9
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	00eb      	lsls	r3, r5, #3
 80031f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fc:	00e2      	lsls	r2, r4, #3
 80031fe:	4614      	mov	r4, r2
 8003200:	461d      	mov	r5, r3
 8003202:	eb14 030a 	adds.w	r3, r4, sl
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	eb45 030b 	adc.w	r3, r5, fp
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321a:	4629      	mov	r1, r5
 800321c:	028b      	lsls	r3, r1, #10
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	4604      	mov	r4, r0
 8003224:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003228:	4601      	mov	r1, r0
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800323c:	f7fc ffa8 	bl	8000190 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800324c:	e00d      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0b5b      	lsrs	r3, r3, #13
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	3301      	adds	r3, #1
 800325e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800326c:	4618      	mov	r0, r3
 800326e:	3738      	adds	r7, #56	; 0x38
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	016e3600 	.word	0x016e3600
 8003284:	08008058 	.word	0x08008058

08003288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <HAL_RCC_GetHCLKFreq+0x10>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff2 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08008074 	.word	0x08008074

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffde 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0adb      	lsrs	r3, r3, #11
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08008074 	.word	0x08008074

080032ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40023800 	.word	0x40023800
 8003348:	40023c00 	.word	0x40023c00

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003358:	4b29      	ldr	r3, [pc, #164]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12c      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e016      	b.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6253      	str	r3, [r2, #36]	; 0x24
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800339c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	4a17      	ldr	r2, [pc, #92]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033b0:	d105      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033b8:	d101      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033ba:	2301      	movs	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 0201 	bic.w	r2, r3, #1
 80033d8:	490b      	ldr	r1, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07b      	b.n	8003516 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342e:	d009      	beq.n	8003444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
 8003436:	e005      	b.n	8003444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fd74 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	ea42 0103 	orr.w	r1, r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0104 	and.w	r1, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0210 	and.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003504:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e031      	b.n	8003594 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f829 	bl	800359c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f000 f979 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e03a      	b.n	800363e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d00e      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_TIM_Base_Start_IT+0x98>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_TIM_Base_Start_IT+0x9c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x58>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_TIM_Base_Start_IT+0xa0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d111      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d010      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e007      	b.n	800363c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40010800 	.word	0x40010800

08003654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0202 	mvn.w	r2, #2
 8003680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8c1 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b4 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8c3 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0204 	mvn.w	r2, #4
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f897 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f88a 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f899 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f86d 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f860 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f86f 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0210 	mvn.w	r2, #16
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2208      	movs	r2, #8
 8003782:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f843 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f836 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f845 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fae0 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f81f 	bl	8003842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d00f      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <TIM_Base_SetConfig+0xc8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <TIM_Base_SetConfig+0xcc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a29      	ldr	r2, [pc, #164]	; (8003924 <TIM_Base_SetConfig+0xd0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <TIM_Base_SetConfig+0xd4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d017      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <TIM_Base_SetConfig+0xc8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <TIM_Base_SetConfig+0xcc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <TIM_Base_SetConfig+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <TIM_Base_SetConfig+0xd4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a18      	ldr	r2, [pc, #96]	; (800392c <TIM_Base_SetConfig+0xd8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0x82>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <TIM_Base_SetConfig+0xdc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	615a      	str	r2, [r3, #20]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010800 	.word	0x40010800
 800392c:	40010c00 	.word	0x40010c00
 8003930:	40011000 	.word	0x40011000

08003934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e042      	b.n	80039cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fb6c 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f82b 	bl	80039d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a14:	f023 030c 	bic.w	r3, r3, #12
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a55      	ldr	r2, [pc, #340]	; (8003b94 <UART_SetConfig+0x1c0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d103      	bne.n	8003a4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a42:	f7ff fc3f 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	e002      	b.n	8003a50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a4a:	f7ff fc27 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8003a4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d14c      	bne.n	8003af4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009a      	lsls	r2, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	0119      	lsls	r1, r3, #4
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003a92:	fba3 0302 	umull	r0, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2064      	movs	r0, #100	; 0x64
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	3332      	adds	r3, #50	; 0x32
 8003aa4:	4a3c      	ldr	r2, [pc, #240]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab2:	4419      	add	r1, r3
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009a      	lsls	r2, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003acc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	2064      	movs	r0, #100	; 0x64
 8003ad4:	fb00 f303 	mul.w	r3, r0, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	3332      	adds	r3, #50	; 0x32
 8003ade:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 0207 	and.w	r2, r3, #7
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	440a      	add	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af2:	e04a      	b.n	8003b8a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009a      	lsls	r2, r3, #2
 8003afe:	441a      	add	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	0119      	lsls	r1, r3, #4
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009a      	lsls	r2, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003b2c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	2064      	movs	r0, #100	; 0x64
 8003b34:	fb00 f303 	mul.w	r3, r0, r3
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	3332      	adds	r3, #50	; 0x32
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4a:	4419      	add	r1, r3
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003b64:	fba3 0302 	umull	r0, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2064      	movs	r0, #100	; 0x64
 8003b6c:	fb00 f303 	mul.w	r3, r0, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <UART_SetConfig+0x1c4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	440a      	add	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40013800 	.word	0x40013800
 8003b98:	51eb851f 	.word	0x51eb851f

08003b9c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	613b      	str	r3, [r7, #16]
  return result;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	61bb      	str	r3, [r7, #24]
  return result;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3724      	adds	r7, #36	; 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b089      	sub	sp, #36	; 0x24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	613b      	str	r3, [r7, #16]
  return result;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	401a      	ands	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	61bb      	str	r3, [r7, #24]
  return result;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	431a      	orrs	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003c78:	bf00      	nop
 8003c7a:	3724      	adds	r7, #36	; 0x24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b089      	sub	sp, #36	; 0x24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	613b      	str	r3, [r7, #16]
  return result;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2103      	movs	r1, #3
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
  return result;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3724      	adds	r7, #36	; 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b089      	sub	sp, #36	; 0x24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	613b      	str	r3, [r7, #16]
  return result;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	210f      	movs	r1, #15
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	61bb      	str	r3, [r7, #24]
  return result;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003d30:	bf00      	nop
 8003d32:	3724      	adds	r7, #36	; 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b089      	sub	sp, #36	; 0x24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	613b      	str	r3, [r7, #16]
  return result;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	210f      	movs	r1, #15
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	61bb      	str	r3, [r7, #24]
  return result;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003d90:	bf00      	nop
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b088      	sub	sp, #32
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	613b      	str	r3, [r7, #16]
  return result;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003dc4:	e050      	b.n	8003e68 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d042      	beq.n	8003e62 <LL_GPIO_Init+0xc8>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d003      	beq.n	8003dec <LL_GPIO_Init+0x52>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d10d      	bne.n	8003e08 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	461a      	mov	r2, r3
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff16 	bl	8003c26 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fef8 	bl	8003bf8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff36 	bl	8003c82 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d11a      	bne.n	8003e54 <LL_GPIO_Init+0xba>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	60bb      	str	r3, [r7, #8]
  return result;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b07      	cmp	r3, #7
 8003e34:	d807      	bhi.n	8003e46 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff4d 	bl	8003cde <LL_GPIO_SetAFPin_0_7>
 8003e44:	e006      	b.n	8003e54 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff73 	bl	8003d3a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fe9d 	bl	8003b9c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1a7      	bne.n	8003dc6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <LL_RCC_MSI_GetRange+0x14>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	40023800 	.word	0x40023800

08003e98 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <LL_RCC_GetSysClkSource+0x14>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40023800 	.word	0x40023800

08003eb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <LL_RCC_GetAHBPrescaler+0x14>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <LL_RCC_GetAPB1Prescaler+0x14>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40023800 	.word	0x40023800

08003ee0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <LL_RCC_PLL_GetMainSource+0x14>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40023800 	.word	0x40023800

08003f10 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40023800 	.word	0x40023800

08003f28 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <LL_RCC_PLL_GetDivider+0x14>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40023800 	.word	0x40023800

08003f40 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003f48:	f000 f820 	bl	8003f8c <RCC_GetSystemClockFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f868 	bl	800402c <RCC_GetHCLKClockFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f876 	bl	8004058 <RCC_GetPCLK1ClockFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f882 	bl	8004080 <RCC_GetPCLK2ClockFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003f92:	f7ff ff81 	bl	8003e98 <LL_RCC_GetSysClkSource>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d832      	bhi.n	8004002 <RCC_GetSystemClockFreq+0x76>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <RCC_GetSystemClockFreq+0x18>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08004003 	.word	0x08004003
 8003fac:	08004003 	.word	0x08004003
 8003fb0:	08004003 	.word	0x08004003
 8003fb4:	08003fef 	.word	0x08003fef
 8003fb8:	08004003 	.word	0x08004003
 8003fbc:	08004003 	.word	0x08004003
 8003fc0:	08004003 	.word	0x08004003
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08004003 	.word	0x08004003
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08003ffb 	.word	0x08003ffb
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003fd8:	f7ff ff52 	bl	8003e80 <LL_RCC_MSI_GetRange>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	607b      	str	r3, [r7, #4]
      break;
 8003fec:	e014      	b.n	8004018 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <RCC_GetSystemClockFreq+0x98>)
 8003ff0:	607b      	str	r3, [r7, #4]
      break;
 8003ff2:	e011      	b.n	8004018 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <RCC_GetSystemClockFreq+0x9c>)
 8003ff6:	607b      	str	r3, [r7, #4]
      break;
 8003ff8:	e00e      	b.n	8004018 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003ffa:	f000 f855 	bl	80040a8 <RCC_PLL_GetFreqDomain_SYS>
 8003ffe:	6078      	str	r0, [r7, #4]
      break;
 8004000:	e00a      	b.n	8004018 <RCC_GetSystemClockFreq+0x8c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004002:	f7ff ff3d 	bl	8003e80 <LL_RCC_MSI_GetRange>
 8004006:	4603      	mov	r3, r0
 8004008:	0b5b      	lsrs	r3, r3, #13
 800400a:	3301      	adds	r3, #1
 800400c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	607b      	str	r3, [r7, #4]
      break;
 8004016:	bf00      	nop
  }

  return frequency;
 8004018:	687b      	ldr	r3, [r7, #4]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	00f42400 	.word	0x00f42400
 8004028:	016e3600 	.word	0x016e3600

0800402c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004034:	f7ff ff3c 	bl	8003eb0 <LL_RCC_GetAHBPrescaler>
 8004038:	4603      	mov	r3, r0
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <RCC_GetHCLKClockFreq+0x28>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	40d3      	lsrs	r3, r2
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08008064 	.word	0x08008064

08004058 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004060:	f7ff ff32 	bl	8003ec8 <LL_RCC_GetAPB1Prescaler>
 8004064:	4603      	mov	r3, r0
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <RCC_GetPCLK1ClockFreq+0x24>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	40d3      	lsrs	r3, r2
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	08008074 	.word	0x08008074

08004080 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004088:	f7ff ff2a 	bl	8003ee0 <LL_RCC_GetAPB2Prescaler>
 800408c:	4603      	mov	r3, r0
 800408e:	0adb      	lsrs	r3, r3, #11
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	40d3      	lsrs	r3, r2
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	08008074 	.word	0x08008074

080040a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
  uint32_t pllsource, pllinputfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80040ae:	f7ff ff23 	bl	8003ef8 <LL_RCC_PLL_GetMainSource>
 80040b2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d003      	beq.n	80040ca <RCC_PLL_GetFreqDomain_SYS+0x22>
 80040c2:	e005      	b.n	80040d0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80040c6:	607b      	str	r3, [r7, #4]
      break;
 80040c8:	e005      	b.n	80040d6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80040cc:	607b      	str	r3, [r7, #4]
      break;
 80040ce:	e002      	b.n	80040d6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80040d2:	607b      	str	r3, [r7, #4]
      break;
 80040d4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80040d6:	f7ff ff1b 	bl	8003f10 <LL_RCC_PLL_GetMultiplicator>
 80040da:	4603      	mov	r3, r0
 80040dc:	0c9b      	lsrs	r3, r3, #18
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	fb03 f402 	mul.w	r4, r3, r2
 80040ea:	f7ff ff1d 	bl	8003f28 <LL_RCC_PLL_GetDivider>
 80040ee:	4603      	mov	r3, r0
 80040f0:	0d9b      	lsrs	r3, r3, #22
 80040f2:	3301      	adds	r3, #1
 80040f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}
 8004100:	00f42400 	.word	0x00f42400
 8004104:	016e3600 	.word	0x016e3600
 8004108:	08008058 	.word	0x08008058

0800410c <LL_USART_IsEnabled>:
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_USART_SetStopBitsLength>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <LL_USART_SetHWFlowCtrl>:
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	615a      	str	r2, [r3, #20]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr
	...

0800417c <LL_USART_SetBaudRate>:
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d152      	bne.n	8004238 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4a4f      	ldr	r2, [pc, #316]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	b299      	uxth	r1, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	; 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	3332      	adds	r3, #50	; 0x32
 80041dc:	4a41      	ldr	r2, [pc, #260]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	440b      	add	r3, r1
 80041f2:	b299      	uxth	r1, r3
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009a      	lsls	r2, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	fb00 f303 	mul.w	r3, r0, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a31      	ldr	r2, [pc, #196]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	b29b      	uxth	r3, r3
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	b29b      	uxth	r3, r3
 800422c:	440b      	add	r3, r1
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	e04f      	b.n	80042d8 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009a      	lsls	r2, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	b29b      	uxth	r3, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	b299      	uxth	r1, r3
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	fbb2 f2f3 	udiv	r2, r2, r3
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 8004270:	fba3 0302 	umull	r0, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2064      	movs	r0, #100	; 0x64
 8004278:	fb00 f303 	mul.w	r3, r0, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b29b      	uxth	r3, r3
 800428c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004290:	b29b      	uxth	r3, r3
 8004292:	440b      	add	r3, r1
 8004294:	b299      	uxth	r1, r3
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 80042ac:	fba3 0302 	umull	r0, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2064      	movs	r0, #100	; 0x64
 80042b4:	fb00 f303 	mul.w	r3, r0, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	3332      	adds	r3, #50	; 0x32
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <LL_USART_SetBaudRate+0x168>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	440b      	add	r3, r1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	51eb851f 	.word	0x51eb851f

080042e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff06 	bl	800410c <LL_USART_IsEnabled>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d157      	bne.n	80043b6 <LL_USART_Init+0xce>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800430e:	f023 030c 	bic.w	r3, r3, #12
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	6851      	ldr	r1, [r2, #4]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	4311      	orrs	r1, r2
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	6912      	ldr	r2, [r2, #16]
 8004320:	4311      	orrs	r1, r2
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	6992      	ldr	r2, [r2, #24]
 8004326:	430a      	orrs	r2, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fefc 	bl	8004132 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff08 	bl	8004156 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004346:	f107 0308 	add.w	r3, r7, #8
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fdf8 	bl	8003f40 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <LL_USART_Init+0xd8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d102      	bne.n	800435e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e01a      	b.n	8004394 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <LL_USART_Init+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d102      	bne.n	800436c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e013      	b.n	8004394 <LL_USART_Init+0xac>
    }
    else if (USARTx == USART3)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <LL_USART_Init+0xe0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d102      	bne.n	800437a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e00c      	b.n	8004394 <LL_USART_Init+0xac>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <LL_USART_Init+0xe4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d102      	bne.n	8004388 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e005      	b.n	8004394 <LL_USART_Init+0xac>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <LL_USART_Init+0xe8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <LL_USART_Init+0xac>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <LL_USART_Init+0xce>
    {
      status = SUCCESS;
 80043a2:	2300      	movs	r3, #0
 80043a4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fee3 	bl	800417c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40004400 	.word	0x40004400
 80043c8:	40004800 	.word	0x40004800
 80043cc:	40004c00 	.word	0x40004c00
 80043d0:	40005000 	.word	0x40005000

080043d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 0014 	add.w	r0, r7, #20
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	b004      	add	sp, #16
 8004446:	4770      	bx	lr

08004448 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800444c:	f001 f95c 	bl	8005708 <vTaskStartScheduler>
  
  return osOK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	bd80      	pop	{r7, pc}

08004456 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <osDelay+0x16>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	e000      	b.n	800446e <osDelay+0x18>
 800446c:	2301      	movs	r3, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f916 	bl	80056a0 <vTaskDelay>
  
  return osOK;
 8004474:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 0208 	add.w	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004496:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f103 0208 	add.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f103 0208 	add.w	r2, r3, #8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004530:	d103      	bne.n	800453a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e00c      	b.n	8004554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3308      	adds	r3, #8
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e002      	b.n	8004548 <vListInsert+0x2e>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d2f6      	bcs.n	8004542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6892      	ldr	r2, [r2, #8]
 80045a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6852      	ldr	r2, [r2, #4]
 80045aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d103      	bne.n	80045be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004606:	f002 fb09 	bl	8006c1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	68f9      	ldr	r1, [r7, #12]
 8004614:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	3b01      	subs	r3, #1
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	22ff      	movs	r2, #255	; 0xff
 800464a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d114      	bne.n	8004686 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3310      	adds	r3, #16
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fae5 	bl	8005c38 <xTaskRemoveFromEventList>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <xQueueGenericReset+0xcc>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	e009      	b.n	800469a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3310      	adds	r3, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fef7 	bl	800447e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3324      	adds	r3, #36	; 0x24
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fef2 	bl	800447e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800469a:	f002 faef 	bl	8006c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800469e:	2301      	movs	r3, #1
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08e      	sub	sp, #56	; 0x38
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <xQueueGenericCreateStatic+0x52>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <xQueueGenericCreateStatic+0x56>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <xQueueGenericCreateStatic+0x58>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <xQueueGenericCreateStatic+0x7e>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <xQueueGenericCreateStatic+0x82>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <xQueueGenericCreateStatic+0x84>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800474a:	2348      	movs	r3, #72	; 0x48
 800474c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b48      	cmp	r3, #72	; 0x48
 8004752:	d00a      	beq.n	800476a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61bb      	str	r3, [r7, #24]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800477c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f843 	bl	8004816 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004792:	4618      	mov	r0, r3
 8004794:	3730      	adds	r7, #48	; 0x30
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08a      	sub	sp, #40	; 0x28
 800479e:	af02      	add	r7, sp, #8
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	613b      	str	r3, [r7, #16]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e004      	b.n	80047da <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3348      	adds	r3, #72	; 0x48
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 fb1c 	bl	8006e1c <pvPortMalloc>
 80047e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00f      	beq.n	800480c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	3348      	adds	r3, #72	; 0x48
 80047f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047fa:	79fa      	ldrb	r2, [r7, #7]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f805 	bl	8004816 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800480c:	69bb      	ldr	r3, [r7, #24]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e002      	b.n	8004838 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004844:	2101      	movs	r1, #1
 8004846:	69b8      	ldr	r0, [r7, #24]
 8004848:	f7ff fec8 	bl	80045dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00e      	beq.n	8004880 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004874:	2300      	movs	r3, #0
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f81c 	bl	80048b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004892:	2301      	movs	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	461a      	mov	r2, r3
 800489e:	6939      	ldr	r1, [r7, #16]
 80048a0:	6978      	ldr	r0, [r7, #20]
 80048a2:	f7ff ff7a 	bl	800479a <xQueueGenericCreate>
 80048a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff ffd3 	bl	8004854 <prvInitialiseMutex>

		return pxNewQueue;
 80048ae:	68fb      	ldr	r3, [r7, #12]
	}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08e      	sub	sp, #56	; 0x38
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048c6:	2300      	movs	r3, #0
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericSend+0x32>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <xQueueGenericSend+0x40>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <xQueueGenericSend+0x44>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <xQueueGenericSend+0x46>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <xQueueGenericSend+0x60>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d103      	bne.n	8004926 <xQueueGenericSend+0x6e>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <xQueueGenericSend+0x72>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <xQueueGenericSend+0x74>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xQueueGenericSend+0x8e>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	623b      	str	r3, [r7, #32]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004946:	f001 fb3b 	bl	8005fc0 <xTaskGetSchedulerState>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <xQueueGenericSend+0x9e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <xQueueGenericSend+0xa2>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericSend+0xa4>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericSend+0xbe>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	61fb      	str	r3, [r7, #28]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004976:	f002 f951 	bl	8006c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <xQueueGenericSend+0xd4>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d129      	bne.n	80049e0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004992:	f000 fb4d 	bl	8005030 <prvCopyDataToQueue>
 8004996:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 f947 	bl	8005c38 <xTaskRemoveFromEventList>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <xQueueGenericSend+0x1f8>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	e00a      	b.n	80049d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <xQueueGenericSend+0x1f8>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049d8:	f002 f950 	bl	8006c7c <vPortExitCritical>
				return pdPASS;
 80049dc:	2301      	movs	r3, #1
 80049de:	e063      	b.n	8004aa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049e6:	f002 f949 	bl	8006c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e05c      	b.n	8004aa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049f4:	f107 0314 	add.w	r3, r7, #20
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f97f 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a02:	f002 f93b 	bl	8006c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a06:	f000 feef 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a0a:	f002 f907 	bl	8006c1c <vPortEnterCritical>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1a:	d103      	bne.n	8004a24 <xQueueGenericSend+0x16c>
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a30:	d103      	bne.n	8004a3a <xQueueGenericSend+0x182>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3a:	f002 f91f 	bl	8006c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a3e:	1d3a      	adds	r2, r7, #4
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 f96e 	bl	8005d28 <xTaskCheckForTimeOut>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d124      	bne.n	8004a9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a54:	f000 fbe4 	bl	8005220 <prvIsQueueFull>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	3310      	adds	r3, #16
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f896 	bl	8005b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6e:	f000 fb6f 	bl	8005150 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a72:	f000 fec7 	bl	8005804 <xTaskResumeAll>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f47f af7c 	bne.w	8004976 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <xQueueGenericSend+0x1f8>)
 8004a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	e772      	b.n	8004976 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a92:	f000 fb5d 	bl	8005150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a96:	f000 feb5 	bl	8005804 <xTaskResumeAll>
 8004a9a:	e76c      	b.n	8004976 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a9e:	f000 fb57 	bl	8005150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aa2:	f000 feaf 	bl	8005804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aa6:	2300      	movs	r3, #0
		}
	}
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3738      	adds	r7, #56	; 0x38
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	e000ed04 	.word	0xe000ed04

08004ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <xQueueGenericSendFromISR+0x3c>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <xQueueGenericSendFromISR+0x40>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <xQueueGenericSendFromISR+0x42>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	623b      	str	r3, [r7, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSendFromISR+0x6a>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSendFromISR+0x6e>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSendFromISR+0x70>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61fb      	str	r3, [r7, #28]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b3e:	f002 f92f 	bl	8006da0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b42:	f3ef 8211 	mrs	r2, BASEPRI
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61ba      	str	r2, [r7, #24]
 8004b58:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <xQueueGenericSendFromISR+0xbc>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d12c      	bne.n	8004bca <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b80:	f000 fa56 	bl	8005030 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8c:	d112      	bne.n	8004bb4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	3324      	adds	r3, #36	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 f84c 	bl	8005c38 <xTaskRemoveFromEventList>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e007      	b.n	8004bc4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb8:	3301      	adds	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	b25a      	sxtb	r2, r3
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bc8:	e001      	b.n	8004bce <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3738      	adds	r7, #56	; 0x38
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08c      	sub	sp, #48	; 0x30
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <xQueueReceive+0x30>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	623b      	str	r3, [r7, #32]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <xQueueReceive+0x3e>
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <xQueueReceive+0x42>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueReceive+0x44>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueReceive+0x5e>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	61fb      	str	r3, [r7, #28]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c42:	f001 f9bd 	bl	8005fc0 <xTaskGetSchedulerState>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <xQueueReceive+0x6e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueReceive+0x72>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueReceive+0x74>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueReceive+0x8e>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	61bb      	str	r3, [r7, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c72:	f001 ffd3 	bl	8006c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01f      	beq.n	8004cc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c86:	f000 fa3d 	bl	8005104 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00f      	beq.n	8004cba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	3310      	adds	r3, #16
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 ffca 	bl	8005c38 <xTaskRemoveFromEventList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <xQueueReceive+0x1bc>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cba:	f001 ffdf 	bl	8006c7c <vPortExitCritical>
				return pdPASS;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e069      	b.n	8004d96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cc8:	f001 ffd8 	bl	8006c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e062      	b.n	8004d96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cd6:	f107 0310 	add.w	r3, r7, #16
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f80e 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce4:	f001 ffca 	bl	8006c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce8:	f000 fd7e 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cec:	f001 ff96 	bl	8006c1c <vPortEnterCritical>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfc:	d103      	bne.n	8004d06 <xQueueReceive+0x122>
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0c:	b25b      	sxtb	r3, r3
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d12:	d103      	bne.n	8004d1c <xQueueReceive+0x138>
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	f001 ffae 	bl	8006c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d20:	1d3a      	adds	r2, r7, #4
 8004d22:	f107 0310 	add.w	r3, r7, #16
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fffd 	bl	8005d28 <xTaskCheckForTimeOut>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d123      	bne.n	8004d7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d36:	f000 fa5d 	bl	80051f4 <prvIsQueueEmpty>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d017      	beq.n	8004d70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	3324      	adds	r3, #36	; 0x24
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 ff25 	bl	8005b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d50:	f000 f9fe 	bl	8005150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d54:	f000 fd56 	bl	8005804 <xTaskResumeAll>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d189      	bne.n	8004c72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <xQueueReceive+0x1bc>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	e780      	b.n	8004c72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f000 f9ed 	bl	8005150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d76:	f000 fd45 	bl	8005804 <xTaskResumeAll>
 8004d7a:	e77a      	b.n	8004c72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7e:	f000 f9e7 	bl	8005150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d82:	f000 fd3f 	bl	8005804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d88:	f000 fa34 	bl	80051f4 <prvIsQueueEmpty>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f43f af6f 	beq.w	8004c72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3730      	adds	r7, #48	; 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	623b      	str	r3, [r7, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	61fb      	str	r3, [r7, #28]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004df4:	f001 f8e4 	bl	8005fc0 <xTaskGetSchedulerState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <xQueueSemaphoreTake+0x60>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <xQueueSemaphoreTake+0x64>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <xQueueSemaphoreTake+0x66>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61bb      	str	r3, [r7, #24]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e24:	f001 fefa 	bl	8006c1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d024      	beq.n	8004e7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004e44:	f001 fa86 	bl	8006354 <pvTaskIncrementMutexHeldCount>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00f      	beq.n	8004e76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	3310      	adds	r3, #16
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 feec 	bl	8005c38 <xTaskRemoveFromEventList>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e66:	4b54      	ldr	r3, [pc, #336]	; (8004fb8 <xQueueSemaphoreTake+0x214>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e76:	f001 ff01 	bl	8006c7c <vPortExitCritical>
				return pdPASS;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e097      	b.n	8004fae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d111      	bne.n	8004ea8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	617b      	str	r3, [r7, #20]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ea0:	f001 feec 	bl	8006c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e082      	b.n	8004fae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eae:	f107 030c 	add.w	r3, r7, #12
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 ff22 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ebc:	f001 fede 	bl	8006c7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec0:	f000 fc92 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ec4:	f001 feaa 	bl	8006c1c <vPortEnterCritical>
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed4:	d103      	bne.n	8004ede <xQueueSemaphoreTake+0x13a>
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eea:	d103      	bne.n	8004ef4 <xQueueSemaphoreTake+0x150>
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef4:	f001 fec2 	bl	8006c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ef8:	463a      	mov	r2, r7
 8004efa:	f107 030c 	add.w	r3, r7, #12
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 ff11 	bl	8005d28 <xTaskCheckForTimeOut>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d132      	bne.n	8004f72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0e:	f000 f971 	bl	80051f4 <prvIsQueueEmpty>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d026      	beq.n	8004f66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004f20:	f001 fe7c 	bl	8006c1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 f867 	bl	8005ffc <xTaskPriorityInherit>
 8004f2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f30:	f001 fea4 	bl	8006c7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	3324      	adds	r3, #36	; 0x24
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fe2b 	bl	8005b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f44:	f000 f904 	bl	8005150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f48:	f000 fc5c 	bl	8005804 <xTaskResumeAll>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f47f af68 	bne.w	8004e24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004f54:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <xQueueSemaphoreTake+0x214>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	e75e      	b.n	8004e24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f68:	f000 f8f2 	bl	8005150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f6c:	f000 fc4a 	bl	8005804 <xTaskResumeAll>
 8004f70:	e758      	b.n	8004e24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f74:	f000 f8ec 	bl	8005150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f78:	f000 fc44 	bl	8005804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f7e:	f000 f939 	bl	80051f4 <prvIsQueueEmpty>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f43f af4d 	beq.w	8004e24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004f90:	f001 fe44 	bl	8006c1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f96:	f000 f834 	bl	8005002 <prvGetDisinheritPriorityAfterTimeout>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f936 	bl	8006214 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004fa8:	f001 fe68 	bl	8006c7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3738      	adds	r7, #56	; 0x38
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <vQueueDelete+0x28>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60bb      	str	r3, [r7, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f95b 	bl	80052a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f001 ffd5 	bl	8006fa4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1c3 0307 	rsb	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e001      	b.n	8005024 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005024:	68fb      	ldr	r3, [r7, #12]
	}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10d      	bne.n	800506a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d14d      	bne.n	80050f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f854 	bl	8006108 <xTaskPriorityDisinherit>
 8005060:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	e043      	b.n	80050f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d119      	bne.n	80050a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6898      	ldr	r0, [r3, #8]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	461a      	mov	r2, r3
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	f002 f9c2 	bl	8007404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d32b      	bcc.n	80050f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	609a      	str	r2, [r3, #8]
 80050a2:	e026      	b.n	80050f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68d8      	ldr	r0, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	461a      	mov	r2, r3
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	f002 f9a8 	bl	8007404 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	425b      	negs	r3, r3
 80050be:	441a      	add	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d207      	bcs.n	80050e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	425b      	negs	r3, r3
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d105      	bne.n	80050f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050fa:	697b      	ldr	r3, [r7, #20]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	441a      	add	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d303      	bcc.n	8005138 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68d9      	ldr	r1, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	461a      	mov	r2, r3
 8005142:	6838      	ldr	r0, [r7, #0]
 8005144:	f002 f95e 	bl	8007404 <memcpy>
	}
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005158:	f001 fd60 	bl	8006c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005162:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005164:	e011      	b.n	800518a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd60 	bl	8005c38 <xTaskRemoveFromEventList>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800517e:	f000 fe35 	bl	8005dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	3b01      	subs	r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800518a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	dce9      	bgt.n	8005166 <prvUnlockQueue+0x16>
 8005192:	e000      	b.n	8005196 <prvUnlockQueue+0x46>
					break;
 8005194:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800519e:	f001 fd6d 	bl	8006c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051a2:	f001 fd3b 	bl	8006c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ae:	e011      	b.n	80051d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3310      	adds	r3, #16
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fd3b 	bl	8005c38 <xTaskRemoveFromEventList>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051c8:	f000 fe10 	bl	8005dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dce9      	bgt.n	80051b0 <prvUnlockQueue+0x60>
 80051dc:	e000      	b.n	80051e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	22ff      	movs	r2, #255	; 0xff
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051e8:	f001 fd48 	bl	8006c7c <vPortExitCritical>
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051fc:	f001 fd0e 	bl	8006c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005208:	2301      	movs	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e001      	b.n	8005212 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005212:	f001 fd33 	bl	8006c7c <vPortExitCritical>

	return xReturn;
 8005216:	68fb      	ldr	r3, [r7, #12]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005228:	f001 fcf8 	bl	8006c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005234:	429a      	cmp	r2, r3
 8005236:	d102      	bne.n	800523e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e001      	b.n	8005242 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005242:	f001 fd1b 	bl	8006c7c <vPortExitCritical>

	return xReturn;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e014      	b.n	800528a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005260:	4a0e      	ldr	r2, [pc, #56]	; (800529c <vQueueAddToRegistry+0x4c>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800526c:	490b      	ldr	r1, [pc, #44]	; (800529c <vQueueAddToRegistry+0x4c>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <vQueueAddToRegistry+0x4c>)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005282:	e006      	b.n	8005292 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b07      	cmp	r3, #7
 800528e:	d9e7      	bls.n	8005260 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	20000fb8 	.word	0x20000fb8

080052a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e016      	b.n	80052dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d10b      	bne.n	80052d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80052be:	4a0c      	ldr	r2, [pc, #48]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2100      	movs	r1, #0
 80052c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
				break;
 80052d4:	e006      	b.n	80052e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b07      	cmp	r3, #7
 80052e0:	d9e5      	bls.n	80052ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000fb8 	.word	0x20000fb8

080052f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005304:	f001 fc8a 	bl	8006c1c <vPortEnterCritical>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005314:	d103      	bne.n	800531e <vQueueWaitForMessageRestricted+0x2a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d103      	bne.n	8005334 <vQueueWaitForMessageRestricted+0x40>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 fca2 	bl	8006c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fc49 	bl	8005be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff fefe 	bl	8005150 <prvUnlockQueue>
	}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053a2:	23a0      	movs	r3, #160	; 0xa0
 80053a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2ba0      	cmp	r3, #160	; 0xa0
 80053aa:	d00a      	beq.n	80053c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01e      	beq.n	8005406 <xTaskCreateStatic+0xaa>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01b      	beq.n	8005406 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f851 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005400:	f000 f8e4 	bl	80055cc <prvAddNewTaskToReadyList>
 8005404:	e001      	b.n	800540a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800540a:	697b      	ldr	r3, [r7, #20]
	}
 800540c:	4618      	mov	r0, r3
 800540e:	3728      	adds	r7, #40	; 0x28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af04      	add	r7, sp, #16
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fcf7 	bl	8006e1c <pvPortMalloc>
 800542e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005436:	20a0      	movs	r0, #160	; 0xa0
 8005438:	f001 fcf0 	bl	8006e1c <pvPortMalloc>
 800543c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
 800544a:	e005      	b.n	8005458 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	f001 fda9 	bl	8006fa4 <vPortFree>
 8005452:	e001      	b.n	8005458 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d017      	beq.n	800548e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	2300      	movs	r3, #0
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	9302      	str	r3, [sp, #8]
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f80f 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005482:	69f8      	ldr	r0, [r7, #28]
 8005484:	f000 f8a2 	bl	80055cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e002      	b.n	8005494 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005492:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005494:	69bb      	ldr	r3, [r7, #24]
	}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054b8:	3b01      	subs	r3, #1
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	617b      	str	r3, [r7, #20]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	e012      	b.n	8005514 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	7819      	ldrb	r1, [r3, #0]
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	3334      	adds	r3, #52	; 0x34
 80054fe:	460a      	mov	r2, r1
 8005500:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d9e9      	bls.n	80054ee <prvInitialiseNewTask+0x4e>
 800551a:	e000      	b.n	800551e <prvInitialiseNewTask+0x7e>
		{
			break;
 800551c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	2b06      	cmp	r3, #6
 800552a:	d901      	bls.n	8005530 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800552c:	2306      	movs	r3, #6
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005534:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	3304      	adds	r3, #4
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe ffb8 	bl	80044bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	3318      	adds	r3, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe ffb3 	bl	80044bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	f1c3 0207 	rsb	r2, r3, #7
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	2200      	movs	r2, #0
 8005578:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	334c      	adds	r3, #76	; 0x4c
 8005580:	224c      	movs	r2, #76	; 0x4c
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f001 feb3 	bl	80072f0 <memset>
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <prvInitialiseNewTask+0x120>)
 800558e:	651a      	str	r2, [r3, #80]	; 0x50
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <prvInitialiseNewTask+0x124>)
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <prvInitialiseNewTask+0x128>)
 800559a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	69b8      	ldr	r0, [r7, #24]
 80055a2:	f001 fa49 	bl	8006a38 <pxPortInitialiseStack>
 80055a6:	4602      	mov	r2, r0
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055b8:	bf00      	nop
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20011240 	.word	0x20011240
 80055c4:	200112a8 	.word	0x200112a8
 80055c8:	20011310 	.word	0x20011310

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d4:	f001 fb22 	bl	8006c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a29      	ldr	r2, [pc, #164]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e2:	4b29      	ldr	r3, [pc, #164]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ea:	4a27      	ldr	r2, [pc, #156]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f8:	f000 fc1c 	bl	8005e34 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 8005622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvAddNewTaskToReadyList+0xcc>)
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7fe ff41 	bl	80044d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005652:	f001 fb13 	bl	8006c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d207      	bcs.n	800567c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <prvAddNewTaskToReadyList+0xd0>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200010f8 	.word	0x200010f8
 8005688:	20000ff8 	.word	0x20000ff8
 800568c:	20001104 	.word	0x20001104
 8005690:	20001114 	.word	0x20001114
 8005694:	20001100 	.word	0x20001100
 8005698:	20000ffc 	.word	0x20000ffc
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d017      	beq.n	80056e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <vTaskDelay+0x60>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <vTaskDelay+0x30>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60bb      	str	r3, [r7, #8]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056d0:	f000 f88a 	bl	80057e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fe50 	bl	800637c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056dc:	f000 f892 	bl	8005804 <xTaskResumeAll>
 80056e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <vTaskDelay+0x64>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20001120 	.word	0x20001120
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005716:	463a      	mov	r2, r7
 8005718:	1d39      	adds	r1, r7, #4
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa ff66 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	9202      	str	r2, [sp, #8]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2300      	movs	r3, #0
 8005734:	460a      	mov	r2, r1
 8005736:	4924      	ldr	r1, [pc, #144]	; (80057c8 <vTaskStartScheduler+0xc0>)
 8005738:	4824      	ldr	r0, [pc, #144]	; (80057cc <vTaskStartScheduler+0xc4>)
 800573a:	f7ff fe0f 	bl	800535c <xTaskCreateStatic>
 800573e:	4603      	mov	r3, r0
 8005740:	4a23      	ldr	r2, [pc, #140]	; (80057d0 <vTaskStartScheduler+0xc8>)
 8005742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005744:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <vTaskStartScheduler+0xc8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e001      	b.n	8005756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800575c:	f000 fe74 	bl	8006448 <xTimerCreateTimerTask>
 8005760:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d11b      	bne.n	80057a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	613b      	str	r3, [r7, #16]
}
 800577a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <vTaskStartScheduler+0xcc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	334c      	adds	r3, #76	; 0x4c
 8005782:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <vTaskStartScheduler+0xd0>)
 8005784:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <vTaskStartScheduler+0xd4>)
 8005788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800578c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <vTaskStartScheduler+0xd8>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <vTaskStartScheduler+0xdc>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800579a:	f001 f9cd 	bl	8006b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800579e:	e00e      	b.n	80057be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d10a      	bne.n	80057be <vTaskStartScheduler+0xb6>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	60fb      	str	r3, [r7, #12]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <vTaskStartScheduler+0xb4>
}
 80057be:	bf00      	nop
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	08008040 	.word	0x08008040
 80057cc:	08005e05 	.word	0x08005e05
 80057d0:	2000111c 	.word	0x2000111c
 80057d4:	20000ff8 	.word	0x20000ff8
 80057d8:	2000005c 	.word	0x2000005c
 80057dc:	20001118 	.word	0x20001118
 80057e0:	20001104 	.word	0x20001104
 80057e4:	200010fc 	.word	0x200010fc

080057e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <vTaskSuspendAll+0x18>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a03      	ldr	r2, [pc, #12]	; (8005800 <vTaskSuspendAll+0x18>)
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20001120 	.word	0x20001120

08005804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <xTaskResumeAll+0x114>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <xTaskResumeAll+0x2c>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005830:	f001 f9f4 	bl	8006c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005834:	4b38      	ldr	r3, [pc, #224]	; (8005918 <xTaskResumeAll+0x114>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3b01      	subs	r3, #1
 800583a:	4a37      	ldr	r2, [pc, #220]	; (8005918 <xTaskResumeAll+0x114>)
 800583c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <xTaskResumeAll+0x114>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d161      	bne.n	800590a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005846:	4b35      	ldr	r3, [pc, #212]	; (800591c <xTaskResumeAll+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d05d      	beq.n	800590a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800584e:	e02e      	b.n	80058ae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005850:	4b33      	ldr	r3, [pc, #204]	; (8005920 <xTaskResumeAll+0x11c>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3318      	adds	r3, #24
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fe94 	bl	800458a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fe8f 	bl	800458a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <xTaskResumeAll+0x120>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <xTaskResumeAll+0x120>)
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a27      	ldr	r2, [pc, #156]	; (8005928 <xTaskResumeAll+0x124>)
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f7fe fe1d 	bl	80044d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4b23      	ldr	r3, [pc, #140]	; (800592c <xTaskResumeAll+0x128>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058a8:	4b21      	ldr	r3, [pc, #132]	; (8005930 <xTaskResumeAll+0x12c>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <xTaskResumeAll+0x11c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1cc      	bne.n	8005850 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058bc:	f000 fb5c 	bl	8005f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xTaskResumeAll+0x130>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d010      	beq.n	80058ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058cc:	f000 f844 	bl	8005958 <xTaskIncrementTick>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <xTaskResumeAll+0x12c>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f1      	bne.n	80058cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <xTaskResumeAll+0x130>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xTaskResumeAll+0x12c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058f6:	2301      	movs	r3, #1
 80058f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <xTaskResumeAll+0x134>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800590a:	f001 f9b7 	bl	8006c7c <vPortExitCritical>

	return xAlreadyYielded;
 800590e:	68bb      	ldr	r3, [r7, #8]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20001120 	.word	0x20001120
 800591c:	200010f8 	.word	0x200010f8
 8005920:	200010b8 	.word	0x200010b8
 8005924:	20001100 	.word	0x20001100
 8005928:	20000ffc 	.word	0x20000ffc
 800592c:	20000ff8 	.word	0x20000ff8
 8005930:	2000110c 	.word	0x2000110c
 8005934:	20001108 	.word	0x20001108
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <xTaskGetTickCount+0x18>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005948:	687b      	ldr	r3, [r7, #4]
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr
 8005954:	200010fc 	.word	0x200010fc

08005958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4b51      	ldr	r3, [pc, #324]	; (8005aa8 <xTaskIncrementTick+0x150>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 808d 	bne.w	8005a86 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800596c:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <xTaskIncrementTick+0x154>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005974:	4a4d      	ldr	r2, [pc, #308]	; (8005aac <xTaskIncrementTick+0x154>)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d120      	bne.n	80059c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005980:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <xTaskIncrementTick+0x158>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskIncrementTick+0x46>
 80059a0:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	4b43      	ldr	r3, [pc, #268]	; (8005ab4 <xTaskIncrementTick+0x15c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4a41      	ldr	r2, [pc, #260]	; (8005ab4 <xTaskIncrementTick+0x15c>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <xTaskIncrementTick+0x160>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <xTaskIncrementTick+0x160>)
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	f000 fadb 	bl	8005f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059c2:	4b3e      	ldr	r3, [pc, #248]	; (8005abc <xTaskIncrementTick+0x164>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d34d      	bcc.n	8005a68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059cc:	4b38      	ldr	r3, [pc, #224]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <xTaskIncrementTick+0x82>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <xTaskIncrementTick+0x84>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e0:	4b36      	ldr	r3, [pc, #216]	; (8005abc <xTaskIncrementTick+0x164>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e6:	601a      	str	r2, [r3, #0]
					break;
 80059e8:	e03e      	b.n	8005a68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059ea:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d203      	bcs.n	8005a0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a02:	4a2e      	ldr	r2, [pc, #184]	; (8005abc <xTaskIncrementTick+0x164>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]
						break;
 8005a08:	e02e      	b.n	8005a68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fdbb 	bl	800458a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3318      	adds	r3, #24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fdb2 	bl	800458a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <xTaskIncrementTick+0x168>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <xTaskIncrementTick+0x168>)
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <xTaskIncrementTick+0x16c>)
 8005a46:	441a      	add	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f7fe fd40 	bl	80044d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <xTaskIncrementTick+0x170>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3b4      	bcc.n	80059cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a66:	e7b1      	b.n	80059cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a68:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <xTaskIncrementTick+0x170>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6e:	4915      	ldr	r1, [pc, #84]	; (8005ac4 <xTaskIncrementTick+0x16c>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d907      	bls.n	8005a90 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e004      	b.n	8005a90 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <xTaskIncrementTick+0x174>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a0f      	ldr	r2, [pc, #60]	; (8005acc <xTaskIncrementTick+0x174>)
 8005a8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <xTaskIncrementTick+0x178>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20001120 	.word	0x20001120
 8005aac:	200010fc 	.word	0x200010fc
 8005ab0:	200010b0 	.word	0x200010b0
 8005ab4:	200010b4 	.word	0x200010b4
 8005ab8:	20001110 	.word	0x20001110
 8005abc:	20001118 	.word	0x20001118
 8005ac0:	20001100 	.word	0x20001100
 8005ac4:	20000ffc 	.word	0x20000ffc
 8005ac8:	20000ff8 	.word	0x20000ff8
 8005acc:	20001108 	.word	0x20001108
 8005ad0:	2000110c 	.word	0x2000110c

08005ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ada:	4b29      	ldr	r3, [pc, #164]	; (8005b80 <vTaskSwitchContext+0xac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <vTaskSwitchContext+0xb0>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae8:	e044      	b.n	8005b74 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <vTaskSwitchContext+0xb0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <vTaskSwitchContext+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005afe:	7afb      	ldrb	r3, [r7, #11]
 8005b00:	f1c3 031f 	rsb	r3, r3, #31
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	4921      	ldr	r1, [pc, #132]	; (8005b8c <vTaskSwitchContext+0xb8>)
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	607b      	str	r3, [r7, #4]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <vTaskSwitchContext+0x5a>
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <vTaskSwitchContext+0xb8>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3308      	adds	r3, #8
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d104      	bne.n	8005b60 <vTaskSwitchContext+0x8c>
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <vTaskSwitchContext+0xbc>)
 8005b68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <vTaskSwitchContext+0xbc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	334c      	adds	r3, #76	; 0x4c
 8005b70:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <vTaskSwitchContext+0xc0>)
 8005b72:	6013      	str	r3, [r2, #0]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20001120 	.word	0x20001120
 8005b84:	2000110c 	.word	0x2000110c
 8005b88:	20001100 	.word	0x20001100
 8005b8c:	20000ffc 	.word	0x20000ffc
 8005b90:	20000ff8 	.word	0x20000ff8
 8005b94:	2000005c 	.word	0x2000005c

08005b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <vTaskPlaceOnEventList+0x44>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe fca7 	bl	800451a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f000 fbd4 	bl	800637c <prvAddCurrentTaskToDelayedList>
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000ff8 	.word	0x20000ff8

08005be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7fe fc5f 	bl	80044d4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68b8      	ldr	r0, [r7, #8]
 8005c26:	f000 fba9 	bl	800637c <prvAddCurrentTaskToDelayedList>
	}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000ff8 	.word	0x20000ff8

08005c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60fb      	str	r3, [r7, #12]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	3318      	adds	r3, #24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fc8e 	bl	800458a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <xTaskRemoveFromEventList+0xac>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11c      	bne.n	8005cb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fc85 	bl	800458a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	2201      	movs	r2, #1
 8005c86:	409a      	lsls	r2, r3
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <xTaskRemoveFromEventList+0xb0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <xTaskRemoveFromEventList+0xb0>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a13      	ldr	r2, [pc, #76]	; (8005cec <xTaskRemoveFromEventList+0xb4>)
 8005ca0:	441a      	add	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe fc13 	bl	80044d4 <vListInsertEnd>
 8005cae:	e005      	b.n	8005cbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	480e      	ldr	r0, [pc, #56]	; (8005cf0 <xTaskRemoveFromEventList+0xb8>)
 8005cb8:	f7fe fc0c 	bl	80044d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <xTaskRemoveFromEventList+0xbc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d905      	bls.n	8005cd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <xTaskRemoveFromEventList+0xc0>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e001      	b.n	8005cda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20001120 	.word	0x20001120
 8005ce8:	20001100 	.word	0x20001100
 8005cec:	20000ffc 	.word	0x20000ffc
 8005cf0:	200010b8 	.word	0x200010b8
 8005cf4:	20000ff8 	.word	0x20000ff8
 8005cf8:	2000110c 	.word	0x2000110c

08005cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <vTaskInternalSetTimeOutState+0x24>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <vTaskInternalSetTimeOutState+0x28>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20001110 	.word	0x20001110
 8005d24:	200010fc 	.word	0x200010fc

08005d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	613b      	str	r3, [r7, #16]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	60fb      	str	r3, [r7, #12]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d6a:	f000 ff57 	bl	8006c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <xTaskCheckForTimeOut+0xbc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d86:	d102      	bne.n	8005d8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e023      	b.n	8005dd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <xTaskCheckForTimeOut+0xc0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d007      	beq.n	8005daa <xTaskCheckForTimeOut+0x82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e015      	b.n	8005dd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d20b      	bcs.n	8005dcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff9b 	bl	8005cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e004      	b.n	8005dd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dd6:	f000 ff51 	bl	8006c7c <vPortExitCritical>

	return xReturn;
 8005dda:	69fb      	ldr	r3, [r7, #28]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	200010fc 	.word	0x200010fc
 8005de8:	20001110 	.word	0x20001110

08005dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <vTaskMissedYield+0x14>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	2000110c 	.word	0x2000110c

08005e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e0c:	f000 f852 	bl	8005eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <prvIdleTask+0x28>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d9f9      	bls.n	8005e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <prvIdleTask+0x2c>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e28:	e7f0      	b.n	8005e0c <prvIdleTask+0x8>
 8005e2a:	bf00      	nop
 8005e2c:	20000ffc 	.word	0x20000ffc
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	e00c      	b.n	8005e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <prvInitialiseTaskLists+0x60>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fb15 	bl	800447e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3301      	adds	r3, #1
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	d9ef      	bls.n	8005e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e60:	480d      	ldr	r0, [pc, #52]	; (8005e98 <prvInitialiseTaskLists+0x64>)
 8005e62:	f7fe fb0c 	bl	800447e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e66:	480d      	ldr	r0, [pc, #52]	; (8005e9c <prvInitialiseTaskLists+0x68>)
 8005e68:	f7fe fb09 	bl	800447e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e6c:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <prvInitialiseTaskLists+0x6c>)
 8005e6e:	f7fe fb06 	bl	800447e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e72:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <prvInitialiseTaskLists+0x70>)
 8005e74:	f7fe fb03 	bl	800447e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e78:	480b      	ldr	r0, [pc, #44]	; (8005ea8 <prvInitialiseTaskLists+0x74>)
 8005e7a:	f7fe fb00 	bl	800447e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvInitialiseTaskLists+0x78>)
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <prvInitialiseTaskLists+0x64>)
 8005e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <prvInitialiseTaskLists+0x7c>)
 8005e86:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <prvInitialiseTaskLists+0x68>)
 8005e88:	601a      	str	r2, [r3, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000ffc 	.word	0x20000ffc
 8005e98:	20001088 	.word	0x20001088
 8005e9c:	2000109c 	.word	0x2000109c
 8005ea0:	200010b8 	.word	0x200010b8
 8005ea4:	200010cc 	.word	0x200010cc
 8005ea8:	200010e4 	.word	0x200010e4
 8005eac:	200010b0 	.word	0x200010b0
 8005eb0:	200010b4 	.word	0x200010b4

08005eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eba:	e019      	b.n	8005ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ebc:	f000 feae 	bl	8006c1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <prvCheckTasksWaitingTermination+0x50>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fb5c 	bl	800458a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <prvCheckTasksWaitingTermination+0x54>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <prvCheckTasksWaitingTermination+0x54>)
 8005eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ee6:	f000 fec9 	bl	8006c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f810 	bl	8005f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e1      	bne.n	8005ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	200010cc 	.word	0x200010cc
 8005f08:	200010f8 	.word	0x200010f8
 8005f0c:	200010e0 	.word	0x200010e0

08005f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	334c      	adds	r3, #76	; 0x4c
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 f9ef 	bl	8007300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f837 	bl	8006fa4 <vPortFree>
				vPortFree( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f834 	bl	8006fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f3c:	e018      	b.n	8005f70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f82b 	bl	8006fa4 <vPortFree>
	}
 8005f4e:	e00f      	b.n	8005f70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d00a      	beq.n	8005f70 <prvDeleteTCB+0x60>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60fb      	str	r3, [r7, #12]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <prvDeleteTCB+0x5e>
	}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <prvResetNextTaskUnblockTime+0x40>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <prvResetNextTaskUnblockTime+0x14>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <prvResetNextTaskUnblockTime+0x16>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <prvResetNextTaskUnblockTime+0x44>)
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f9a:	e008      	b.n	8005fae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <prvResetNextTaskUnblockTime+0x40>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <prvResetNextTaskUnblockTime+0x44>)
 8005fac:	6013      	str	r3, [r2, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	200010b0 	.word	0x200010b0
 8005fbc:	20001118 	.word	0x20001118

08005fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <xTaskGetSchedulerState+0x34>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	e008      	b.n	8005fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <xTaskGetSchedulerState+0x38>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	e001      	b.n	8005fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fe6:	687b      	ldr	r3, [r7, #4]
	}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20001104 	.word	0x20001104
 8005ff8:	20001120 	.word	0x20001120

08005ffc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d06e      	beq.n	80060f0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <xTaskPriorityInherit+0x100>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	429a      	cmp	r2, r3
 800601e:	d25e      	bcs.n	80060de <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	db06      	blt.n	8006036 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006028:	4b34      	ldr	r3, [pc, #208]	; (80060fc <xTaskPriorityInherit+0x100>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	f1c3 0207 	rsb	r2, r3, #7
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6959      	ldr	r1, [r3, #20]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <xTaskPriorityInherit+0x104>)
 8006048:	4413      	add	r3, r2
 800604a:	4299      	cmp	r1, r3
 800604c:	d101      	bne.n	8006052 <xTaskPriorityInherit+0x56>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xTaskPriorityInherit+0x58>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d03a      	beq.n	80060ce <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fa94 	bl	800458a <uxListRemove>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d115      	bne.n	8006094 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4924      	ldr	r1, [pc, #144]	; (8006100 <xTaskPriorityInherit+0x104>)
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <xTaskPriorityInherit+0x98>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	2201      	movs	r2, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43da      	mvns	r2, r3
 800608a:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <xTaskPriorityInherit+0x108>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4013      	ands	r3, r2
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <xTaskPriorityInherit+0x108>)
 8006092:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <xTaskPriorityInherit+0x100>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	2201      	movs	r2, #1
 80060a4:	409a      	lsls	r2, r3
 80060a6:	4b17      	ldr	r3, [pc, #92]	; (8006104 <xTaskPriorityInherit+0x108>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <xTaskPriorityInherit+0x108>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <xTaskPriorityInherit+0x104>)
 80060be:	441a      	add	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fa04 	bl	80044d4 <vListInsertEnd>
 80060cc:	e004      	b.n	80060d8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060ce:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <xTaskPriorityInherit+0x100>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e008      	b.n	80060f0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <xTaskPriorityInherit+0x100>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d201      	bcs.n	80060f0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060f0:	68fb      	ldr	r3, [r7, #12]
	}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000ff8 	.word	0x20000ff8
 8006100:	20000ffc 	.word	0x20000ffc
 8006104:	20001100 	.word	0x20001100

08006108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d06e      	beq.n	80061fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800611e:	4b3a      	ldr	r3, [pc, #232]	; (8006208 <xTaskPriorityDisinherit+0x100>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d00a      	beq.n	800613e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60bb      	str	r3, [r7, #8]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	1e5a      	subs	r2, r3, #1
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	429a      	cmp	r2, r3
 8006170:	d044      	beq.n	80061fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	2b00      	cmp	r3, #0
 8006178:	d140      	bne.n	80061fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fa03 	bl	800458a <uxListRemove>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d115      	bne.n	80061b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618e:	491f      	ldr	r1, [pc, #124]	; (800620c <xTaskPriorityDisinherit+0x104>)
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xTaskPriorityDisinherit+0xae>
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	2201      	movs	r2, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43da      	mvns	r2, r3
 80061ac:	4b18      	ldr	r3, [pc, #96]	; (8006210 <xTaskPriorityDisinherit+0x108>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4013      	ands	r3, r2
 80061b2:	4a17      	ldr	r2, [pc, #92]	; (8006210 <xTaskPriorityDisinherit+0x108>)
 80061b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f1c3 0207 	rsb	r2, r3, #7
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	2201      	movs	r2, #1
 80061d0:	409a      	lsls	r2, r3
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <xTaskPriorityDisinherit+0x108>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <xTaskPriorityDisinherit+0x108>)
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <xTaskPriorityDisinherit+0x104>)
 80061ea:	441a      	add	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f7fe f96e 	bl	80044d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061fc:	697b      	ldr	r3, [r7, #20]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000ff8 	.word	0x20000ff8
 800620c:	20000ffc 	.word	0x20000ffc
 8006210:	20001100 	.word	0x20001100

08006214 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006222:	2301      	movs	r3, #1
 8006224:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8088 	beq.w	800633e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60fb      	str	r3, [r7, #12]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d902      	bls.n	800625c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e002      	b.n	8006262 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	429a      	cmp	r2, r3
 800626a:	d068      	beq.n	800633e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	429a      	cmp	r2, r3
 8006274:	d163      	bne.n	800633e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006276:	4b34      	ldr	r3, [pc, #208]	; (8006348 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d10a      	bne.n	8006296 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60bb      	str	r3, [r7, #8]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db04      	blt.n	80062b4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f1c3 0207 	rsb	r2, r3, #7
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	6959      	ldr	r1, [r3, #20]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062c4:	4413      	add	r3, r2
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d101      	bne.n	80062ce <vTaskPriorityDisinheritAfterTimeout+0xba>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d034      	beq.n	800633e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe f956 	bl	800458a <uxListRemove>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	4918      	ldr	r1, [pc, #96]	; (800634c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	2201      	movs	r2, #1
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	43da      	mvns	r2, r3
 8006306:	4b12      	ldr	r3, [pc, #72]	; (8006350 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4013      	ands	r3, r2
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800630e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2201      	movs	r2, #1
 8006316:	409a      	lsls	r2, r3
 8006318:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4a07      	ldr	r2, [pc, #28]	; (800634c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006330:	441a      	add	r2, r3
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fe f8cb 	bl	80044d4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800633e:	bf00      	nop
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000ff8 	.word	0x20000ff8
 800634c:	20000ffc 	.word	0x20000ffc
 8006350:	20001100 	.word	0x20001100

08006354 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <pvTaskIncrementMutexHeldCount+0x24>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <pvTaskIncrementMutexHeldCount+0x24>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006366:	3201      	adds	r2, #1
 8006368:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800636a:	4b03      	ldr	r3, [pc, #12]	; (8006378 <pvTaskIncrementMutexHeldCount+0x24>)
 800636c:	681b      	ldr	r3, [r3, #0]
	}
 800636e:	4618      	mov	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000ff8 	.word	0x20000ff8

0800637c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800638c:	4b28      	ldr	r3, [pc, #160]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3304      	adds	r3, #4
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe f8f9 	bl	800458a <uxListRemove>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	2201      	movs	r2, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43da      	mvns	r2, r3
 80063ac:	4b21      	ldr	r3, [pc, #132]	; (8006434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4013      	ands	r3, r2
 80063b2:	4a20      	ldr	r2, [pc, #128]	; (8006434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063bc:	d10a      	bne.n	80063d4 <prvAddCurrentTaskToDelayedList+0x58>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	481a      	ldr	r0, [pc, #104]	; (8006438 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063ce:	f7fe f881 	bl	80044d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063d2:	e026      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d209      	bcs.n	8006400 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <prvAddCurrentTaskToDelayedList+0xc0>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7fe f88e 	bl	800451a <vListInsert>
}
 80063fe:	e010      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fe f884 	bl	800451a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d202      	bcs.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800641c:	4a09      	ldr	r2, [pc, #36]	; (8006444 <prvAddCurrentTaskToDelayedList+0xc8>)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6013      	str	r3, [r2, #0]
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200010fc 	.word	0x200010fc
 8006430:	20000ff8 	.word	0x20000ff8
 8006434:	20001100 	.word	0x20001100
 8006438:	200010e4 	.word	0x200010e4
 800643c:	200010b4 	.word	0x200010b4
 8006440:	200010b0 	.word	0x200010b0
 8006444:	20001118 	.word	0x20001118

08006448 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006452:	f000 fab1 	bl	80069b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <xTimerCreateTimerTask+0x80>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d021      	beq.n	80064a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006466:	1d3a      	adds	r2, r7, #4
 8006468:	f107 0108 	add.w	r1, r7, #8
 800646c:	f107 030c 	add.w	r3, r7, #12
 8006470:	4618      	mov	r0, r3
 8006472:	f7fa f8d5 	bl	8000620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	9202      	str	r2, [sp, #8]
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	2302      	movs	r3, #2
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2300      	movs	r3, #0
 8006486:	460a      	mov	r2, r1
 8006488:	4910      	ldr	r1, [pc, #64]	; (80064cc <xTimerCreateTimerTask+0x84>)
 800648a:	4811      	ldr	r0, [pc, #68]	; (80064d0 <xTimerCreateTimerTask+0x88>)
 800648c:	f7fe ff66 	bl	800535c <xTaskCreateStatic>
 8006490:	4603      	mov	r3, r0
 8006492:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <xTimerCreateTimerTask+0x8c>)
 8006494:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <xTimerCreateTimerTask+0x8c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800649e:	2301      	movs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	613b      	str	r3, [r7, #16]
}
 80064ba:	bf00      	nop
 80064bc:	e7fe      	b.n	80064bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20001154 	.word	0x20001154
 80064cc:	08008048 	.word	0x08008048
 80064d0:	080065f5 	.word	0x080065f5
 80064d4:	20001158 	.word	0x20001158

080064d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xTimerGenericCommand+0x2e>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	623b      	str	r3, [r7, #32]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <xTimerGenericCommand+0x98>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02a      	beq.n	8006564 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b05      	cmp	r3, #5
 800651e:	dc18      	bgt.n	8006552 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006520:	f7ff fd4e 	bl	8005fc0 <xTaskGetSchedulerState>
 8006524:	4603      	mov	r3, r0
 8006526:	2b02      	cmp	r3, #2
 8006528:	d109      	bne.n	800653e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <xTimerGenericCommand+0x98>)
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	f107 0114 	add.w	r1, r7, #20
 8006532:	2300      	movs	r3, #0
 8006534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006536:	f7fe f9bf 	bl	80048b8 <xQueueGenericSend>
 800653a:	6278      	str	r0, [r7, #36]	; 0x24
 800653c:	e012      	b.n	8006564 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <xTimerGenericCommand+0x98>)
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f107 0114 	add.w	r1, r7, #20
 8006546:	2300      	movs	r3, #0
 8006548:	2200      	movs	r2, #0
 800654a:	f7fe f9b5 	bl	80048b8 <xQueueGenericSend>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24
 8006550:	e008      	b.n	8006564 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006552:	4b07      	ldr	r3, [pc, #28]	; (8006570 <xTimerGenericCommand+0x98>)
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f107 0114 	add.w	r1, r7, #20
 800655a:	2300      	movs	r3, #0
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	f7fe faa9 	bl	8004ab4 <xQueueGenericSendFromISR>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006566:	4618      	mov	r0, r3
 8006568:	3728      	adds	r7, #40	; 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20001154 	.word	0x20001154

08006574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800657e:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <prvProcessExpiredTimer+0x7c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7fd fffc 	bl	800458a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d122      	bne.n	80065e0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	18d1      	adds	r1, r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	6978      	ldr	r0, [r7, #20]
 80065a8:	f000 f8c8 	bl	800673c <prvInsertTimerInActiveList>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	2100      	movs	r1, #0
 80065bc:	6978      	ldr	r0, [r7, #20]
 80065be:	f7ff ff8b 	bl	80064d8 <xTimerGenericCommand>
 80065c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	4798      	blx	r3
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000114c 	.word	0x2000114c

080065f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f857 	bl	80066b4 <prvGetNextExpireTime>
 8006606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f803 	bl	8006618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006612:	f000 f8d5 	bl	80067c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006616:	e7f1      	b.n	80065fc <prvTimerTask+0x8>

08006618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006622:	f7ff f8e1 	bl	80057e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f866 	bl	80066fc <prvSampleTimeNow>
 8006630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d130      	bne.n	800669a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <prvProcessTimerOrBlockTask+0x3c>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	429a      	cmp	r2, r3
 8006644:	d806      	bhi.n	8006654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006646:	f7ff f8dd 	bl	8005804 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff91 	bl	8006574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006652:	e024      	b.n	800669e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <prvProcessTimerOrBlockTask+0x90>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800666c:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <prvProcessTimerOrBlockTask+0x94>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	f7fe fe3b 	bl	80052f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800667e:	f7ff f8c1 	bl	8005804 <xTaskResumeAll>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <prvProcessTimerOrBlockTask+0x98>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
}
 8006698:	e001      	b.n	800669e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800669a:	f7ff f8b3 	bl	8005804 <xTaskResumeAll>
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20001150 	.word	0x20001150
 80066ac:	20001154 	.word	0x20001154
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <prvGetNextExpireTime+0x44>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <prvGetNextExpireTime+0x44>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e001      	b.n	80066ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2000114c 	.word	0x2000114c

080066fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006704:	f7ff f91a 	bl	800593c <xTaskGetTickCount>
 8006708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <prvSampleTimeNow+0x3c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d205      	bcs.n	8006720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006714:	f000 f8ee 	bl	80068f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e002      	b.n	8006726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006726:	4a04      	ldr	r2, [pc, #16]	; (8006738 <prvSampleTimeNow+0x3c>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2000115c 	.word	0x2000115c

0800673c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d812      	bhi.n	8006788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e01b      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <prvInsertTimerInActiveList+0x7c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fd feca 	bl	800451a <vListInsert>
 8006786:	e012      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d206      	bcs.n	800679e <prvInsertTimerInActiveList+0x62>
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e007      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <prvInsertTimerInActiveList+0x80>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fd feb6 	bl	800451a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ae:	697b      	ldr	r3, [r7, #20]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20001150 	.word	0x20001150
 80067bc:	2000114c 	.word	0x2000114c

080067c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	; 0x30
 80067c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c6:	e081      	b.n	80068cc <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	db7e      	blt.n	80068cc <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fd fed3 	bl	800458a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff ff88 	bl	80066fc <prvSampleTimeNow>
 80067ec:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d86a      	bhi.n	80068ca <prvProcessReceivedCommands+0x10a>
 80067f4:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <prvProcessReceivedCommands+0x3c>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006825 	.word	0x08006825
 8006800:	08006825 	.word	0x08006825
 8006804:	08006825 	.word	0x08006825
 8006808:	080068cd 	.word	0x080068cd
 800680c:	08006881 	.word	0x08006881
 8006810:	080068b9 	.word	0x080068b9
 8006814:	08006825 	.word	0x08006825
 8006818:	08006825 	.word	0x08006825
 800681c:	080068cd 	.word	0x080068cd
 8006820:	08006881 	.word	0x08006881
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	18d1      	adds	r1, r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006832:	f7ff ff83 	bl	800673c <prvInsertTimerInActiveList>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d047      	beq.n	80068cc <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006842:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d13f      	bne.n	80068cc <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	441a      	add	r2, r3
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	2100      	movs	r1, #0
 800685c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800685e:	f7ff fe3b 	bl	80064d8 <xTimerGenericCommand>
 8006862:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d130      	bne.n	80068cc <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	61bb      	str	r3, [r7, #24]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	18d1      	adds	r1, r2, r3
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b2:	f7ff ff43 	bl	800673c <prvInsertTimerInActiveList>
					break;
 80068b6:	e009      	b.n	80068cc <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80068c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c4:	f000 fb6e 	bl	8006fa4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068c8:	e000      	b.n	80068cc <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 80068ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <prvProcessReceivedCommands+0x130>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f107 0108 	add.w	r1, r7, #8
 80068d4:	2200      	movs	r2, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f984 	bl	8004be4 <xQueueReceive>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f47f af72 	bne.w	80067c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3728      	adds	r7, #40	; 0x28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20001154 	.word	0x20001154

080068f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068fa:	e045      	b.n	8006988 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068fc:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006906:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd fe38 	bl	800458a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d12e      	bne.n	8006988 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4413      	add	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d90e      	bls.n	800695a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006948:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3304      	adds	r3, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f7fd fde1 	bl	800451a <vListInsert>
 8006958:	e016      	b.n	8006988 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800695a:	2300      	movs	r3, #0
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	2100      	movs	r1, #0
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff fdb7 	bl	80064d8 <xTimerGenericCommand>
 800696a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	603b      	str	r3, [r7, #0]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1b4      	bne.n	80068fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <prvSwitchTimerLists+0xc0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <prvSwitchTimerLists+0xbc>)
 800699e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069a0:	4a04      	ldr	r2, [pc, #16]	; (80069b4 <prvSwitchTimerLists+0xc0>)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6013      	str	r3, [r2, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	2000114c 	.word	0x2000114c
 80069b4:	20001150 	.word	0x20001150

080069b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069be:	f000 f92d 	bl	8006c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <prvCheckForValidListAndQueue+0x60>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d120      	bne.n	8006a0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ca:	4814      	ldr	r0, [pc, #80]	; (8006a1c <prvCheckForValidListAndQueue+0x64>)
 80069cc:	f7fd fd57 	bl	800447e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069d0:	4813      	ldr	r0, [pc, #76]	; (8006a20 <prvCheckForValidListAndQueue+0x68>)
 80069d2:	f7fd fd54 	bl	800447e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <prvCheckForValidListAndQueue+0x6c>)
 80069d8:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <prvCheckForValidListAndQueue+0x64>)
 80069da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069dc:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvCheckForValidListAndQueue+0x70>)
 80069de:	4a10      	ldr	r2, [pc, #64]	; (8006a20 <prvCheckForValidListAndQueue+0x68>)
 80069e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069e2:	2300      	movs	r3, #0
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <prvCheckForValidListAndQueue+0x74>)
 80069e8:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <prvCheckForValidListAndQueue+0x78>)
 80069ea:	210c      	movs	r1, #12
 80069ec:	200a      	movs	r0, #10
 80069ee:	f7fd fe5d 	bl	80046ac <xQueueGenericCreateStatic>
 80069f2:	4603      	mov	r3, r0
 80069f4:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <prvCheckForValidListAndQueue+0x60>)
 80069f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <prvCheckForValidListAndQueue+0x60>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <prvCheckForValidListAndQueue+0x60>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	490b      	ldr	r1, [pc, #44]	; (8006a34 <prvCheckForValidListAndQueue+0x7c>)
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fc22 	bl	8005250 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a0c:	f000 f936 	bl	8006c7c <vPortExitCritical>
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20001154 	.word	0x20001154
 8006a1c:	20001124 	.word	0x20001124
 8006a20:	20001138 	.word	0x20001138
 8006a24:	2000114c 	.word	0x2000114c
 8006a28:	20001150 	.word	0x20001150
 8006a2c:	200011d8 	.word	0x200011d8
 8006a30:	20001160 	.word	0x20001160
 8006a34:	08008050 	.word	0x08008050

08006a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b04      	subs	r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b04      	subs	r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3b04      	subs	r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a68:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <pxPortInitialiseStack+0x54>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3b14      	subs	r3, #20
 8006a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3b20      	subs	r3, #32
 8006a7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a80:	68fb      	ldr	r3, [r7, #12]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	08006a91 	.word	0x08006a91

08006a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <prvTaskExitError+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa2:	d00a      	beq.n	8006aba <prvTaskExitError+0x2a>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <prvTaskExitError+0x28>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	60bb      	str	r3, [r7, #8]
}
 8006acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ace:	bf00      	nop
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0fc      	beq.n	8006ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c
	...

08006af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <pxCurrentTCBConst2>)
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006afa:	f380 8809 	msr	PSP, r0
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b0e:	4770      	bx	lr

08006b10 <pxCurrentTCBConst2>:
 8006b10:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b18:	4806      	ldr	r0, [pc, #24]	; (8006b34 <prvPortStartFirstTask+0x1c>)
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f380 8808 	msr	MSP, r0
 8006b22:	b662      	cpsie	i
 8006b24:	b661      	cpsie	f
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	df00      	svc	0
 8006b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b32:	bf00      	nop
 8006b34:	e000ed08 	.word	0xe000ed08

08006b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b3e:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <xPortStartScheduler+0xd0>)
 8006b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	4b2a      	ldr	r3, [pc, #168]	; (8006c0c <xPortStartScheduler+0xd4>)
 8006b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006b68:	2207      	movs	r2, #7
 8006b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6c:	e009      	b.n	8006b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b6e:	4b28      	ldr	r3, [pc, #160]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d0ef      	beq.n	8006b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b8e:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f1c3 0307 	rsb	r3, r3, #7
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d00a      	beq.n	8006bb0 <xPortStartScheduler+0x78>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60bb      	str	r3, [r7, #8]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bb0:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006bb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bc2:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <xPortStartScheduler+0xd8>)
 8006bc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <xPortStartScheduler+0xdc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a10      	ldr	r2, [pc, #64]	; (8006c14 <xPortStartScheduler+0xdc>)
 8006bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bda:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <xPortStartScheduler+0xdc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <xPortStartScheduler+0xdc>)
 8006be0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006be4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006be6:	f000 f8b9 	bl	8006d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <xPortStartScheduler+0xe0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bf0:	f7ff ff92 	bl	8006b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf4:	f7fe ff6e 	bl	8005ad4 <vTaskSwitchContext>
	prvTaskExitError();
 8006bf8:	f7ff ff4a 	bl	8006a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	e000e400 	.word	0xe000e400
 8006c0c:	20001220 	.word	0x20001220
 8006c10:	20001224 	.word	0x20001224
 8006c14:	e000ed20 	.word	0xe000ed20
 8006c18:	2000000c 	.word	0x2000000c

08006c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <vPortEnterCritical+0x58>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	4a0d      	ldr	r2, [pc, #52]	; (8006c74 <vPortEnterCritical+0x58>)
 8006c3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <vPortEnterCritical+0x58>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10f      	bne.n	8006c68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c48:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <vPortEnterCritical+0x5c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	603b      	str	r3, [r7, #0]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <vPortEnterCritical+0x4a>
	}
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c82:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <vPortExitCritical+0x4c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <vPortExitCritical+0x24>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	607b      	str	r3, [r7, #4]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <vPortExitCritical+0x4c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <vPortExitCritical+0x4c>)
 8006ca8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <vPortExitCritical+0x4c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <vPortExitCritical+0x42>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f383 8811 	msr	BASEPRI, r3
}
 8006cbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	2000000c 	.word	0x2000000c
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cd0:	f3ef 8009 	mrs	r0, PSP
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <pxCurrentTCBConst>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ce0:	6010      	str	r0, [r2, #0]
 8006ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ce6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cea:	f380 8811 	msr	BASEPRI, r0
 8006cee:	f7fe fef1 	bl	8005ad4 <vTaskSwitchContext>
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	6808      	ldr	r0, [r1, #0]
 8006d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d06:	f380 8809 	msr	PSP, r0
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	4770      	bx	lr

08006d10 <pxCurrentTCBConst>:
 8006d10:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	607b      	str	r3, [r7, #4]
}
 8006d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d32:	f7fe fe11 	bl	8005958 <xTaskIncrementTick>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <SysTick_Handler+0x40>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	2300      	movs	r3, #0
 8006d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
}
 8006d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <vPortSetupTimerInterrupt+0x30>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <vPortSetupTimerInterrupt+0x34>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <vPortSetupTimerInterrupt+0x38>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <vPortSetupTimerInterrupt+0x3c>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	4a08      	ldr	r2, [pc, #32]	; (8006d9c <vPortSetupTimerInterrupt+0x40>)
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d7e:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <vPortSetupTimerInterrupt+0x30>)
 8006d80:	2207      	movs	r2, #7
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	e000e010 	.word	0xe000e010
 8006d90:	e000e018 	.word	0xe000e018
 8006d94:	20000000 	.word	0x20000000
 8006d98:	10624dd3 	.word	0x10624dd3
 8006d9c:	e000e014 	.word	0xe000e014

08006da0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006da6:	f3ef 8305 	mrs	r3, IPSR
 8006daa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d914      	bls.n	8006ddc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006db2:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <vPortValidateInterruptPriority+0x6c>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dbc:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <vPortValidateInterruptPriority+0x70>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	7afa      	ldrb	r2, [r7, #11]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d20a      	bcs.n	8006ddc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	607b      	str	r3, [r7, #4]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <vPortValidateInterruptPriority+0x74>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <vPortValidateInterruptPriority+0x78>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d90a      	bls.n	8006e02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	603b      	str	r3, [r7, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <vPortValidateInterruptPriority+0x60>
	}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	e000e3f0 	.word	0xe000e3f0
 8006e10:	20001220 	.word	0x20001220
 8006e14:	e000ed0c 	.word	0xe000ed0c
 8006e18:	20001224 	.word	0x20001224

08006e1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e28:	f7fe fcde 	bl	80057e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e2c:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <pvPortMalloc+0x174>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e34:	f000 f924 	bl	8007080 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e38:	4b56      	ldr	r3, [pc, #344]	; (8006f94 <pvPortMalloc+0x178>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 808e 	bne.w	8006f62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01d      	beq.n	8006e88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d014      	beq.n	8006e88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	3308      	adds	r3, #8
 8006e66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <pvPortMalloc+0x6c>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	617b      	str	r3, [r7, #20]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d069      	beq.n	8006f62 <pvPortMalloc+0x146>
 8006e8e:	4b42      	ldr	r3, [pc, #264]	; (8006f98 <pvPortMalloc+0x17c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d864      	bhi.n	8006f62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e98:	4b40      	ldr	r3, [pc, #256]	; (8006f9c <pvPortMalloc+0x180>)
 8006e9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e9c:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <pvPortMalloc+0x180>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ea2:	e004      	b.n	8006eae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d903      	bls.n	8006ec0 <pvPortMalloc+0xa4>
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f1      	bne.n	8006ea4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ec0:	4b33      	ldr	r3, [pc, #204]	; (8006f90 <pvPortMalloc+0x174>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d04b      	beq.n	8006f62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2208      	movs	r2, #8
 8006ed0:	4413      	add	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d91f      	bls.n	8006f2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <pvPortMalloc+0xf8>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	613b      	str	r3, [r7, #16]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f26:	69b8      	ldr	r0, [r7, #24]
 8006f28:	f000 f90c 	bl	8007144 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	; (8006f98 <pvPortMalloc+0x17c>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <pvPortMalloc+0x17c>)
 8006f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f3a:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <pvPortMalloc+0x17c>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b18      	ldr	r3, [pc, #96]	; (8006fa0 <pvPortMalloc+0x184>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d203      	bcs.n	8006f4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <pvPortMalloc+0x17c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <pvPortMalloc+0x184>)
 8006f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <pvPortMalloc+0x178>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f62:	f7fe fc4f 	bl	8005804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <pvPortMalloc+0x16a>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <pvPortMalloc+0x168>
	return pvReturn;
 8006f86:	69fb      	ldr	r3, [r7, #28]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3728      	adds	r7, #40	; 0x28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20011230 	.word	0x20011230
 8006f94:	2001123c 	.word	0x2001123c
 8006f98:	20011234 	.word	0x20011234
 8006f9c:	20011228 	.word	0x20011228
 8006fa0:	20011238 	.word	0x20011238

08006fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d048      	beq.n	8007048 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	425b      	negs	r3, r3
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	4b21      	ldr	r3, [pc, #132]	; (8007050 <vPortFree+0xac>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <vPortFree+0x44>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	60fb      	str	r3, [r7, #12]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00a      	beq.n	8007006 <vPortFree+0x62>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60bb      	str	r3, [r7, #8]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	4b11      	ldr	r3, [pc, #68]	; (8007050 <vPortFree+0xac>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d019      	beq.n	8007048 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d115      	bne.n	8007048 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <vPortFree+0xac>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	43db      	mvns	r3, r3
 8007026:	401a      	ands	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800702c:	f7fe fbdc 	bl	80057e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	4b07      	ldr	r3, [pc, #28]	; (8007054 <vPortFree+0xb0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4413      	add	r3, r2
 800703a:	4a06      	ldr	r2, [pc, #24]	; (8007054 <vPortFree+0xb0>)
 800703c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800703e:	6938      	ldr	r0, [r7, #16]
 8007040:	f000 f880 	bl	8007144 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007044:	f7fe fbde 	bl	8005804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	2001123c 	.word	0x2001123c
 8007054:	20011234 	.word	0x20011234

08007058 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <xPortGetFreeHeapSize+0x10>)
 800705e:	681b      	ldr	r3, [r3, #0]
}
 8007060:	4618      	mov	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr
 8007068:	20011234 	.word	0x20011234

0800706c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <xPortGetMinimumEverFreeHeapSize+0x10>)
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr
 800707c:	20011238 	.word	0x20011238

08007080 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800708a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800708c:	4b27      	ldr	r3, [pc, #156]	; (800712c <prvHeapInit+0xac>)
 800708e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3307      	adds	r3, #7
 800709e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0307 	bic.w	r3, r3, #7
 80070a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	4a1f      	ldr	r2, [pc, #124]	; (800712c <prvHeapInit+0xac>)
 80070b0:	4413      	add	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <prvHeapInit+0xb0>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070be:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <prvHeapInit+0xb0>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070cc:	2208      	movs	r2, #8
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <prvHeapInit+0xb4>)
 80070e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <prvHeapInit+0xb4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ea:	4b12      	ldr	r3, [pc, #72]	; (8007134 <prvHeapInit+0xb4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <prvHeapInit+0xb4>)
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <prvHeapInit+0xb8>)
 800710e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	4a09      	ldr	r2, [pc, #36]	; (800713c <prvHeapInit+0xbc>)
 8007116:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <prvHeapInit+0xc0>)
 800711a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800711e:	601a      	str	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20001228 	.word	0x20001228
 8007130:	20011228 	.word	0x20011228
 8007134:	20011230 	.word	0x20011230
 8007138:	20011238 	.word	0x20011238
 800713c:	20011234 	.word	0x20011234
 8007140:	2001123c 	.word	0x2001123c

08007144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800714c:	4b27      	ldr	r3, [pc, #156]	; (80071ec <prvInsertBlockIntoFreeList+0xa8>)
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e002      	b.n	8007158 <prvInsertBlockIntoFreeList+0x14>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d8f7      	bhi.n	8007152 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d108      	bne.n	8007186 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d118      	bne.n	80071cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <prvInsertBlockIntoFreeList+0xac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d00d      	beq.n	80071c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e008      	b.n	80071d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071c2:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <prvInsertBlockIntoFreeList+0xac>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e003      	b.n	80071d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d002      	beq.n	80071e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	20011228 	.word	0x20011228
 80071f0:	20011230 	.word	0x20011230

080071f4 <__cxa_guard_acquire>:
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	4603      	mov	r3, r0
 80071f8:	07d2      	lsls	r2, r2, #31
 80071fa:	d405      	bmi.n	8007208 <__cxa_guard_acquire+0x14>
 80071fc:	7842      	ldrb	r2, [r0, #1]
 80071fe:	b102      	cbz	r2, 8007202 <__cxa_guard_acquire+0xe>
 8007200:	deff      	udf	#255	; 0xff
 8007202:	2001      	movs	r0, #1
 8007204:	7058      	strb	r0, [r3, #1]
 8007206:	4770      	bx	lr
 8007208:	2000      	movs	r0, #0
 800720a:	4770      	bx	lr

0800720c <__cxa_guard_release>:
 800720c:	2301      	movs	r3, #1
 800720e:	6003      	str	r3, [r0, #0]
 8007210:	4770      	bx	lr
	...

08007214 <sniprintf>:
 8007214:	b40c      	push	{r2, r3}
 8007216:	b530      	push	{r4, r5, lr}
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <sniprintf+0x64>)
 800721a:	1e0c      	subs	r4, r1, #0
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	b09d      	sub	sp, #116	; 0x74
 8007220:	da08      	bge.n	8007234 <sniprintf+0x20>
 8007222:	238b      	movs	r3, #139	; 0x8b
 8007224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	b01d      	add	sp, #116	; 0x74
 800722c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007230:	b002      	add	sp, #8
 8007232:	4770      	bx	lr
 8007234:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007238:	f8ad 3014 	strh.w	r3, [sp, #20]
 800723c:	bf0c      	ite	eq
 800723e:	4623      	moveq	r3, r4
 8007240:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724c:	9002      	str	r0, [sp, #8]
 800724e:	9006      	str	r0, [sp, #24]
 8007250:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007254:	4628      	mov	r0, r5
 8007256:	ab21      	add	r3, sp, #132	; 0x84
 8007258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800725a:	a902      	add	r1, sp, #8
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	f000 f981 	bl	8007564 <_svfiprintf_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	bfbc      	itt	lt
 8007266:	238b      	movlt	r3, #139	; 0x8b
 8007268:	602b      	strlt	r3, [r5, #0]
 800726a:	2c00      	cmp	r4, #0
 800726c:	d0dd      	beq.n	800722a <sniprintf+0x16>
 800726e:	2200      	movs	r2, #0
 8007270:	9b02      	ldr	r3, [sp, #8]
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e7d9      	b.n	800722a <sniprintf+0x16>
 8007276:	bf00      	nop
 8007278:	2000005c 	.word	0x2000005c

0800727c <_vsniprintf_r>:
 800727c:	b530      	push	{r4, r5, lr}
 800727e:	4614      	mov	r4, r2
 8007280:	2c00      	cmp	r4, #0
 8007282:	4605      	mov	r5, r0
 8007284:	461a      	mov	r2, r3
 8007286:	b09b      	sub	sp, #108	; 0x6c
 8007288:	da05      	bge.n	8007296 <_vsniprintf_r+0x1a>
 800728a:	238b      	movs	r3, #139	; 0x8b
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007292:	b01b      	add	sp, #108	; 0x6c
 8007294:	bd30      	pop	{r4, r5, pc}
 8007296:	f44f 7302 	mov.w	r3, #520	; 0x208
 800729a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800729e:	bf0c      	ite	eq
 80072a0:	4623      	moveq	r3, r4
 80072a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	9305      	str	r3, [sp, #20]
 80072aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072ae:	9100      	str	r1, [sp, #0]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80072b6:	4669      	mov	r1, sp
 80072b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072ba:	f000 f953 	bl	8007564 <_svfiprintf_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	bfbc      	itt	lt
 80072c2:	238b      	movlt	r3, #139	; 0x8b
 80072c4:	602b      	strlt	r3, [r5, #0]
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	d0e3      	beq.n	8007292 <_vsniprintf_r+0x16>
 80072ca:	2200      	movs	r2, #0
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e7df      	b.n	8007292 <_vsniprintf_r+0x16>
	...

080072d4 <vsniprintf>:
 80072d4:	b507      	push	{r0, r1, r2, lr}
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	460a      	mov	r2, r1
 80072dc:	4601      	mov	r1, r0
 80072de:	4803      	ldr	r0, [pc, #12]	; (80072ec <vsniprintf+0x18>)
 80072e0:	6800      	ldr	r0, [r0, #0]
 80072e2:	f7ff ffcb 	bl	800727c <_vsniprintf_r>
 80072e6:	b003      	add	sp, #12
 80072e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ec:	2000005c 	.word	0x2000005c

080072f0 <memset>:
 80072f0:	4603      	mov	r3, r0
 80072f2:	4402      	add	r2, r0
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	f803 1b01 	strb.w	r1, [r3], #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <_reclaim_reent>:
 8007300:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <_reclaim_reent+0xa8>)
 8007302:	b570      	push	{r4, r5, r6, lr}
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4604      	mov	r4, r0
 8007308:	4283      	cmp	r3, r0
 800730a:	d04b      	beq.n	80073a4 <_reclaim_reent+0xa4>
 800730c:	69c3      	ldr	r3, [r0, #28]
 800730e:	b143      	cbz	r3, 8007322 <_reclaim_reent+0x22>
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d144      	bne.n	80073a0 <_reclaim_reent+0xa0>
 8007316:	69e3      	ldr	r3, [r4, #28]
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	b111      	cbz	r1, 8007322 <_reclaim_reent+0x22>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f87f 	bl	8007420 <_free_r>
 8007322:	6961      	ldr	r1, [r4, #20]
 8007324:	b111      	cbz	r1, 800732c <_reclaim_reent+0x2c>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f87a 	bl	8007420 <_free_r>
 800732c:	69e1      	ldr	r1, [r4, #28]
 800732e:	b111      	cbz	r1, 8007336 <_reclaim_reent+0x36>
 8007330:	4620      	mov	r0, r4
 8007332:	f000 f875 	bl	8007420 <_free_r>
 8007336:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007338:	b111      	cbz	r1, 8007340 <_reclaim_reent+0x40>
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f870 	bl	8007420 <_free_r>
 8007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007342:	b111      	cbz	r1, 800734a <_reclaim_reent+0x4a>
 8007344:	4620      	mov	r0, r4
 8007346:	f000 f86b 	bl	8007420 <_free_r>
 800734a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800734c:	b111      	cbz	r1, 8007354 <_reclaim_reent+0x54>
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f866 	bl	8007420 <_free_r>
 8007354:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007356:	b111      	cbz	r1, 800735e <_reclaim_reent+0x5e>
 8007358:	4620      	mov	r0, r4
 800735a:	f000 f861 	bl	8007420 <_free_r>
 800735e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007360:	b111      	cbz	r1, 8007368 <_reclaim_reent+0x68>
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f85c 	bl	8007420 <_free_r>
 8007368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800736a:	b111      	cbz	r1, 8007372 <_reclaim_reent+0x72>
 800736c:	4620      	mov	r0, r4
 800736e:	f000 f857 	bl	8007420 <_free_r>
 8007372:	6a23      	ldr	r3, [r4, #32]
 8007374:	b1b3      	cbz	r3, 80073a4 <_reclaim_reent+0xa4>
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800737c:	4718      	bx	r3
 800737e:	5949      	ldr	r1, [r1, r5]
 8007380:	b941      	cbnz	r1, 8007394 <_reclaim_reent+0x94>
 8007382:	3504      	adds	r5, #4
 8007384:	69e3      	ldr	r3, [r4, #28]
 8007386:	2d80      	cmp	r5, #128	; 0x80
 8007388:	68d9      	ldr	r1, [r3, #12]
 800738a:	d1f8      	bne.n	800737e <_reclaim_reent+0x7e>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f847 	bl	8007420 <_free_r>
 8007392:	e7c0      	b.n	8007316 <_reclaim_reent+0x16>
 8007394:	680e      	ldr	r6, [r1, #0]
 8007396:	4620      	mov	r0, r4
 8007398:	f000 f842 	bl	8007420 <_free_r>
 800739c:	4631      	mov	r1, r6
 800739e:	e7ef      	b.n	8007380 <_reclaim_reent+0x80>
 80073a0:	2500      	movs	r5, #0
 80073a2:	e7ef      	b.n	8007384 <_reclaim_reent+0x84>
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	bf00      	nop
 80073a8:	2000005c 	.word	0x2000005c

080073ac <__errno>:
 80073ac:	4b01      	ldr	r3, [pc, #4]	; (80073b4 <__errno+0x8>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	2000005c 	.word	0x2000005c

080073b8 <__libc_init_array>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	2600      	movs	r6, #0
 80073bc:	4d0c      	ldr	r5, [pc, #48]	; (80073f0 <__libc_init_array+0x38>)
 80073be:	4c0d      	ldr	r4, [pc, #52]	; (80073f4 <__libc_init_array+0x3c>)
 80073c0:	1b64      	subs	r4, r4, r5
 80073c2:	10a4      	asrs	r4, r4, #2
 80073c4:	42a6      	cmp	r6, r4
 80073c6:	d109      	bne.n	80073dc <__libc_init_array+0x24>
 80073c8:	f000 fc7a 	bl	8007cc0 <_init>
 80073cc:	2600      	movs	r6, #0
 80073ce:	4d0a      	ldr	r5, [pc, #40]	; (80073f8 <__libc_init_array+0x40>)
 80073d0:	4c0a      	ldr	r4, [pc, #40]	; (80073fc <__libc_init_array+0x44>)
 80073d2:	1b64      	subs	r4, r4, r5
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	42a6      	cmp	r6, r4
 80073d8:	d105      	bne.n	80073e6 <__libc_init_array+0x2e>
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e0:	4798      	blx	r3
 80073e2:	3601      	adds	r6, #1
 80073e4:	e7ee      	b.n	80073c4 <__libc_init_array+0xc>
 80073e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ea:	4798      	blx	r3
 80073ec:	3601      	adds	r6, #1
 80073ee:	e7f2      	b.n	80073d6 <__libc_init_array+0x1e>
 80073f0:	080080b8 	.word	0x080080b8
 80073f4:	080080b8 	.word	0x080080b8
 80073f8:	080080b8 	.word	0x080080b8
 80073fc:	080080c4 	.word	0x080080c4

08007400 <__retarget_lock_acquire_recursive>:
 8007400:	4770      	bx	lr

08007402 <__retarget_lock_release_recursive>:
 8007402:	4770      	bx	lr

08007404 <memcpy>:
 8007404:	440a      	add	r2, r1
 8007406:	4291      	cmp	r1, r2
 8007408:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800740c:	d100      	bne.n	8007410 <memcpy+0xc>
 800740e:	4770      	bx	lr
 8007410:	b510      	push	{r4, lr}
 8007412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007416:	4291      	cmp	r1, r2
 8007418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741c:	d1f9      	bne.n	8007412 <memcpy+0xe>
 800741e:	bd10      	pop	{r4, pc}

08007420 <_free_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d040      	beq.n	80074aa <_free_r+0x8a>
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfb8      	it	lt
 8007432:	18e4      	addlt	r4, r4, r3
 8007434:	f000 fbc8 	bl	8007bc8 <__malloc_lock>
 8007438:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <_free_r+0x8c>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	b933      	cbnz	r3, 800744c <_free_r+0x2c>
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6014      	str	r4, [r2, #0]
 8007442:	4628      	mov	r0, r5
 8007444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007448:	f000 bbc4 	b.w	8007bd4 <__malloc_unlock>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf01      	itttt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	e7ed      	b.n	800743e <_free_r+0x1e>
 8007462:	461a      	mov	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b10b      	cbz	r3, 800746c <_free_r+0x4c>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d9fa      	bls.n	8007462 <_free_r+0x42>
 800746c:	6811      	ldr	r1, [r2, #0]
 800746e:	1850      	adds	r0, r2, r1
 8007470:	42a0      	cmp	r0, r4
 8007472:	d10b      	bne.n	800748c <_free_r+0x6c>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	4401      	add	r1, r0
 8007478:	1850      	adds	r0, r2, r1
 800747a:	4283      	cmp	r3, r0
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	d1e0      	bne.n	8007442 <_free_r+0x22>
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4408      	add	r0, r1
 8007486:	6010      	str	r0, [r2, #0]
 8007488:	6053      	str	r3, [r2, #4]
 800748a:	e7da      	b.n	8007442 <_free_r+0x22>
 800748c:	d902      	bls.n	8007494 <_free_r+0x74>
 800748e:	230c      	movs	r3, #12
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	e7d6      	b.n	8007442 <_free_r+0x22>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6054      	str	r4, [r2, #4]
 80074a8:	e7cb      	b.n	8007442 <_free_r+0x22>
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20011380 	.word	0x20011380

080074b0 <__ssputs_r>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	461f      	mov	r7, r3
 80074b6:	688e      	ldr	r6, [r1, #8]
 80074b8:	4682      	mov	sl, r0
 80074ba:	42be      	cmp	r6, r7
 80074bc:	460c      	mov	r4, r1
 80074be:	4690      	mov	r8, r2
 80074c0:	680b      	ldr	r3, [r1, #0]
 80074c2:	d82c      	bhi.n	800751e <__ssputs_r+0x6e>
 80074c4:	898a      	ldrh	r2, [r1, #12]
 80074c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ca:	d026      	beq.n	800751a <__ssputs_r+0x6a>
 80074cc:	6965      	ldr	r5, [r4, #20]
 80074ce:	6909      	ldr	r1, [r1, #16]
 80074d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074d4:	eba3 0901 	sub.w	r9, r3, r1
 80074d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074dc:	1c7b      	adds	r3, r7, #1
 80074de:	444b      	add	r3, r9
 80074e0:	106d      	asrs	r5, r5, #1
 80074e2:	429d      	cmp	r5, r3
 80074e4:	bf38      	it	cc
 80074e6:	461d      	movcc	r5, r3
 80074e8:	0553      	lsls	r3, r2, #21
 80074ea:	d527      	bpl.n	800753c <__ssputs_r+0x8c>
 80074ec:	4629      	mov	r1, r5
 80074ee:	f000 f957 	bl	80077a0 <_malloc_r>
 80074f2:	4606      	mov	r6, r0
 80074f4:	b360      	cbz	r0, 8007550 <__ssputs_r+0xa0>
 80074f6:	464a      	mov	r2, r9
 80074f8:	6921      	ldr	r1, [r4, #16]
 80074fa:	f7ff ff83 	bl	8007404 <memcpy>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	6126      	str	r6, [r4, #16]
 800750c:	444e      	add	r6, r9
 800750e:	6026      	str	r6, [r4, #0]
 8007510:	463e      	mov	r6, r7
 8007512:	6165      	str	r5, [r4, #20]
 8007514:	eba5 0509 	sub.w	r5, r5, r9
 8007518:	60a5      	str	r5, [r4, #8]
 800751a:	42be      	cmp	r6, r7
 800751c:	d900      	bls.n	8007520 <__ssputs_r+0x70>
 800751e:	463e      	mov	r6, r7
 8007520:	4632      	mov	r2, r6
 8007522:	4641      	mov	r1, r8
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	f000 fb8a 	bl	8007c3e <memmove>
 800752a:	2000      	movs	r0, #0
 800752c:	68a3      	ldr	r3, [r4, #8]
 800752e:	1b9b      	subs	r3, r3, r6
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	4433      	add	r3, r6
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	462a      	mov	r2, r5
 800753e:	f000 fb4f 	bl	8007be0 <_realloc_r>
 8007542:	4606      	mov	r6, r0
 8007544:	2800      	cmp	r0, #0
 8007546:	d1e0      	bne.n	800750a <__ssputs_r+0x5a>
 8007548:	4650      	mov	r0, sl
 800754a:	6921      	ldr	r1, [r4, #16]
 800754c:	f7ff ff68 	bl	8007420 <_free_r>
 8007550:	230c      	movs	r3, #12
 8007552:	f8ca 3000 	str.w	r3, [sl]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800755c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	e7e9      	b.n	8007538 <__ssputs_r+0x88>

08007564 <_svfiprintf_r>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	4698      	mov	r8, r3
 800756a:	898b      	ldrh	r3, [r1, #12]
 800756c:	4607      	mov	r7, r0
 800756e:	061b      	lsls	r3, r3, #24
 8007570:	460d      	mov	r5, r1
 8007572:	4614      	mov	r4, r2
 8007574:	b09d      	sub	sp, #116	; 0x74
 8007576:	d50e      	bpl.n	8007596 <_svfiprintf_r+0x32>
 8007578:	690b      	ldr	r3, [r1, #16]
 800757a:	b963      	cbnz	r3, 8007596 <_svfiprintf_r+0x32>
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	f000 f90f 	bl	80077a0 <_malloc_r>
 8007582:	6028      	str	r0, [r5, #0]
 8007584:	6128      	str	r0, [r5, #16]
 8007586:	b920      	cbnz	r0, 8007592 <_svfiprintf_r+0x2e>
 8007588:	230c      	movs	r3, #12
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007590:	e0d0      	b.n	8007734 <_svfiprintf_r+0x1d0>
 8007592:	2340      	movs	r3, #64	; 0x40
 8007594:	616b      	str	r3, [r5, #20]
 8007596:	2300      	movs	r3, #0
 8007598:	9309      	str	r3, [sp, #36]	; 0x24
 800759a:	2320      	movs	r3, #32
 800759c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a0:	2330      	movs	r3, #48	; 0x30
 80075a2:	f04f 0901 	mov.w	r9, #1
 80075a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800774c <_svfiprintf_r+0x1e8>
 80075ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b2:	4623      	mov	r3, r4
 80075b4:	469a      	mov	sl, r3
 80075b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ba:	b10a      	cbz	r2, 80075c0 <_svfiprintf_r+0x5c>
 80075bc:	2a25      	cmp	r2, #37	; 0x25
 80075be:	d1f9      	bne.n	80075b4 <_svfiprintf_r+0x50>
 80075c0:	ebba 0b04 	subs.w	fp, sl, r4
 80075c4:	d00b      	beq.n	80075de <_svfiprintf_r+0x7a>
 80075c6:	465b      	mov	r3, fp
 80075c8:	4622      	mov	r2, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ff6f 	bl	80074b0 <__ssputs_r>
 80075d2:	3001      	adds	r0, #1
 80075d4:	f000 80a9 	beq.w	800772a <_svfiprintf_r+0x1c6>
 80075d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075da:	445a      	add	r2, fp
 80075dc:	9209      	str	r2, [sp, #36]	; 0x24
 80075de:	f89a 3000 	ldrb.w	r3, [sl]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80a1 	beq.w	800772a <_svfiprintf_r+0x1c6>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f2:	f10a 0a01 	add.w	sl, sl, #1
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	9307      	str	r3, [sp, #28]
 80075fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007600:	4654      	mov	r4, sl
 8007602:	2205      	movs	r2, #5
 8007604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007608:	4850      	ldr	r0, [pc, #320]	; (800774c <_svfiprintf_r+0x1e8>)
 800760a:	f000 fb43 	bl	8007c94 <memchr>
 800760e:	9a04      	ldr	r2, [sp, #16]
 8007610:	b9d8      	cbnz	r0, 800764a <_svfiprintf_r+0xe6>
 8007612:	06d0      	lsls	r0, r2, #27
 8007614:	bf44      	itt	mi
 8007616:	2320      	movmi	r3, #32
 8007618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761c:	0711      	lsls	r1, r2, #28
 800761e:	bf44      	itt	mi
 8007620:	232b      	movmi	r3, #43	; 0x2b
 8007622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007626:	f89a 3000 	ldrb.w	r3, [sl]
 800762a:	2b2a      	cmp	r3, #42	; 0x2a
 800762c:	d015      	beq.n	800765a <_svfiprintf_r+0xf6>
 800762e:	4654      	mov	r4, sl
 8007630:	2000      	movs	r0, #0
 8007632:	f04f 0c0a 	mov.w	ip, #10
 8007636:	9a07      	ldr	r2, [sp, #28]
 8007638:	4621      	mov	r1, r4
 800763a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763e:	3b30      	subs	r3, #48	; 0x30
 8007640:	2b09      	cmp	r3, #9
 8007642:	d94d      	bls.n	80076e0 <_svfiprintf_r+0x17c>
 8007644:	b1b0      	cbz	r0, 8007674 <_svfiprintf_r+0x110>
 8007646:	9207      	str	r2, [sp, #28]
 8007648:	e014      	b.n	8007674 <_svfiprintf_r+0x110>
 800764a:	eba0 0308 	sub.w	r3, r0, r8
 800764e:	fa09 f303 	lsl.w	r3, r9, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	46a2      	mov	sl, r4
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	e7d2      	b.n	8007600 <_svfiprintf_r+0x9c>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	1d19      	adds	r1, r3, #4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	9103      	str	r1, [sp, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfbb      	ittet	lt
 8007666:	425b      	neglt	r3, r3
 8007668:	f042 0202 	orrlt.w	r2, r2, #2
 800766c:	9307      	strge	r3, [sp, #28]
 800766e:	9307      	strlt	r3, [sp, #28]
 8007670:	bfb8      	it	lt
 8007672:	9204      	strlt	r2, [sp, #16]
 8007674:	7823      	ldrb	r3, [r4, #0]
 8007676:	2b2e      	cmp	r3, #46	; 0x2e
 8007678:	d10c      	bne.n	8007694 <_svfiprintf_r+0x130>
 800767a:	7863      	ldrb	r3, [r4, #1]
 800767c:	2b2a      	cmp	r3, #42	; 0x2a
 800767e:	d134      	bne.n	80076ea <_svfiprintf_r+0x186>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	3402      	adds	r4, #2
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	9203      	str	r2, [sp, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfb8      	it	lt
 800768e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007750 <_svfiprintf_r+0x1ec>
 8007698:	2203      	movs	r2, #3
 800769a:	4650      	mov	r0, sl
 800769c:	7821      	ldrb	r1, [r4, #0]
 800769e:	f000 faf9 	bl	8007c94 <memchr>
 80076a2:	b138      	cbz	r0, 80076b4 <_svfiprintf_r+0x150>
 80076a4:	2240      	movs	r2, #64	; 0x40
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	eba0 000a 	sub.w	r0, r0, sl
 80076ac:	4082      	lsls	r2, r0
 80076ae:	4313      	orrs	r3, r2
 80076b0:	3401      	adds	r4, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b8:	2206      	movs	r2, #6
 80076ba:	4826      	ldr	r0, [pc, #152]	; (8007754 <_svfiprintf_r+0x1f0>)
 80076bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c0:	f000 fae8 	bl	8007c94 <memchr>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d038      	beq.n	800773a <_svfiprintf_r+0x1d6>
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <_svfiprintf_r+0x1f4>)
 80076ca:	bb1b      	cbnz	r3, 8007714 <_svfiprintf_r+0x1b0>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	3307      	adds	r3, #7
 80076d0:	f023 0307 	bic.w	r3, r3, #7
 80076d4:	3308      	adds	r3, #8
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	4433      	add	r3, r6
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	e768      	b.n	80075b2 <_svfiprintf_r+0x4e>
 80076e0:	460c      	mov	r4, r1
 80076e2:	2001      	movs	r0, #1
 80076e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e8:	e7a6      	b.n	8007638 <_svfiprintf_r+0xd4>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f04f 0c0a 	mov.w	ip, #10
 80076f0:	4619      	mov	r1, r3
 80076f2:	3401      	adds	r4, #1
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	4620      	mov	r0, r4
 80076f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fc:	3a30      	subs	r2, #48	; 0x30
 80076fe:	2a09      	cmp	r2, #9
 8007700:	d903      	bls.n	800770a <_svfiprintf_r+0x1a6>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0c6      	beq.n	8007694 <_svfiprintf_r+0x130>
 8007706:	9105      	str	r1, [sp, #20]
 8007708:	e7c4      	b.n	8007694 <_svfiprintf_r+0x130>
 800770a:	4604      	mov	r4, r0
 800770c:	2301      	movs	r3, #1
 800770e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007712:	e7f0      	b.n	80076f6 <_svfiprintf_r+0x192>
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	462a      	mov	r2, r5
 800771a:	4638      	mov	r0, r7
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <_svfiprintf_r+0x1f8>)
 800771e:	a904      	add	r1, sp, #16
 8007720:	f3af 8000 	nop.w
 8007724:	1c42      	adds	r2, r0, #1
 8007726:	4606      	mov	r6, r0
 8007728:	d1d6      	bne.n	80076d8 <_svfiprintf_r+0x174>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	065b      	lsls	r3, r3, #25
 800772e:	f53f af2d 	bmi.w	800758c <_svfiprintf_r+0x28>
 8007732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007734:	b01d      	add	sp, #116	; 0x74
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	ab03      	add	r3, sp, #12
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	462a      	mov	r2, r5
 8007740:	4638      	mov	r0, r7
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <_svfiprintf_r+0x1f8>)
 8007744:	a904      	add	r1, sp, #16
 8007746:	f000 f91d 	bl	8007984 <_printf_i>
 800774a:	e7eb      	b.n	8007724 <_svfiprintf_r+0x1c0>
 800774c:	0800807c 	.word	0x0800807c
 8007750:	08008082 	.word	0x08008082
 8007754:	08008086 	.word	0x08008086
 8007758:	00000000 	.word	0x00000000
 800775c:	080074b1 	.word	0x080074b1

08007760 <sbrk_aligned>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4e0e      	ldr	r6, [pc, #56]	; (800779c <sbrk_aligned+0x3c>)
 8007764:	460c      	mov	r4, r1
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	4605      	mov	r5, r0
 800776a:	b911      	cbnz	r1, 8007772 <sbrk_aligned+0x12>
 800776c:	f000 fa82 	bl	8007c74 <_sbrk_r>
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	4621      	mov	r1, r4
 8007774:	4628      	mov	r0, r5
 8007776:	f000 fa7d 	bl	8007c74 <_sbrk_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d00a      	beq.n	8007794 <sbrk_aligned+0x34>
 800777e:	1cc4      	adds	r4, r0, #3
 8007780:	f024 0403 	bic.w	r4, r4, #3
 8007784:	42a0      	cmp	r0, r4
 8007786:	d007      	beq.n	8007798 <sbrk_aligned+0x38>
 8007788:	1a21      	subs	r1, r4, r0
 800778a:	4628      	mov	r0, r5
 800778c:	f000 fa72 	bl	8007c74 <_sbrk_r>
 8007790:	3001      	adds	r0, #1
 8007792:	d101      	bne.n	8007798 <sbrk_aligned+0x38>
 8007794:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007798:	4620      	mov	r0, r4
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	20011384 	.word	0x20011384

080077a0 <_malloc_r>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	1ccd      	adds	r5, r1, #3
 80077a6:	f025 0503 	bic.w	r5, r5, #3
 80077aa:	3508      	adds	r5, #8
 80077ac:	2d0c      	cmp	r5, #12
 80077ae:	bf38      	it	cc
 80077b0:	250c      	movcc	r5, #12
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	4607      	mov	r7, r0
 80077b6:	db01      	blt.n	80077bc <_malloc_r+0x1c>
 80077b8:	42a9      	cmp	r1, r5
 80077ba:	d905      	bls.n	80077c8 <_malloc_r+0x28>
 80077bc:	230c      	movs	r3, #12
 80077be:	2600      	movs	r6, #0
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	4630      	mov	r0, r6
 80077c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800789c <_malloc_r+0xfc>
 80077cc:	f000 f9fc 	bl	8007bc8 <__malloc_lock>
 80077d0:	f8d8 3000 	ldr.w	r3, [r8]
 80077d4:	461c      	mov	r4, r3
 80077d6:	bb5c      	cbnz	r4, 8007830 <_malloc_r+0x90>
 80077d8:	4629      	mov	r1, r5
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff ffc0 	bl	8007760 <sbrk_aligned>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	4604      	mov	r4, r0
 80077e4:	d155      	bne.n	8007892 <_malloc_r+0xf2>
 80077e6:	f8d8 4000 	ldr.w	r4, [r8]
 80077ea:	4626      	mov	r6, r4
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	d145      	bne.n	800787c <_malloc_r+0xdc>
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d048      	beq.n	8007886 <_malloc_r+0xe6>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	4631      	mov	r1, r6
 80077f8:	4638      	mov	r0, r7
 80077fa:	eb04 0903 	add.w	r9, r4, r3
 80077fe:	f000 fa39 	bl	8007c74 <_sbrk_r>
 8007802:	4581      	cmp	r9, r0
 8007804:	d13f      	bne.n	8007886 <_malloc_r+0xe6>
 8007806:	6821      	ldr	r1, [r4, #0]
 8007808:	4638      	mov	r0, r7
 800780a:	1a6d      	subs	r5, r5, r1
 800780c:	4629      	mov	r1, r5
 800780e:	f7ff ffa7 	bl	8007760 <sbrk_aligned>
 8007812:	3001      	adds	r0, #1
 8007814:	d037      	beq.n	8007886 <_malloc_r+0xe6>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	442b      	add	r3, r5
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	f8d8 3000 	ldr.w	r3, [r8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d038      	beq.n	8007896 <_malloc_r+0xf6>
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	42a2      	cmp	r2, r4
 8007828:	d12b      	bne.n	8007882 <_malloc_r+0xe2>
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
 800782e:	e00f      	b.n	8007850 <_malloc_r+0xb0>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	1b52      	subs	r2, r2, r5
 8007834:	d41f      	bmi.n	8007876 <_malloc_r+0xd6>
 8007836:	2a0b      	cmp	r2, #11
 8007838:	d917      	bls.n	800786a <_malloc_r+0xca>
 800783a:	1961      	adds	r1, r4, r5
 800783c:	42a3      	cmp	r3, r4
 800783e:	6025      	str	r5, [r4, #0]
 8007840:	bf18      	it	ne
 8007842:	6059      	strne	r1, [r3, #4]
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	bf08      	it	eq
 8007848:	f8c8 1000 	streq.w	r1, [r8]
 800784c:	5162      	str	r2, [r4, r5]
 800784e:	604b      	str	r3, [r1, #4]
 8007850:	4638      	mov	r0, r7
 8007852:	f104 060b 	add.w	r6, r4, #11
 8007856:	f000 f9bd 	bl	8007bd4 <__malloc_unlock>
 800785a:	f026 0607 	bic.w	r6, r6, #7
 800785e:	1d23      	adds	r3, r4, #4
 8007860:	1af2      	subs	r2, r6, r3
 8007862:	d0ae      	beq.n	80077c2 <_malloc_r+0x22>
 8007864:	1b9b      	subs	r3, r3, r6
 8007866:	50a3      	str	r3, [r4, r2]
 8007868:	e7ab      	b.n	80077c2 <_malloc_r+0x22>
 800786a:	42a3      	cmp	r3, r4
 800786c:	6862      	ldr	r2, [r4, #4]
 800786e:	d1dd      	bne.n	800782c <_malloc_r+0x8c>
 8007870:	f8c8 2000 	str.w	r2, [r8]
 8007874:	e7ec      	b.n	8007850 <_malloc_r+0xb0>
 8007876:	4623      	mov	r3, r4
 8007878:	6864      	ldr	r4, [r4, #4]
 800787a:	e7ac      	b.n	80077d6 <_malloc_r+0x36>
 800787c:	4634      	mov	r4, r6
 800787e:	6876      	ldr	r6, [r6, #4]
 8007880:	e7b4      	b.n	80077ec <_malloc_r+0x4c>
 8007882:	4613      	mov	r3, r2
 8007884:	e7cc      	b.n	8007820 <_malloc_r+0x80>
 8007886:	230c      	movs	r3, #12
 8007888:	4638      	mov	r0, r7
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	f000 f9a2 	bl	8007bd4 <__malloc_unlock>
 8007890:	e797      	b.n	80077c2 <_malloc_r+0x22>
 8007892:	6025      	str	r5, [r4, #0]
 8007894:	e7dc      	b.n	8007850 <_malloc_r+0xb0>
 8007896:	605b      	str	r3, [r3, #4]
 8007898:	deff      	udf	#255	; 0xff
 800789a:	bf00      	nop
 800789c:	20011380 	.word	0x20011380

080078a0 <_printf_common>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	4616      	mov	r6, r2
 80078a6:	4699      	mov	r9, r3
 80078a8:	688a      	ldr	r2, [r1, #8]
 80078aa:	690b      	ldr	r3, [r1, #16]
 80078ac:	4607      	mov	r7, r0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bfb8      	it	lt
 80078b2:	4613      	movlt	r3, r2
 80078b4:	6033      	str	r3, [r6, #0]
 80078b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078ba:	460c      	mov	r4, r1
 80078bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078c0:	b10a      	cbz	r2, 80078c6 <_printf_common+0x26>
 80078c2:	3301      	adds	r3, #1
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	0699      	lsls	r1, r3, #26
 80078ca:	bf42      	ittt	mi
 80078cc:	6833      	ldrmi	r3, [r6, #0]
 80078ce:	3302      	addmi	r3, #2
 80078d0:	6033      	strmi	r3, [r6, #0]
 80078d2:	6825      	ldr	r5, [r4, #0]
 80078d4:	f015 0506 	ands.w	r5, r5, #6
 80078d8:	d106      	bne.n	80078e8 <_printf_common+0x48>
 80078da:	f104 0a19 	add.w	sl, r4, #25
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	6832      	ldr	r2, [r6, #0]
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dc2b      	bgt.n	8007940 <_printf_common+0xa0>
 80078e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ec:	1e13      	subs	r3, r2, #0
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	bf18      	it	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	0692      	lsls	r2, r2, #26
 80078f6:	d430      	bmi.n	800795a <_printf_common+0xba>
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007900:	47c0      	blx	r8
 8007902:	3001      	adds	r0, #1
 8007904:	d023      	beq.n	800794e <_printf_common+0xae>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	6922      	ldr	r2, [r4, #16]
 800790a:	f003 0306 	and.w	r3, r3, #6
 800790e:	2b04      	cmp	r3, #4
 8007910:	bf14      	ite	ne
 8007912:	2500      	movne	r5, #0
 8007914:	6833      	ldreq	r3, [r6, #0]
 8007916:	f04f 0600 	mov.w	r6, #0
 800791a:	bf08      	it	eq
 800791c:	68e5      	ldreq	r5, [r4, #12]
 800791e:	f104 041a 	add.w	r4, r4, #26
 8007922:	bf08      	it	eq
 8007924:	1aed      	subeq	r5, r5, r3
 8007926:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800792a:	bf08      	it	eq
 800792c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007930:	4293      	cmp	r3, r2
 8007932:	bfc4      	itt	gt
 8007934:	1a9b      	subgt	r3, r3, r2
 8007936:	18ed      	addgt	r5, r5, r3
 8007938:	42b5      	cmp	r5, r6
 800793a:	d11a      	bne.n	8007972 <_printf_common+0xd2>
 800793c:	2000      	movs	r0, #0
 800793e:	e008      	b.n	8007952 <_printf_common+0xb2>
 8007940:	2301      	movs	r3, #1
 8007942:	4652      	mov	r2, sl
 8007944:	4649      	mov	r1, r9
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	3001      	adds	r0, #1
 800794c:	d103      	bne.n	8007956 <_printf_common+0xb6>
 800794e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007956:	3501      	adds	r5, #1
 8007958:	e7c1      	b.n	80078de <_printf_common+0x3e>
 800795a:	2030      	movs	r0, #48	; 0x30
 800795c:	18e1      	adds	r1, r4, r3
 800795e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007968:	4422      	add	r2, r4
 800796a:	3302      	adds	r3, #2
 800796c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007970:	e7c2      	b.n	80078f8 <_printf_common+0x58>
 8007972:	2301      	movs	r3, #1
 8007974:	4622      	mov	r2, r4
 8007976:	4649      	mov	r1, r9
 8007978:	4638      	mov	r0, r7
 800797a:	47c0      	blx	r8
 800797c:	3001      	adds	r0, #1
 800797e:	d0e6      	beq.n	800794e <_printf_common+0xae>
 8007980:	3601      	adds	r6, #1
 8007982:	e7d9      	b.n	8007938 <_printf_common+0x98>

08007984 <_printf_i>:
 8007984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	7e0f      	ldrb	r7, [r1, #24]
 800798a:	4691      	mov	r9, r2
 800798c:	2f78      	cmp	r7, #120	; 0x78
 800798e:	4680      	mov	r8, r0
 8007990:	460c      	mov	r4, r1
 8007992:	469a      	mov	sl, r3
 8007994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800799a:	d807      	bhi.n	80079ac <_printf_i+0x28>
 800799c:	2f62      	cmp	r7, #98	; 0x62
 800799e:	d80a      	bhi.n	80079b6 <_printf_i+0x32>
 80079a0:	2f00      	cmp	r7, #0
 80079a2:	f000 80d5 	beq.w	8007b50 <_printf_i+0x1cc>
 80079a6:	2f58      	cmp	r7, #88	; 0x58
 80079a8:	f000 80c1 	beq.w	8007b2e <_printf_i+0x1aa>
 80079ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079b4:	e03a      	b.n	8007a2c <_printf_i+0xa8>
 80079b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ba:	2b15      	cmp	r3, #21
 80079bc:	d8f6      	bhi.n	80079ac <_printf_i+0x28>
 80079be:	a101      	add	r1, pc, #4	; (adr r1, 80079c4 <_printf_i+0x40>)
 80079c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079c4:	08007a1d 	.word	0x08007a1d
 80079c8:	08007a31 	.word	0x08007a31
 80079cc:	080079ad 	.word	0x080079ad
 80079d0:	080079ad 	.word	0x080079ad
 80079d4:	080079ad 	.word	0x080079ad
 80079d8:	080079ad 	.word	0x080079ad
 80079dc:	08007a31 	.word	0x08007a31
 80079e0:	080079ad 	.word	0x080079ad
 80079e4:	080079ad 	.word	0x080079ad
 80079e8:	080079ad 	.word	0x080079ad
 80079ec:	080079ad 	.word	0x080079ad
 80079f0:	08007b37 	.word	0x08007b37
 80079f4:	08007a5d 	.word	0x08007a5d
 80079f8:	08007af1 	.word	0x08007af1
 80079fc:	080079ad 	.word	0x080079ad
 8007a00:	080079ad 	.word	0x080079ad
 8007a04:	08007b59 	.word	0x08007b59
 8007a08:	080079ad 	.word	0x080079ad
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	080079ad 	.word	0x080079ad
 8007a14:	080079ad 	.word	0x080079ad
 8007a18:	08007af9 	.word	0x08007af9
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	602a      	str	r2, [r5, #0]
 8007a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0a0      	b.n	8007b72 <_printf_i+0x1ee>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	0607      	lsls	r7, r0, #24
 8007a36:	f103 0104 	add.w	r1, r3, #4
 8007a3a:	6029      	str	r1, [r5, #0]
 8007a3c:	d501      	bpl.n	8007a42 <_printf_i+0xbe>
 8007a3e:	681e      	ldr	r6, [r3, #0]
 8007a40:	e003      	b.n	8007a4a <_printf_i+0xc6>
 8007a42:	0646      	lsls	r6, r0, #25
 8007a44:	d5fb      	bpl.n	8007a3e <_printf_i+0xba>
 8007a46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	da03      	bge.n	8007a56 <_printf_i+0xd2>
 8007a4e:	232d      	movs	r3, #45	; 0x2d
 8007a50:	4276      	negs	r6, r6
 8007a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a56:	230a      	movs	r3, #10
 8007a58:	4859      	ldr	r0, [pc, #356]	; (8007bc0 <_printf_i+0x23c>)
 8007a5a:	e012      	b.n	8007a82 <_printf_i+0xfe>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	6820      	ldr	r0, [r4, #0]
 8007a60:	1d19      	adds	r1, r3, #4
 8007a62:	6029      	str	r1, [r5, #0]
 8007a64:	0605      	lsls	r5, r0, #24
 8007a66:	d501      	bpl.n	8007a6c <_printf_i+0xe8>
 8007a68:	681e      	ldr	r6, [r3, #0]
 8007a6a:	e002      	b.n	8007a72 <_printf_i+0xee>
 8007a6c:	0641      	lsls	r1, r0, #25
 8007a6e:	d5fb      	bpl.n	8007a68 <_printf_i+0xe4>
 8007a70:	881e      	ldrh	r6, [r3, #0]
 8007a72:	2f6f      	cmp	r7, #111	; 0x6f
 8007a74:	bf0c      	ite	eq
 8007a76:	2308      	moveq	r3, #8
 8007a78:	230a      	movne	r3, #10
 8007a7a:	4851      	ldr	r0, [pc, #324]	; (8007bc0 <_printf_i+0x23c>)
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a82:	6865      	ldr	r5, [r4, #4]
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	bfa8      	it	ge
 8007a88:	6821      	ldrge	r1, [r4, #0]
 8007a8a:	60a5      	str	r5, [r4, #8]
 8007a8c:	bfa4      	itt	ge
 8007a8e:	f021 0104 	bicge.w	r1, r1, #4
 8007a92:	6021      	strge	r1, [r4, #0]
 8007a94:	b90e      	cbnz	r6, 8007a9a <_printf_i+0x116>
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	d04b      	beq.n	8007b32 <_printf_i+0x1ae>
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aa0:	fb03 6711 	mls	r7, r3, r1, r6
 8007aa4:	5dc7      	ldrb	r7, [r0, r7]
 8007aa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007aaa:	4637      	mov	r7, r6
 8007aac:	42bb      	cmp	r3, r7
 8007aae:	460e      	mov	r6, r1
 8007ab0:	d9f4      	bls.n	8007a9c <_printf_i+0x118>
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d10b      	bne.n	8007ace <_printf_i+0x14a>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	07de      	lsls	r6, r3, #31
 8007aba:	d508      	bpl.n	8007ace <_printf_i+0x14a>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	6861      	ldr	r1, [r4, #4]
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	bfde      	ittt	le
 8007ac4:	2330      	movle	r3, #48	; 0x30
 8007ac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ace:	1b52      	subs	r2, r2, r5
 8007ad0:	6122      	str	r2, [r4, #16]
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f8cd a000 	str.w	sl, [sp]
 8007adc:	aa03      	add	r2, sp, #12
 8007ade:	f7ff fedf 	bl	80078a0 <_printf_common>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d14a      	bne.n	8007b7c <_printf_i+0x1f8>
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aea:	b004      	add	sp, #16
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	f043 0320 	orr.w	r3, r3, #32
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	2778      	movs	r7, #120	; 0x78
 8007afa:	4832      	ldr	r0, [pc, #200]	; (8007bc4 <_printf_i+0x240>)
 8007afc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	6829      	ldr	r1, [r5, #0]
 8007b04:	061f      	lsls	r7, r3, #24
 8007b06:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b0a:	d402      	bmi.n	8007b12 <_printf_i+0x18e>
 8007b0c:	065f      	lsls	r7, r3, #25
 8007b0e:	bf48      	it	mi
 8007b10:	b2b6      	uxthmi	r6, r6
 8007b12:	07df      	lsls	r7, r3, #31
 8007b14:	bf48      	it	mi
 8007b16:	f043 0320 	orrmi.w	r3, r3, #32
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	bf48      	it	mi
 8007b1e:	6023      	strmi	r3, [r4, #0]
 8007b20:	b91e      	cbnz	r6, 8007b2a <_printf_i+0x1a6>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	f023 0320 	bic.w	r3, r3, #32
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	e7a6      	b.n	8007a7c <_printf_i+0xf8>
 8007b2e:	4824      	ldr	r0, [pc, #144]	; (8007bc0 <_printf_i+0x23c>)
 8007b30:	e7e4      	b.n	8007afc <_printf_i+0x178>
 8007b32:	4615      	mov	r5, r2
 8007b34:	e7bd      	b.n	8007ab2 <_printf_i+0x12e>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	6826      	ldr	r6, [r4, #0]
 8007b3a:	1d18      	adds	r0, r3, #4
 8007b3c:	6961      	ldr	r1, [r4, #20]
 8007b3e:	6028      	str	r0, [r5, #0]
 8007b40:	0635      	lsls	r5, r6, #24
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	d501      	bpl.n	8007b4a <_printf_i+0x1c6>
 8007b46:	6019      	str	r1, [r3, #0]
 8007b48:	e002      	b.n	8007b50 <_printf_i+0x1cc>
 8007b4a:	0670      	lsls	r0, r6, #25
 8007b4c:	d5fb      	bpl.n	8007b46 <_printf_i+0x1c2>
 8007b4e:	8019      	strh	r1, [r3, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	4615      	mov	r5, r2
 8007b54:	6123      	str	r3, [r4, #16]
 8007b56:	e7bc      	b.n	8007ad2 <_printf_i+0x14e>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	1d1a      	adds	r2, r3, #4
 8007b5e:	602a      	str	r2, [r5, #0]
 8007b60:	681d      	ldr	r5, [r3, #0]
 8007b62:	6862      	ldr	r2, [r4, #4]
 8007b64:	4628      	mov	r0, r5
 8007b66:	f000 f895 	bl	8007c94 <memchr>
 8007b6a:	b108      	cbz	r0, 8007b70 <_printf_i+0x1ec>
 8007b6c:	1b40      	subs	r0, r0, r5
 8007b6e:	6060      	str	r0, [r4, #4]
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	2300      	movs	r3, #0
 8007b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7a:	e7aa      	b.n	8007ad2 <_printf_i+0x14e>
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	4649      	mov	r1, r9
 8007b80:	4640      	mov	r0, r8
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	47d0      	blx	sl
 8007b86:	3001      	adds	r0, #1
 8007b88:	d0ad      	beq.n	8007ae6 <_printf_i+0x162>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	079b      	lsls	r3, r3, #30
 8007b8e:	d413      	bmi.n	8007bb8 <_printf_i+0x234>
 8007b90:	68e0      	ldr	r0, [r4, #12]
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	4298      	cmp	r0, r3
 8007b96:	bfb8      	it	lt
 8007b98:	4618      	movlt	r0, r3
 8007b9a:	e7a6      	b.n	8007aea <_printf_i+0x166>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	47d0      	blx	sl
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d09d      	beq.n	8007ae6 <_printf_i+0x162>
 8007baa:	3501      	adds	r5, #1
 8007bac:	68e3      	ldr	r3, [r4, #12]
 8007bae:	9903      	ldr	r1, [sp, #12]
 8007bb0:	1a5b      	subs	r3, r3, r1
 8007bb2:	42ab      	cmp	r3, r5
 8007bb4:	dcf2      	bgt.n	8007b9c <_printf_i+0x218>
 8007bb6:	e7eb      	b.n	8007b90 <_printf_i+0x20c>
 8007bb8:	2500      	movs	r5, #0
 8007bba:	f104 0619 	add.w	r6, r4, #25
 8007bbe:	e7f5      	b.n	8007bac <_printf_i+0x228>
 8007bc0:	0800808d 	.word	0x0800808d
 8007bc4:	0800809e 	.word	0x0800809e

08007bc8 <__malloc_lock>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__malloc_lock+0x8>)
 8007bca:	f7ff bc19 	b.w	8007400 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	2001137c 	.word	0x2001137c

08007bd4 <__malloc_unlock>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__malloc_unlock+0x8>)
 8007bd6:	f7ff bc14 	b.w	8007402 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	2001137c 	.word	0x2001137c

08007be0 <_realloc_r>:
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	4680      	mov	r8, r0
 8007be6:	4614      	mov	r4, r2
 8007be8:	460e      	mov	r6, r1
 8007bea:	b921      	cbnz	r1, 8007bf6 <_realloc_r+0x16>
 8007bec:	4611      	mov	r1, r2
 8007bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	f7ff bdd5 	b.w	80077a0 <_malloc_r>
 8007bf6:	b92a      	cbnz	r2, 8007c04 <_realloc_r+0x24>
 8007bf8:	f7ff fc12 	bl	8007420 <_free_r>
 8007bfc:	4625      	mov	r5, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	f000 f854 	bl	8007cb0 <_malloc_usable_size_r>
 8007c08:	4284      	cmp	r4, r0
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	d802      	bhi.n	8007c14 <_realloc_r+0x34>
 8007c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c12:	d812      	bhi.n	8007c3a <_realloc_r+0x5a>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4640      	mov	r0, r8
 8007c18:	f7ff fdc2 	bl	80077a0 <_malloc_r>
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d0ed      	beq.n	8007bfe <_realloc_r+0x1e>
 8007c22:	42bc      	cmp	r4, r7
 8007c24:	4622      	mov	r2, r4
 8007c26:	4631      	mov	r1, r6
 8007c28:	bf28      	it	cs
 8007c2a:	463a      	movcs	r2, r7
 8007c2c:	f7ff fbea 	bl	8007404 <memcpy>
 8007c30:	4631      	mov	r1, r6
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7ff fbf4 	bl	8007420 <_free_r>
 8007c38:	e7e1      	b.n	8007bfe <_realloc_r+0x1e>
 8007c3a:	4635      	mov	r5, r6
 8007c3c:	e7df      	b.n	8007bfe <_realloc_r+0x1e>

08007c3e <memmove>:
 8007c3e:	4288      	cmp	r0, r1
 8007c40:	b510      	push	{r4, lr}
 8007c42:	eb01 0402 	add.w	r4, r1, r2
 8007c46:	d902      	bls.n	8007c4e <memmove+0x10>
 8007c48:	4284      	cmp	r4, r0
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	d807      	bhi.n	8007c5e <memmove+0x20>
 8007c4e:	1e43      	subs	r3, r0, #1
 8007c50:	42a1      	cmp	r1, r4
 8007c52:	d008      	beq.n	8007c66 <memmove+0x28>
 8007c54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c5c:	e7f8      	b.n	8007c50 <memmove+0x12>
 8007c5e:	4601      	mov	r1, r0
 8007c60:	4402      	add	r2, r0
 8007c62:	428a      	cmp	r2, r1
 8007c64:	d100      	bne.n	8007c68 <memmove+0x2a>
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c70:	e7f7      	b.n	8007c62 <memmove+0x24>
	...

08007c74 <_sbrk_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	2300      	movs	r3, #0
 8007c78:	4d05      	ldr	r5, [pc, #20]	; (8007c90 <_sbrk_r+0x1c>)
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7f9 fadc 	bl	800123c <_sbrk>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_sbrk_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_sbrk_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20011378 	.word	0x20011378

08007c94 <memchr>:
 8007c94:	4603      	mov	r3, r0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	b2c9      	uxtb	r1, r1
 8007c9a:	4402      	add	r2, r0
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	d101      	bne.n	8007ca6 <memchr+0x12>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e003      	b.n	8007cae <memchr+0x1a>
 8007ca6:	7804      	ldrb	r4, [r0, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	428c      	cmp	r4, r1
 8007cac:	d1f6      	bne.n	8007c9c <memchr+0x8>
 8007cae:	bd10      	pop	{r4, pc}

08007cb0 <_malloc_usable_size_r>:
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f18      	subs	r0, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfbc      	itt	lt
 8007cba:	580b      	ldrlt	r3, [r1, r0]
 8007cbc:	18c0      	addlt	r0, r0, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
